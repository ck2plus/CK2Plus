namespace = Plus

#reserved: Plus.2650 to Plus.2699

###########################################
# NOMAD EVENTS
###########################################

### NEW RULER IS OF A DIFFERENT DYNASTY

# New nomad leader is not the same dynasty as the previous one
character_event = {
	id = Plus.2650

	is_triggered_only = yes # on_new_holder_inheritance/usurpation
	hide_window = yes

	trigger = {
		is_nomadic = yes

		FROM = {
			is_primary_holder_title = yes

			NOR = {
				title = e_golden_horde
				title = e_ilkhanate
				title = e_mongol_empire
			}
		}

		FROMFROM = {
			NOT = { dynasty = ROOT }
		}

		NOR = {
			has_character_flag = new_nomadic_clan_leader
			has_character_modifier = greatest_of_khans
		}

		has_game_started = yes
	}

	immediate = {
		set_character_flag = new_nomadic_clan_leader
		FROMFROM = { save_event_target_as = former_khan }

		character_event = {
			id = Plus.2651
			days = 2
		}
	}
}

# Bounce event
character_event = {
	id = Plus.2651

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes

	trigger = {
		has_landed_title = FROMFROM

		NOR = {
			has_character_flag = has_current_revolt

			any_war = {
				defender = { character = ROOT }
				using_cb = cb_minor_clan_revolt
			}
		}
	}

	immediate = {
		log = "[Root.GetTitledName] has become Khagan of [Root.PrimaryTitle.GetName] and is a new dynasty"

		any_vassal = {
			limit = {
				real_tier = KING
				pf_war_trait_trigger = no
				in_revolt = no
				is_nomadic = yes
			}

			character_event = {
				id = Plus.2652
				days = 1
				random = 9
			}
		}
	}
}

# Clan vassals decide whether or not to follow the new ruler
character_event = {
	id = Plus.2652
	desc = EVTDESC_Plus_2652
	picture = GFX_evt_tengri_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	only_rulers = yes

	trigger = {
		vassal_of = FROM
	}

	option = {
		name = EVTOPTA_Plus_2652 # We will not follow him!

		trigger = {
			is_adult = yes
			is_incapable = no
			prisoner = no

			NOR = {
				has_truce = FROM
				has_non_aggression_pact_with = FROM
			}
		}

		prestige = 100
		set_defacto_liege = ROOT
		pf_liege_change_effect = yes

		tooltip = {
			any_demesne_title = {
				limit = { real_tier = COUNT }
				add_claim = FROM
			}
		}

		hidden_effect = {
			FROM = {
				opinion = {
					name = opinion_outraged
					who = ROOT
					years = 10
				}

				character_event = { id = Plus.2653 }
			}
		}

		ai_chance = {
			factor = 50

			trigger = {
				is_primary_war_defender = no

				NOR = {
					dynasty = FROM
					has_blood_oath_with = FROM
					is_allied_with = FROM
					has_non_aggression_pact_with = FROM
				}

				relative_power = { who = FROM power >= 0.33 }
				clan_opinion = { who = FROM value < 50 }
				opinion = { who = FROM value < 50 }
			}

			mult_modifier = {
				factor = 0.5
				clan_opinion = { who = FROM value >= 0 }
			}

			mult_modifier = {
				factor = 0.5
				clan_opinion = { who = FROM value >= 25 }
			}

			mult_modifier = {
				factor = 1.5
				NOT = { religion = FROM }
			}

			mult_modifier = {
				factor = 1.5
				NOT = { culture = FROM }
			}

			mult_modifier = {
				factor = 1.5
				relative_power = { who = FROM power >= 1.5 }
			}

			mult_modifier = {
				factor = 1.5
				trait = ambitious
			}

			mult_modifier = {
				factor = 1.25
				trait = brave
			}

			mult_modifier = {
				factor = 1.25
				trait = proud
			}

			mult_modifier = {
				factor = 1.25
				is_strong_trigger = yes
			}
		}
	}

	option = {
		name = EVTOPTB_Plus_2652 # He rules, at least for now

		ai_chance = {
			factor = 50

			mult_modifier = {
				factor = 0.1

				OR = {
					has_feud_with = FROM
					is_rival = FROM
					is_foe = FROM
				}
			}

			mult_modifier = {
				factor = 0.5
				clan_opinion = { who = FROM value < -25 }
			}

			mult_modifier = {
				factor = 0.5
				clan_opinion = { who = FROM value < -50 }
			}

			mult_modifier = {
				factor = 0.5
				clan_opinion = { who = FROM value < -75 }
			}

			mult_modifier = {
				factor = 1.5
				religion = FROM
			}

			mult_modifier = {
				factor = 1.5
				relative_power = { who = FROM power < 0.67 }
			}

			mult_modifier = {
				factor = 1.5
				relative_power = { who = FROM power < 0.5 }
			}

			mult_modifier = {
				factor = 1.5
				relative_power = { who = FROM power < 0.4 }
			}

			mult_modifier = {
				factor = 2.0
				trait = content
			}

			mult_modifier = {
				factor = 2.0
				trait = craven
			}

			mult_modifier = {
				factor = 1.5
				trait = humble
			}

			mult_modifier = {
				factor = 1.5
				is_weak_trigger = yes
			}
		}
	}
}

# Former khan informed of clan departing
character_event = {
	id = Plus.2653
	desc = EVTDESC_Plus_2653
	picture = GFX_evt_tengri_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		log = "[From.GetTitledName] has elected to depart from the [Root.PrimaryTitle.GetFullName]"
	}

	option = {
		name = EVTOPTA_Plus_2653

		prestige = -100

		FROM = {
			show_scope_change = no

			any_demesne_title = {
				show_scope_change = no
				limit = { real_tier = COUNT }
				add_claim = ROOT
			}
		}
	}
}

### RULER OF LARGE REALM DIES WITH MULTIPLE SONS

# Nomadic ruler of a large realm dies with multiple sons - hidden start to get all the scopes
character_event = {
	id = Plus.2654

	is_triggered_only = yes # on_death
	hide_window = yes

	only_independent = yes

	trigger = {
		is_nomadic = yes

		# At least twenty-five provinces in the realm
		num_of_count_titles_in_realm >= 25

		# At least four provinces in demesne
		num_of_count_titles >= 4

		# Current heir is my child
		current_heir = { is_child_of = ROOT }

		# At least one other legitimate, able, adult son
		any_child = {
			dynasty = ROOT
			is_female = no
			is_adult = yes
			prisoner = no

			NOR = {
				is_primary_heir = ROOT
				trait = incapable
				trait = content
				trait = humble
				is_weak_trigger = yes
			}
		}

		NOR = {
			has_game_rule = {
				name = nomad_stability
				value = stable
			}

			has_character_flag = is_temujin
		}
	}

	immediate = {
		log = "[Root.GetTitledName] has died with sufficient size and multiple sons -- Nomadic Split-Up Event"

		# Invalidate current rebellions
		any_war = {
			limit = {
				defender = { character = ROOT }

				OR = {
					using_cb = cb_minor_clan_revolt
					using_cb = peasant_revolt
					using_cb = heretic_revolt
					using_cb = religious_revolt
					using_cb = liberation_revolt
					using_cb = cb_install_khan
					using_cb = cb_faction_overthrow_ruler
					using_cb = religious_overthrow_ruler
					using_cb = claim_on_liege_plot
					using_cb = other_claim_on_liege_plot
				}
			}

			end_war = invalid
		}

		# Invalidate current offensive wars
		any_war = {
			limit = { attacker = { character = ROOT } }
			end_war = invalid
		}

		# Remember who the primary heir is
		current_heir = {
			save_event_target_as = nomadic_first_heir
			add_trait = disinherited
		}

		# Switch all nomadic titles to gavelkind
		any_demesne_title = {
			limit = { has_law = succ_nomad_succession }

			set_title_flag = non_manual_law_change # No prestige loss
			add_law = succ_gavelkind
			clr_title_flag = non_manual_law_change # No prestige loss
		}

		# Disinherit all children who don't meet the qualifications
		any_child = {
			limit = {
				NOT = { trait = disinherited }

				NAND = {
					dynasty = ROOT
					is_adult = yes
					is_female = no
					prisoner = no
					is_incapable = no
					is_weak_trigger = no

					NOR = {
						trait = content
						trait = humble
					}
				}
			}

			add_trait = disinherited

			character_event = {
				id = Plus.2656 # Remove disinherited trait
				days = 1
			}
		}

		# Now see who the second heir is
		recalc_succession = yes

		current_heir = {
			save_event_target_as = nomadic_second_heir
			add_trait = disinherited
		}

		# Is there a third heir? only valid in larger realms
		recalc_succession = yes

		current_heir = {
			if = {
				limit = {
					is_child_of = ROOT
					ROOT = { num_of_count_titles_in_realm >= 30 }
				}

				save_event_target_as = nomadic_third_heir
				add_trait = disinherited
			}
		}

		# Is there a fourth heir? only valid in larger realms
		recalc_succession = yes

		current_heir = {
			if = {
				limit = {
					is_child_of = ROOT
					ROOT = { num_of_count_titles_in_realm >= 35 }
				}

				save_event_target_as = nomadic_fourth_heir
				add_trait = disinherited
			}
		}

		# Now disinherit the remaining children
		any_child = {
			limit = { NOT = { trait = disinherited } }

			add_trait = disinherited

			character_event = {
				id = Plus.2656 # Remove disinherited trait
				days = 1
			}
		}

		# Remove disinherited trait from chosen successors and change dynasties
		event_target:nomadic_first_heir = {
			remove_trait = disinherited
		}

		event_target:nomadic_second_heir = {
			remove_trait = disinherited

			if = {
				limit = { dynasty = ROOT }
				dynasty = father_bastard
			}

			any_close_relative = {
				limit = {
					is_descendant_of = PREV
					dynasty = ROOT
				}

				dynasty = PREV
			}
		}

		event_target:nomadic_third_heir = {
			remove_trait = disinherited

			if = {
				limit = { dynasty = ROOT }
				dynasty = father_bastard
			}

			any_close_relative = {
				limit = {
					is_descendant_of = PREV
					dynasty = ROOT
				}

				dynasty = PREV
			}
		}

		event_target:nomadic_fourth_heir = {
			remove_trait = disinherited

			if = {
				limit = { dynasty = ROOT }
				dynasty = father_bastard
			}

			any_close_relative = {
				limit = {
					is_descendant_of = PREV
					dynasty = ROOT
				}

				dynasty = PREV
			}
		}

		recalc_succession = yes

		# Continue as normal if the original heir is also the current heir
		if = {
			limit = {
				current_heir = { character = event_target:nomadic_first_heir }
			}

			capital_scope = { county = { grant_title_no_opinion = event_target:nomadic_first_heir } }
			clan_title = { grant_title_no_opinion = event_target:nomadic_first_heir }

			current_heir = {
				character_event = {
					id = Plus.2658
					days = 1
				}
			}
		}

		# Otherwise simulate gavelkind by handing out some county titles
		else = {
			# First switch titles back to nomad succession
			any_demesne_title = {
				limit = { has_law = succ_gavelkind }

				set_title_flag = non_manual_law_change # No prestige loss
				add_law = succ_nomad_succession
				clr_title_flag = non_manual_law_change # No prestige loss
			}

			recalc_succession = yes

			# Then give the other sons a random capital
			random_demesne_province = {
				limit = {
					is_capital = no
					owned_by = PREV
				}

				county = { grant_title_no_opinion = event_target:nomadic_second_heir }
				event_target:nomadic_second_heir = { set_government_type = nomadic_government }
			}

			random_demesne_province = {
				limit = {
					is_capital = no
					owned_by = PREV
				}

				county = { grant_title_no_opinion = event_target:nomadic_third_heir }
				event_target:nomadic_third_heir = { set_government_type = nomadic_government }
			}

			random_demesne_province = {
				limit = {
					is_capital = no
					owned_by = PREV
				}

				county = { grant_title_no_opinion = event_target:nomadic_fourth_heir }
				event_target:nomadic_fourth_heir = { set_government_type = nomadic_government }
			}

			# Give the second heir a second province if I have at least three left
			if = {
				limit = { num_of_count_titles >= 3 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_second_heir }
				}
			}

			# Give the third heir a second province if I have at least three left
			if = {
				limit = { num_of_count_titles >= 3 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_third_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_third_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_third_heir }
				}
			}

			# Give the fourth heir a second province if I have at least four left
			if = {
				limit = { num_of_count_titles >= 4 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_fourth_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_fourth_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_fourth_heir }
				}
			}

			# Give the second heir a third province if I have at least four left
			if = {
				limit = { num_of_count_titles >= 4 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_second_heir }
				}
			}

			# Give the third heir a third province if I have at least four left
			if = {
				limit = { num_of_count_titles >= 4 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_third_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_third_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_third_heir }
				}
			}

			# Give the second heir a fourth province if I have at least four left
			if = {
				limit = { num_of_count_titles >= 4 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_second_heir }
				}
			}

			# Give the third heir a fourth province if I have at least five left
			if = {
				limit = { num_of_count_titles >= 5 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_third_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_third_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_third_heir }
				}
			}

			# Give the second heir a fifth province if I have at least six left
			if = {
				limit = { num_of_count_titles >= 6 }

				random_demesne_province = {
					limit = {
						is_capital = no
						owned_by = PREV
					}

					# First try a neighboring province
					preferred_limit = {
						any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
					}

					# Then try a province nearby
					preferred_limit = {
						any_neighbor_province = {
							any_neighbor_province = { owned_by = event_target:nomadic_second_heir }
						}
					}

					# Then give any random province

					county = { grant_title_no_opinion = event_target:nomadic_second_heir }
				}
			}

			# Then continue once titles are handed out
			current_heir = {
				character_event = {
					id = Plus.2658
					days = 1
				}
			}
		}

		# Fire the event to kick off the 'anti-border gore' chain
		event_target:nomadic_first_heir = {
			character_event = {
				id = Plus.2665
				days = 5
			}
		}

		# Clean up flags
		event_target:nomadic_first_heir = { character_event = { id = Plus.2673 days = 10 } }
		event_target:nomadic_second_heir = { character_event = { id = Plus.2673 days = 10 } }
		event_target:nomadic_third_heir = { character_event = { id = Plus.2673 days = 10 } }
		event_target:nomadic_fourth_heir = { character_event = { id = Plus.2673 days = 10 } }

		character_event = { id = Plus.2655 }
	}
}

# Nomadic ruler of a large realm dies with multiple sons
character_event = {
	id = Plus.2655
	title = EVTNAME_Plus_2655
	picture = GFX_evt_death

	desc = {
		text = EVTDESC_Plus_2655_two
		trigger = {
			NOR = {
				event_target:nomadic_third_heir = { is_alive = yes }
				event_target:nomadic_fourth_heir = { is_alive = yes }
			}
		}
	}
	desc = {
		text = EVTDESC_Plus_2655_three
		trigger = {
			event_target:nomadic_third_heir = { is_alive = yes }
			NOT = { event_target:nomadic_fourth_heir = { is_alive = yes } }
		}
	}
	desc = {
		text = EVTDESC_Plus_2655_four
		trigger = {
			event_target:nomadic_third_heir = { is_alive = yes }
			event_target:nomadic_fourth_heir = { is_alive = yes }
		}
	}

	is_triggered_only = yes
	major = yes

	only_independent = yes

	major_trigger = {
		OR = {
			same_realm = ROOT
			character = event_target:nomadic_first_heir
			character = event_target:nomadic_second_heir
			character = event_target:nomadic_third_heir
			character = event_target:nomadic_fourth_heir

			capital_scope = {
				ROOT = {
					capital_scope = {
						distance = {
							where = PREVPREV
							value < 400 # Same part of the world
						}
					}
				}
			}
		}
	}

	option = {
		name = {
			text = EVTOPTA_Plus_2655
			trigger = { character = event_target:nomadic_first_heir }
		}
		name = {
			text = EVTOPTB_Plus_2655
			trigger = {
				OR = {
					character = event_target:nomadic_second_heir
					character = event_target:nomadic_third_heir
					character = event_target:nomadic_fourth_heir
				}
			}
		}
		name = {
			text = EVTOPTC_Plus_2655
			trigger = {
				same_realm = ROOT
				NOR = {
					character = event_target:nomadic_first_heir
					character = event_target:nomadic_second_heir
					character = event_target:nomadic_third_heir
					character = event_target:nomadic_fourth_heir
				}
			}
		}
		name = {
			text = EVTOPTD_Plus_2655
			trigger = {
				NOR = {
					same_realm = ROOT
					character = event_target:nomadic_first_heir
					character = event_target:nomadic_second_heir
					character = event_target:nomadic_third_heir
					character = event_target:nomadic_fourth_heir
				}
			}
		}
	}
}

# Remove disinherited trait from remaining children
character_event = {
	id = Plus.2656

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		remove_trait = disinherited
	}
}

# Split up population/manpower and test if sons will want to leave the realm
character_event = {
	id = Plus.2658

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		## TODO: Rework with exportable script values

		# Split up population a bit
		if = {
			limit = { population >= 4000 }
			population = -1000
			event_target:nomadic_second_heir = { population = 1000 }
		}
		if = {
			limit = { population >= 3000 }
			population = -750
			event_target:nomadic_second_heir = { population = 750 }
		}
		if = {
			limit = {
				population >= 3000
				event_target:nomadic_third_heir = { is_alive = yes }
			}
			population = -750
			event_target:nomadic_third_heir = { population = 750 }
		}
		if = {
			limit = { population >= 2000 }
			population = -500
			event_target:nomadic_second_heir = { population = 500 }
		}
		if = {
			limit = {
				population >= 2000
				event_target:nomadic_third_heir = { is_alive = yes }
			}
			population = -500
			event_target:nomadic_third_heir = { population = 500 }
		}
		if = {
			limit = {
				population >= 2000
				event_target:nomadic_fourth_heir = { is_alive = yes }
			}
			population = -500
			event_target:nomadic_fourth_heir = { population = 500 }
		}

		# Split up manpower a bit
		if = {
			limit = { max_manpower >= 2000 }
			manpower = -750
			event_target:nomadic_second_heir = { manpower = 750 }
		}
		if = {
			limit = { max_manpower >= 1500 }
			manpower = -500
			event_target:nomadic_second_heir = { manpower = 500 }
		}
		if = {
			limit = {
				max_manpower >= 1500
				event_target:nomadic_third_heir = { is_alive = yes }
			}
			manpower = -500
			event_target:nomadic_third_heir = { manpower = 500 }
		}
		if = {
			limit = { max_manpower >= 1000 }
			manpower = -250
			event_target:nomadic_second_heir = { manpower = 250 }
		}
		if = {
			limit = {
				max_manpower >= 1000
				event_target:nomadic_third_heir = { is_alive = yes }
			}
			manpower = -250
			event_target:nomadic_third_heir = { manpower = 250 }
		}
		if = {
			limit = {
				max_manpower >= 1000
				event_target:nomadic_fourth_heir = { is_alive = yes }
			}
			manpower = -250
			event_target:nomadic_fourth_heir = { manpower = 250 }
		}
		if = {
			limit = { max_manpower >= 500 }
			manpower = -150
			event_target:nomadic_second_heir = { manpower = 150 }
		}
		if = {
			limit = {
				max_manpower >= 500
				event_target:nomadic_third_heir = { is_alive = yes }
			}
			manpower = -150
			event_target:nomadic_third_heir = { manpower = 150 }
		}
		if = {
			limit = {
				max_manpower >= 500
				event_target:nomadic_fourth_heir = { is_alive = yes }
			}
			manpower = -150
			event_target:nomadic_fourth_heir = { manpower = 150 }
		}

		# Ask brothers if they want to secede
		event_target:nomadic_second_heir = { character_event = { id = Plus.2659 } }
		event_target:nomadic_third_heir = { character_event = { id = Plus.2659 } }
		event_target:nomadic_fourth_heir = { character_event = { id = Plus.2659 } }
	}
}

# Brothers consider whether they want to secede from the main realm
character_event = {
	id = Plus.2659
	desc = EVTDESC_Plus_2659
	picture = GFX_evt_tengri_throneroom_oldgods
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	only_rulers = yes
	only_capable = yes
	prisoner = no

	trigger = {
		vassal_of = FROM
	}

	option = {
		name = EVTOPTA_Plus_2659 # I will forge my own destiny

		trigger = { in_revolt = no }

		prestige = 100
		set_defacto_liege = ROOT
		pf_liege_change_effect = yes

		FROM = {
			show_scope_change = no

			any_demesne_title = {
				show_scope_change = no

				remove_claim = ROOT
			}
		}

		hidden_effect = {
			any_demesne_title = { remove_claim = FROM }

			FROM = {
				# Notify former liege
				letter_event = { id = Plus.2660 }

				# Invite neighboring clans to join
				any_vassal = {
					limit = {
						is_nomadic = yes
						shares_realm_border_with = ROOT

						NOR = {
							character = event_target:nomadic_second_heir
							character = event_target:nomadic_third_heir
							character = event_target:nomadic_fourth_heir
						}
					}

					letter_event = {
						id = Plus.2661
						days = 1
					}
				}
			}
		}

		ai_chance = {
			factor = 70

			mult_modifier = {
				factor = 0.1
				has_blood_oath_with = FROM
			}

			mult_modifier = {
				factor = 1.5
				opinion = { who = FROM value < -25 }
			}

			mult_modifier = {
				factor = 1.5
				opinion = { who = FROM value < -50 }
			}

			mult_modifier = {
				factor = 2
				opinion = { who = FROM value < -75 }
			}

			mult_modifier = {
				factor = 1.5
				trait = ambitious
			}

			mult_modifier = {
				factor = 1.5
				trait = proud
			}

			mult_modifier = {
				factor = 1.2
				trait = greedy
			}

			mult_modifier = {
				factor = 1.2
				trait = brave
			}

			mult_modifier = {
				factor = 1.2
				trait = paranoid
			}
		}
	}

	option = {
		name = EVTOPTB_Plus_2659 # My brother is my liege

		ai_chance = {
			factor = 30

			mult_modifier = {
				factor = 3
				any_demesne_title = {
					lower_real_tier_than = DUKE
					is_occupied = yes
				}
			}

			mult_modifier = {
				factor = 2
				FROM = {
					any_war = {
						defender = { character = PREVPREV }
						war_score >= 15
					}
				}
			}

			mult_modifier = {
				factor = 0.1
				is_foe = FROM
			}

			mult_modifier = {
				factor = 1.5
				opinion = { who = FROM value >= 25 }
			}

			mult_modifier = {
				factor = 1.5
				opinion = { who = FROM value >= 50 }
			}

			mult_modifier = {
				factor = 2
				opinion = { who = FROM value >= 75 }
			}

			mult_modifier = {
				factor = 0.5
				character = event_target:nomadic_second_heir
			}

			mult_modifier = {
				factor = 1.5
				character = event_target:nomadic_third_heir
			}

			mult_modifier = {
				factor = 2.5
				character = event_target:nomadic_fourth_heir
			}

			mult_modifier = {
				factor = 1.5
				trait = craven
			}

			mult_modifier = {
				factor = 1.2
				trait = patient
			}

			mult_modifier = {
				factor = 1.2
				trait = trusting
			}
		}
	}
}

# First heir notified that brother plans to secede
letter_event = {
	id = Plus.2660
	desc = EVTDESC_Plus_2660
	border = GFX_event_letter_frame_diplomacy

	is_triggered_only = yes

	option = {
		name = I_SEE
		set_character_flag = brother_seceded
	}
}

# Neighboring clan invited to join seceding brother
letter_event = {
	id = Plus.2661
	desc = EVTDESC_Plus_2661
	border = GFX_event_letter_frame_diplomacy

	is_triggered_only = yes

	option = {
		name = EVTOPTA_Plus_2661 # Join him

		trigger = {
			vassal_of = event_target:nomadic_first_heir
			in_revolt = no
			pf_war_trait_trigger = no
			NOT = { has_character_flag = changed_khans }
		}

		ai_chance = {
			factor = 50

			trigger = {
				NOT = { has_feud_with = FROM }
			}

			mult_modifier = {
				factor = 0.1

				OR = {
					has_blood_oath_with = event_target:nomadic_first_heir
					has_non_aggression_pact_with = event_target:nomadic_first_heir
					is_allied_with = event_target:nomadic_first_heir
					clan_opinion = { who = event_target:nomadic_first_heir value >= 50 }
					opinion = { who = event_target:nomadic_first_heir value >= 50 }
				}
			}

			mult_modifier = {
				factor = 0.5

				capital_scope = {
					distance_from_realm = {
						who = FROM
						value >= 200
					}
				}
			}

			mult_modifier = {
				factor = 0.5

				capital_scope = {
					distance_from_realm = {
						who = FROM
						value >= 300
					}
				}
			}

			mult_modifier = {
				factor = 0.5

				capital_scope = {
					distance_from_realm = {
						who = FROM
						value >= 400
					}
				}
			}

			mult_modifier = {
				factor = 0.5
				clan_opinion = { who = event_target:nomadic_first_heir value >= 25 }
			}

			mult_modifier = {
				factor = 1.5
				clan_opinion = { who = event_target:nomadic_first_heir value < -25 }
			}

			mult_modifier = {
				factor = 1.5
				clan_opinion = { who = event_target:nomadic_first_heir value < -50 }
			}

			mult_modifier = {
				factor = 1.5
				clan_opinion = { who = event_target:nomadic_first_heir value < -75 }
			}

			mult_modifier = {
				factor = 1.5
				NOT = { religion = event_target:nomadic_first_heir }
			}

			mult_modifier = {
				factor = 1.5
				NOT = { culture = event_target:nomadic_first_heir }
			}
		}

		set_character_flag = changed_khans
		tooltip = { set_defacto_liege = FROM }

		hidden_effect = {
			FROM = { letter_event = { id = Plus.2662 days = 1 } }
			event_target:nomadic_first_heir = { letter_event = { id = Plus.2663 days = 1 } }
		}
	}

	option = {
		name = EVTOPTB_Plus_2661 # Refuse

		ai_chance = {
			factor = 50

			trigger = {
				NOR = {
					is_allied_with = FROM
					has_blood_oath_with = FROM
					has_feud_with = event_target:nomadic_first_heir
				}
			}

			mult_modifier = {
				factor = 0.25

				OR = {
					has_non_aggression_pact_with = FROM
					clan_opinion = { who = FROM value >= 50 }
					opinion = { who = FROM value >= 50 }
				}
			}

			mult_modifier = {
				factor = 0.5
				clan_opinion = { who = FROM value >= 25 }
			}

			mult_modifier = {
				factor = 1.5
				clan_opinion = { who = FROM value < -25 }
			}

			mult_modifier = {
				factor = 1.5
				clan_opinion = { who = FROM value < -50 }
			}

			mult_modifier = {
				factor = 1.5
				clan_opinion = { who = FROM value < -75 }
			}

			mult_modifier = {
				factor = 1.5
				NOT = { religion = FROM }
			}

			mult_modifier = {
				factor = 1.5
				NOT = { culture = FROM }
			}

			mult_modifier = {
				factor = 1.5
				trait = content
			}

			mult_modifier = {
				factor = 1.5
				trait = craven
			}

			mult_modifier = {
				factor = 1.5
				trait = humble
			}

			mult_modifier = {
				factor = 1.5
				is_weak_trigger = yes
			}
		}

		hidden_effect = {
			FROM = {
				letter_event = {
					id = Plus.2664
					days = 1
				}
			}
		}
	}
}

# Neighboring clan agrees to join
letter_event = {
	id = Plus.2662
	desc = EVTDESC_Plus_2662
	border = GFX_event_letter_frame_diplomacy

	is_triggered_only = yes

	option = {
		name = EXCELLENT

		tooltip = {
			set_defacto_vassal = FROM
		}
	}
}

# Neighboring clan notifies liege that they're joining the brother
letter_event = {
	id = Plus.2663
	desc = EVTDESC_Plus_2663
	border = GFX_event_letter_frame_diplomacy

	is_triggered_only = yes

	immediate = {
		FROMFROM = { save_event_target_as = departing_brother }
	}

	option = {
		name = CURSES

		event_target:departing_brother = {
			show_scope_change = no

			set_defacto_vassal = FROM
		}

		hidden_effect = {
			FROM = {
				any_demesne_title = { remove_claim = ROOT }
				clr_character_flag = changed_khans
			}

			any_demesne_title = { remove_claim = FROM }
		}
	}
}

# Neighboring clan refuses to join
letter_event = {
	id = Plus.2664
	desc = EVTDESC_Plus_2664
	border = GFX_event_letter_frame_diplomacy

	is_triggered_only = yes

	option = {
		name = CURSES

		hidden_effect = {
			FROM = { any_demesne_title = { remove_claim = ROOT } }
			any_demesne_title = { remove_claim = FROM }
		}
	}
}

# Once brothers have seceded, check for isolated provinces
character_event = {
	id = Plus.2665

	is_triggered_only = yes
	hide_window = yes

	has_character_flag = brother_seceded

	immediate = {
		clr_character_flag = brother_seceded

		# Begin contiguous territory check
		capital_scope = { set_province_flag = contingent_nomadic_territory }
		character_event = { id = Plus.2666 }

		any_vassal = {
			limit = { is_nomadic = yes }

			capital_scope = { set_province_flag = contingent_nomadic_territory }
			character_event = { id = Plus.2666 }
		}

		# Fire the event to exchange territories
		character_event = {
			id = Plus.2667
			days = 1
		}

		# Begin contiguous territory check for the other heirs
		any_independent_ruler = {
			limit = {
				OR = {
					character = event_target:nomadic_second_heir
					character = event_target:nomadic_third_heir
					character = event_target:nomadic_fourth_heir
				}
			}

			capital_scope = { set_province_flag = contingent_nomadic_territory }
			character_event = { id = Plus.2666 }

			any_vassal = {
				limit = { is_nomadic = yes }

				capital_scope = { set_province_flag = contingent_nomadic_territory }
				character_event = { id = Plus.2666 }
			}

			# Fire the event to exchange territories
			character_event = {
				id = Plus.2667
				days = 2
			}
		}
	}
}

character_event = {
	id = Plus.2666

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# This looks for all contiguous provinces in the demesne
		# stemming from either the realm capital or the capital of a vassal clan
		# The flag can pass through a non-demesne province, but only if it is also contiguous
		random_demesne_province = {
			limit = {
				has_province_flag = contingent_nomadic_territory
				owned_by = PREV

				any_neighbor_province = {
					NOT = { has_province_flag = contingent_nomadic_territory }
					owner = { same_realm = ROOT }
				}
			}

			any_neighbor_province = {
				limit = {
					NOT = { has_province_flag = contingent_nomadic_territory }
					owner = { same_realm = ROOT }
				}

				set_province_flag = contingent_nomadic_territory
			}
		}

		random_demesne_province = {
			limit = {
				NOT = { has_province_flag = contingent_nomadic_territory }
				owned_by = PREV

				any_neighbor_province = {
					has_province_flag = contingent_nomadic_territory
					owner = { same_realm = ROOT }
				}
			}

			set_province_flag = contingent_nomadic_territory
		}

		# Refire the event if there are more provinces to flag
		if = {
			limit = {
				any_demesne_province = {
					owned_by = PREV

					trigger_if = {
						limit = { has_province_flag = contingent_nomadic_territory }

						any_neighbor_province = {
							NOT = { has_province_flag = contingent_nomadic_territory }
							owner = { same_realm = ROOT }
						}
					}
					trigger_else = {
						any_neighbor_province = {
							has_province_flag = contingent_nomadic_territory
							owner = { same_realm = ROOT }
						}
					}
				}
			}

			character_event = { id = Plus.2666 }
		}
	}
}

# Mark all provinces which should be given out
character_event = {
	id = Plus.2667

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		any_realm_province = {
			limit = {
				NOT = { has_province_flag = contingent_nomadic_territory }
				held_under_PREV = yes
			}

			set_province_flag = nomad_surrender_province
			ROOT = { set_character_flag = has_provinces_to_surrender }
		}

		character_event = {
			id = Plus.2668
			days = 1
		}
	}
}

# Hand out the provinces
character_event = {
	id = Plus.2668

	is_triggered_only = yes
	hide_window = yes

	has_character_flag = has_provinces_to_surrender
	only_rulers = yes

	trigger = {
		# Must have more than five provinces
		num_of_count_titles_in_realm > 5

		# Has province to give away
		any_realm_province = {
			has_province_flag = nomad_surrender_province
			held_under_PREV = yes

			# Bordering a brother's province that isn't being given away
			any_neighbor_province = {
				NOT = { has_province_flag = nomad_surrender_province }

				owner = {
					OR = {
						same_realm = event_target:nomadic_first_heir
						same_realm = event_target:nomadic_second_heir
						same_realm = event_target:nomadic_third_heir
						same_realm = event_target:nomadic_fourth_heir
					}

					NOT = { same_realm = ROOT }
				}
			}
		}
	}

	immediate = {
		random_realm_province = {
			limit = {
				# Has province to give away
				has_province_flag = nomad_surrender_province
				held_under_PREV = yes

				# Bordering a brother's province that isn't being given away
				any_neighbor_province = {
					NOT = { has_province_flag = nomad_surrender_province }

					owner = {
						OR = {
							same_realm = event_target:nomadic_first_heir
							same_realm = event_target:nomadic_second_heir
							same_realm = event_target:nomadic_third_heir
							same_realm = event_target:nomadic_fourth_heir
						}

						NOT = { same_realm = ROOT }
					}
				}
			}

			clr_province_flag = nomad_surrender_province

			# Usurp the province if it's owned by a nomadic clan (it's not connected to their capital)
			if = {
				limit = { owner = { is_nomadic = yes } }

				county = { save_event_target_as = surrendered_county }

				random_neighbor_province = {
					limit = {
						NOT = { has_province_flag = nomad_surrender_province }

						owner = {
							OR = {
								same_realm = event_target:nomadic_first_heir
								same_realm = event_target:nomadic_second_heir
								same_realm = event_target:nomadic_third_heir
								same_realm = event_target:nomadic_fourth_heir
							}

							NOT = { same_realm = ROOT }
						}
					}

					owner = {
						ROOT = { save_event_target_as = liege_losing }

						top_liege = {
							save_event_target_as = liege_gaining
							usurp_title_plus_barony_if_unlanded = event_target:surrendered_county
							character_event = { id = Plus.2670 } # Notify
						}

						ROOT = { character_event = { id = Plus.2669 } } # Notify
					}
				}
			}

			# Vassalize any provinces owned by non-nomads
			else = {
				owner = { save_event_target_as = surrendered_vassal }

				random_neighbor_province = {
					limit = {
						NOT = { has_province_flag = nomad_surrender_province }

						owner = {
							OR = {
								same_realm = event_target:nomadic_first_heir
								same_realm = event_target:nomadic_second_heir
								same_realm = event_target:nomadic_third_heir
								same_realm = event_target:nomadic_fourth_heir
							}

							NOT = { same_realm = ROOT }
						}
					}

					owner = {
						ROOT = { save_event_target_as = liege_losing }

						top_liege = {
							save_event_target_as = liege_gaining
							set_defacto_vassal = event_target:surrendered_vassal
							event_target:surrendered_vassal = { pf_liege_change_effect = yes }
							character_event = { id = Plus.2672 } # Notify
						}

						ROOT = { character_event = { id = Plus.2671 } } # Notify
					}
				}
			}
		}

		# Refire the event to make sure we haven't dropped below 6 provinces
		repeat_event = { id = Plus.2668 }
	}
}

# Notify ruler that a province has been lost
character_event = {
	id = Plus.2669
	desc = EVTDESC_Plus_2669
	picture = GFX_evt_tribal_lands
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = OK

		tooltip = {
			event_target:liege_gaining = {
				show_scope_change = no

				usurp_title_plus_barony_if_unlanded = event_target:surrendered_county
			}
		}

		hidden_effect = {
			remove_claim = event_target:surrendered_county

			any_realm_lord = {
				remove_claim = event_target:surrendered_county
			}
		}
	}
}

# Notify ruler that a province has been gained
character_event = {
	id = Plus.2670
	desc = EVTDESC_Plus_2670
	picture = GFX_evt_tribal_lands
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = OK

		tooltip = {
			event_target:liege_gaining = {
				show_scope_change = no

				usurp_title_plus_barony_if_unlanded = event_target:surrendered_county
			}
		}
	}
}

# Notify ruler that a vassal has been lost
character_event = {
	id = Plus.2671
	desc = EVTDESC_Plus_2671
	picture = GFX_evt_tribal_lands
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = OK

		tooltip = {
			event_target:surrendered_vassal = {
				show_scope_change = no

				set_defacto_liege = event_target:liege_gaining
				pf_liege_change_effect = yes
			}
		}

		hidden_effect = {
			event_target:surrendered_vassal = {
				any_demesne_title = {
					remove_claim = ROOT
					save_event_target_as = vassal_title

					ROOT = {
						any_realm_lord = {
							remove_claim = event_target:vassal_title
						}
					}
				}

				ROOT = {
					any_demesne_title = { remove_claim = PREVPREV }
					any_realm_lord = { any_demesne_title = { remove_claim = PREVPREVPREV } }
				}
			}
		}
	}
}

# Notify ruler that a vassal has been gained
character_event = {
	id = Plus.2672
	desc = EVTDESC_Plus_2672
	picture = GFX_evt_tribal_lands
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = OK

		tooltip = {
			event_target:surrendered_vassal = {
				show_scope_change = no

				set_defacto_liege = event_target:liege_gaining
				pf_liege_change_effect = yes
			}
		}
	}
}

# Clean up all remaining flags
character_event = {
	id = Plus.2673

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		clr_character_flag = brother_seceded
		clr_character_flag = has_provinces_to_surrender

		any_realm_province = {
			clr_province_flag = contingent_nomadic_territory
			clr_province_flag = nomad_surrender_province
		}
	}
}

### PILLAGE EVENTS

# Clean up pillage flag
character_event = {
	id = Plus.2680

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		FROM = { has_title_flag = nomad_pillage_flag }
	}

	immediate = {
		log = "Cleared nomad pillage flag from [From.GetName]"

		FROM = {
			clr_title_flag = nomad_pillage_flag
			clear_event_target = pillaged_settlement
		}
	}
}