namespace = meltingPot

########################################
# CULTURAL MELTING POT EVENTS
# Sorted by base culture or group
# (influence in parentheses)
########################################

# Seed the culture changes
character_event = {
	id = meltingPot.001
	hide_window = yes

	is_triggered_only = yes # on_yearly_pulse

	only_rulers = yes
	trigger = { owns = event_target:pulse_province }

	immediate = {
		# English
		random_province = {
			limit = {
				culture = anglo_saxon
				holder_scope = {
					NOT = { has_character_flag = melting_tyrant }

					OR = {
						culture_group = gallo_roman
						any_liege = { culture_group = gallo_roman }
					}
				}
				NOR = {
					has_province_flag = english_emerging
					has_province_flag = english_growing
				}
			}
			preferred_limit = { # Start with the top ruler if possible
				holder_scope = {
					independent = yes
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Kings first
				holder_scope = {
					higher_real_tier_than = DUKE
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Then Dukes
				holder_scope = {
					higher_real_tier_than = COUNT
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Then Counts
				holder_scope = {
					higher_real_tier_than = BARON # Otherwise this is basically meaningless
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Then the countryside
				any_neighbor_province = {
					OR = {
						has_province_flag = english_growing
						has_province_flag = english_emerging
						culture = english
					}
				}
			}

			set_province_flag = english_growing
		}

		# Ã†nglisc
		random_province = {
			limit = {
				culture = anglo_saxon
				holder_scope = {
					NOT = { has_character_flag = melting_tyrant }

					OR = {
						culture_group = north_germanic
						any_liege = { culture_group = north_germanic }
					}
				}
				NOR = {
					has_province_flag = aenglisc_emerging
					has_province_flag = aenglisc_growing
				}
			}
			preferred_limit = { # Start with the top ruler if possible
				holder_scope = {
					independent = yes
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Kings first
				holder_scope = {
					higher_real_tier_than = DUKE
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Then Dukes
				holder_scope = {
					higher_real_tier_than = COUNT
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Then Counts
				holder_scope = {
					higher_real_tier_than = BARON # Otherwise this is basically meaningless
					capital_scope = { province = PREVPREV }
				}
			}
			preferred_limit = { # Then the countryside
				any_neighbor_province = {
					OR = {
						has_province_flag = aenglisc_growing
						has_province_flag = aenglisc_emerging
						culture = english_norse
					}
				}
			}

			set_province_flag = aenglisc_growing
		}

		# French
		random_province = {
			limit = {
				culture = gallic
				holder_scope = {
					NOT = { has_character_flag = melting_tyrant }

					OR = {
						culture_group = central_germanic
						any_liege = { culture_group = central_germanic }
					}
				}
				NOR = {
					has_province_flag = french_emerging
					has_province_flag = french_growing
				}
			}

		}
	}
}


### Alemannic
# Swabian (not really a meltingpot but a big enough change to go here)

### Anglo-Saxon
# English (Gallo-Roman)
character_event = { # Track and implement the meltingpot
	id = meltingPot.010
	hide_window = yes

	is_triggered_only = yes # on_yearly_pulse

	only_rulers = yes
	only_independent = yes
	trigger = {
		any_demesne_province = { has_province_flag = english_growing }
	}

	immediate = {
		any_demesne_province = {
			limit = { has_province_flag = english_growing }

			if = { # Make sure it still meets the requirements
				limit = {
					culture = anglo_saxon
					holder_scope = {
						NOR = {
							top_liege = { has_law = culture_conversion_2 }
							has_character_flag = melting_tyrant
						}
						OR = {
							culture_group = gallo_roman
							any_liege = { culture_group = gallo_roman }
							culture = english
							any_liege = { culture = english }
						}
					}
				}

				if = { # Count achieved, prime for meltingpot event
					limit = {
						check_variable = {
							which = english_meltingpot
							value >= 50
						}
					}

					clr_province_flag = english_growing
					set_province_flag = english_emerging # To fire via on_action to prevent multiple events for the same ruler
				}
				else_if = { # Increment
					limit = {
						check_variable = {
							which = english_meltingpot
							value >= 0
						}
					}

					if = { # Fastest if everyone helps
						limit = {
							holder_scope = {
								spouse = {
									OR = {
										culture = anglo_saxon # More incentive
										culture = english
									}
								}
								trigger_if = {
									limit = { independent = no }

									any_liege = {
										OR = {
											culture_group = gallo_roman
											culture = english
										}
									}
								}
							}
						}

						change_variable = {
							which = english_meltingpot
							value = 2
						}
					}
					else_if = { # Still ok with only a little help
						limit = {
							holder_scope = {
								trigger_if = {
									limit = { independent = no }

									OR = {
										spouse = {
											OR = {
												culture = anglo_saxon # More incentive
												culture = english
											}
										}
										any_liege = {
											OR = {
												culture_group = gallo_roman
												culture = english
											}
										}
									}
								}
								trigger_else = {
									always = yes # for readability
								}
							}
						}

						change_variable = {
							which = english_meltingpot
							value = 1.5
						}
					}
					else = { # Going alone is hard
						change_variable = {
							which = english_meltingpot
							value = 1
						}
					}
				}
				else = { # initial setup and error trap
					set_variable = {
						which = english_meltingpot
						value = 0
					}
				}
			}
			else = { # Cleanup if it doesn't meet the requirements
				if = { # de-increment melting pot variable
					limit = {
						check_variable = {
							which = english_meltingpot
							value >= 1
						}
					}
					subtract_variable = {
						which = english_meltingpot
						value = 1
					}
				}
				else = { # Remove flag if the variable would be negative
					clr_province_flag = english_growing
				}
			}
		}
	}
}
narrative_event = { # Ruler responds to new growing culture
	id = meltingPot.011
	desc = EVTDESC_Plus_670 # EVTDESC_MeltingPot_010 (currently using old melting pot localization because it works, noting the replacement name for future ref)
	picture = GFX_evt_throne_room

	is_triggered_only = yes # on_yearly_pulse

	only_rulers = yes
	min_age = 16
	only_capable = yes
	prisoner = no

	weight_multiplier = {
		years = 41

		# These shouldn't happen but...just in case
		mult_modifier = {
			factor = 0.5

			any_demesne_province = {
				had_province_flag = {
					flag = english_emerging
					years >= 50
				}
			}
		}
		mult_modifier = {
			factor = 0.5

			any_demesne_province = {
				had_province_flag = {
					flag = english_emerging
					years >= 100
				}
			}
		}

		meltingpot_multiplier = yes
	}

	trigger = {
		NOR = {
			top_liege = { has_law = culture_conversion_2 } # We already know their answer and/or their leige wouldn't allow it
			has_character_flag = no_meltingpot_self
			has_character_flag = melting_tyrant
		}
		culture_group = gallo_roman
		any_demesne_province = { has_province_flag = english_emerging }
	}

	immediate = { # Culture has already changed, ruler's actions will determine where it goes from here
		any_demesne_province = {
			limit = { has_province_flag = english_emerging }

			culture = english
			clr_province_flag = english_emerging
		}
	}

	option = { # Convert
		name = EVTOPTA55002 # EVTOPTA_meltingPot_010 (currently using old melting pot localization because it works, noting the replacement name for future ref)

		culture = english

		# Convert loyal family and courtiers
		any_courtier = {
			limit = {
				prisoner = no # Prisoners tend not to be involved in palace politics
				is_ruler = no # They should get their own events (blackjack and hookers optional)
				OR = {
					culture_group = gallo_roman
					culture = anglo_saxon
				}

				reverse_opinion = {
					who = ROOT
					value >= 10 # 25 was too restrictive
				}
			}

			culture = english
		}
	}
	option = { # Don't convert, allow meltingpot to continue
		name = EVTOPTB_Plus_630 #EVTOPTB_meltingPot_010

		set_character_flag = no_meltingpot_self

		ai_chance = { factor = 0 } # Mirror old event, TODO: add more nuance
	}
	option = { # Don't convert, disallow meltingpot to continue
		name = "Why would I allow such barbarism?" # EVTOPTC_meltingPot_010 (TODO: Actually localize this instead of the ad-hoc solution)

		set_character_flag = melting_tyrant
		# increase revolt risk, increase cultural conversion chance

		if = { # Enforce it and add consequences
			limit = { is_law_potential = culture_conversion_0 } # the same potential is used for all three culture conversion laws

			primary_title = { add_law = culture_conversion_2 }
		}
		else = {
			# add_character_modifier = forced_culture # Gives the same negative modifier as culture_conversion_0 law for the lifetime of the ruler
		}

		ai_chance = { factor = 0 } # Mirror old event, TODO: add more nuance
	}
}
character_event = { # New culture expands
	id = meltingPot.012
	hide_window = yes

	is_triggered_only = yes # on_yearly_pulse

	only_rulers = yes

	weight_multiplier = { days = 1 }

	trigger = {
		OR = {
			culture = english
			has_character_flag = no_meltingpot_self
		}
		any_demesne_province = { has_province_flag = english_emerging }
	}

	immediate = {
		any_demesne_province = {
			limit = { has_province_flag = english_emerging }

			culture = english
			clr_province_flag = english_emerging
		}
	}
}

# Ã†nglisc (North Germanic)
character_event = { # Track and implement the meltingpot
	id = meltinPot.020
	hide_window = yes

	is_triggered_only = yes # on_yearly_pulse

	only_rulers = yes
	only_independent = yes
	trigger = {
		any_demesne_province = { has_province_flag = aenglisc_growing }
	}

	immediate = {
		any_demesne_province = { # Actually do the meltingpot
			limit = { has_province_flag = aenglisc_growing }

			if = { # Make sure it still meets the requirements
				limit = {
					culture = anglo_saxon
					holder_scope = {
						NOR = {
							top_liege = { has_law = culture_conversion_2 }
							has_character_flag = melting_tyrant
						}
						OR = {
							culture_group = north_germanic
							any_liege = { culture_group = north_germanic }
							culture = english_norse
							any_liege = { culture = english }
						}
					}
				}

				if = { # Count achieved, prime for meltingpot event
					limit = {
						check_variable = {
							which = aenglisc_meltingpot
							value >= 100
						}
					}

					clr_province_flag = aenglisc_growing
					set_province_flag = aenglisc_emerging # To fire via on_action to prevent multiple events for the same ruler
				}
				else_if = { # Increment
					limit = {
						check_variable = {
							which = aenglisc_meltingpot
							value >= 0
						}
					}

					if = { # Fastest if everyone helps
						limit = {
							holder_scope = {
								spouse = {
									OR = {
										culture = north_germanic
										culture = english_norse
									}
								}
								trigger_if = {
									limit = { independent = no }
									any_liege = {
										OR = {
											culture_group = north_germanic
											culture = english_norse
										}
									}
								}
							}
						}

						change_variable = {
							which = aenglisc_meltingpot
							value = 2
						}
					}
					else_if = { # Still ok with only a little help
						limit = {
							holder_scope = {
								trigger_if = {
									limit = { independent = no }

									OR = {
										spouse = {
											OR = {
												culture = north_germanic
												culture = english_norse
											}
										}
										any_liege = {
											OR = {
												culture_group = north_germanic
												culture = english_norse
											}
										}
									}
								}
								trigger_else = {
									always = yes # for readability
								}
							}
						}

						change_variable = {
							which = aenglisc_meltingpot
							value = 1.5
						}
					}
					else = { # Going alone is hard
						change_variable = {
							which = aenglisc_meltingpot
							value = 1
						}
					}
				}
				else = { # initial setup and error trap
					set_variable = {
						which = aenglisc_meltingpot
						value = 0
					}
				}
			}
			else = { # Cleanup if it doesn't meet the requirements
				if = { # de-increment melting pot variable
					limit = {
						check_variable = {
							which = aenglisc_meltingpot
							value >= 1
						}
					}
					subtract_variable = {
						which = aenglisc_meltingpot
						value = 1
					}
				}
				else = { # Remove flag if the variable would be negative
					clr_province_flag = aenglisc_growing
				}
			}
		}
	}
}
narrative_event = { # Ruler responds to new growing culture
	id = meltingPot.021
	desc = EVTDESC_Plus_670 # EVTDESC_MeltingPot_010 (currently using old melting pot localization because it works, noting the replacement name for future ref)
	picture = GFX_evt_throne_room

	is_triggered_only = yes # on_yearly_pulse

	only_rulers = yes
	min_age = 16
	only_capable = yes
	prisoner = no

	weight_multiplier = {
		years = 41

		# These shouldn't happen but...just in case
		mult_modifier = {
			factor = 0.5

			any_demesne_province = {
				had_province_flag = {
					flag = aenglisc_emerging
					years >= 50
				}
			}
		}
		mult_modifier = {
			factor = 0.5

			any_demesne_province = {
				had_province_flag = {
					flag = aenglisc_emerging
					years >= 100
				}
			}
		}

		meltingpot_multiplier = yes
	}

	trigger = {
		NOR = {
			top_liege = { has_law = culture_conversion_2 } # We already know their answer and their leige wouldn't allow it
			has_character_flag = no_meltingpot_self
			has_character_flag = melting_tyrant
		}
		culture_group = north_germanic
		any_demesne_province = { has_province_flag = aenglisc_emerging }
	}

	immediate = { # Culture has already changed, ruler's actions will determine where it goes from here
		any_demesne_province = {
			limit = { has_province_flag = aenglisc_emerging }

			culture = english
			clr_province_flag = aenglisc_emerging
		}
	}

	option = { # Convert
		name = EVTOPTA55002 # EVTOPTA_meltingPot_010 (currently using old melting pot localization because it works, noting the replacement name for future ref)

		culture = english_norse

		# Convert loyal family and courtiers
		any_courtier = {
			limit = {
				prisoner = no # Prisoners tend not to be involved in palace politics
				is_ruler = no # They should get their own events (blackjack and hookers optional)
				OR = {
					culture_group = north_germanic
					culture = anglo_saxon
				}

				reverse_opinion = {
					who = ROOT
					value >= 25
				}
			}

			culture = english_norse
		}
	}
	option = { # Don't convert, allow meltingpot to continue
		name = EVTOPTB_Plus_630 #EVTOPTB_meltingPot_010

		set_character_flag = no_meltingpot_self

		ai_chance = { factor = 0 } # Mirror old event, TODO: add more nuance
	}
	option = { # Don't convert, disallow meltingpot to continue
		name = "Why would I allow such barbarism?" # EVTOPTC_meltingPot_010 (TODO: Actually localize this instead of the ad-hoc solution)

		set_character_flag = melting_tyrant
		# increase revolt risk, increase cultural conversion chance

		if = { # Enforce it and add consequences
			limit = { is_law_potential = culture_conversion_0 } # the same potential is used for all three culture conversion laws

			primary_title = { add_law = culture_conversion_2 }
		}
		else = {
			# add_character_modifier = forced_culture # Gives the same negative modifier as culture_conversion_0 law for the lifetime of the ruler
		}

		ai_chance = { factor = 0 } # Mirror old event, TODO: add more nuance
	}
}
character_event = { # New culture expands
	id = meltingPot.22
	hide_window = yes

	is_triggered_only = yes # on_yearly_pulse

	only_rulers = yes

	trigger = {
		any_demesne_province = { has_province_flag = aenglisc_emerging }

		OR = {
			culture = english_norse
			has_character_flag = no_meltingpot_self
		}
	}

	weight_multiplier = { days = 1 }

	immediate = {
		any_demesne_province = {
			limit = { has_province_flag = aenglisc_emerging }

			culture = english_norse
			clr_province_flag = aenglisc_emerging
		}
	}
}

### Byzantine
# Greco-Persian (Persian) # Needs a name

### Celtic
# Gallawa (North Germanic)

### Central Germanic
# Austrian (Central Germanic)
# Unsure what to do for conditions here. Perhaps mixing of two Central Germanic cultures and starting in Austria?

# German (Central Germanic)
# Imperial German merger

# Swiss (???)

### East Slavic
# Russian (East Slavic)

### Frankish
# Not really meltingpots but the events to make them fit best here
# Dutch

# Franconian

### Gallic
# French (Central Germanic)

### Gallo-Roman
# Norman (North Germanic)

### Israelite
# Israeli (Israelite)

### Italian Group
# Arabic Sicilian (Arabic) # Needs Name

# Greek Sicilian (Byzantine) # Needs Name

# Dalmatian (???)

# Pictish
# Scottish (Irish)

### Prussian
# Teutonic (Central Germanic)

### South Slavic
# Carantanian (Central Germanic)

# Yugoslavian (South Slavic)

### MISC
# Outremer (Crusader Cultures)
