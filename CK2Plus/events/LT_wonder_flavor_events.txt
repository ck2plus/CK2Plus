###########################################
#										  #
# Wonder Flavor Events					  #
#										  #
# ID LT.20000-							  #
#										  #
###########################################

# Written by Pedro Santos

namespace = LT

# Events related to the Grand Library

# Hidden event fired randomly on_yearly_pulse, defines book type, author, author's nationality and city where the book must be searched.

character_event = {
	id = LT.20001

	hide_window = yes
	is_triggered_only = yes # on_yearly_pulse, random_events

	only_independent = yes

	trigger = {
		any_realm_wonder_upgrade = {
			is_active = yes

			OR = {
				has_wonder_upgrade_flag = poetry_and_drama
				has_wonder_upgrade_flag = architecture
				has_wonder_upgrade_flag = history_flag
				has_wonder_upgrade_flag = natural_sciences
				has_wonder_upgrade_flag = math_and_philosophy
			}
		}

		NOR = {
			has_character_flag = not_interested_in_books
			has_character_flag = looking_for_a_book
		}
	}

	immediate = {
		set_character_flag = looking_for_a_book

		random_realm_wonder_upgrade = {
			limit = {
				is_active = yes

				OR = {
					has_wonder_upgrade_flag = poetry_and_drama
					has_wonder_upgrade_flag = architecture
					has_wonder_upgrade_flag = history_flag
					has_wonder_upgrade_flag = natural_sciences
					has_wonder_upgrade_flag = math_and_philosophy
				}
			}

			wonder = {
				save_event_target_as = wonder
				location = { save_event_target_as = wonder_province }
			}
		}

		random_list = {
			10 = {
				trigger = {
					any_realm_wonder_upgrade = {
						is_active = yes
						has_wonder_upgrade_flag = poetry_and_drama
					}
				}

				random_list = {
					50 = {
						set_character_flag = book_theme_Drama

						random_list = {
							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Euripedes
										any_artifact = { has_artifact_flag = book_author_Euripedes }
									}
								}

								set_character_flag = book_author_Euripedes
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Sophocles
										any_artifact = { has_artifact_flag = book_author_Sophocles }
									}
								}

								set_character_flag = book_author_Sophocles
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Aristophanes
										any_artifact = { has_artifact_flag = book_author_Aristophanes }
									}
								}

								set_character_flag = book_author_Aristophanes
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Philemon
										any_artifact = { has_artifact_flag = book_author_Philemon }
									}
								}

								set_character_flag = book_author_Philemon
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Aeschylus
										any_artifact = { has_artifact_flag = book_author_Aeschylus }
									}
								}

								set_character_flag = book_author_Aeschylus
								set_character_flag = book_author_nationality_Greek
							}
						}
					}

					50 = {
						set_character_flag = book_theme_Poetry

						random_list = {
							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Archilochus
										any_artifact = { has_artifact_flag = book_author_Archilochus }
									}
								}

								set_character_flag = book_author_Archilochus
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Alcman_of_Sparta
										any_artifact = { has_artifact_flag = book_author_Alcman_of_Sparta }
									}
								}

								set_character_flag = book_author_Alcman_of_Sparta
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Theocritus
										any_artifact = { has_artifact_flag = book_author_Theocritus }
									}
								}

								set_character_flag = book_author_Theocritus
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Sappho
										any_artifact = { has_artifact_flag = book_author_Sappho }
									}
								}

								set_character_flag = book_author_Sappho
								set_character_flag = book_author_nationality_Greek
							}

							20 = {
								trigger = {
									NOR = {
										has_character_flag = book_author_Asclepiades_of_Samos
										any_artifact = { has_artifact_flag = book_author_Asclepiades_of_Samos }
									}
								}

								set_character_flag = book_author_Asclepiades_of_Samos
								set_character_flag = book_author_nationality_Greek
							}
						}
					}
				}
			}

			10 = {
				trigger = {
					any_realm_wonder_upgrade = {
						is_active = yes
						has_wonder_upgrade_flag = architecture
					}
				}

				set_character_flag = book_theme_Architecture

				random_list = {
					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Hermodorus_of_Salamis
								any_artifact = { has_artifact_flag = book_author_Hermodorus_of_Salamis }
							}
						}

						set_character_flag = book_author_Hermodorus_of_Salamis
						set_character_flag = book_author_nationality_Greek
					}

					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Vitruvius
								any_artifact = { has_artifact_flag = book_author_Vitruvius }
							}
						}

						set_character_flag = book_author_Vitruvius
						set_character_flag = book_author_nationality_Roman
					}

					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Rabirius
								any_artifact = { has_artifact_flag = book_author_Rabirius }
							}
						}

						set_character_flag = book_author_Rabirius
						set_character_flag = book_author_nationality_Roman
					}

					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Cocceius_Auctus
								any_artifact = { has_artifact_flag = book_author_Cocceius_Auctus }
							}
						}

						set_character_flag = book_author_Cocceius_Auctus
						set_character_flag = book_author_nationality_Roman
					}
				}
			}

			10 = {
				trigger = {
					any_realm_wonder_upgrade = {
						is_active = yes
						has_wonder_upgrade_flag = math_and_philosophy
					}
				}

				set_character_flag = book_theme_Philosophy

				random_list = {
					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Plato
								any_artifact = { has_artifact_flag = book_author_Plato }
							}
						}

						set_character_flag = book_author_Plato
						set_character_flag = book_author_nationality_Greek
					}

					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Aristotle
								any_artifact = { has_artifact_flag = book_author_Aristotle }
							}
						}

						set_character_flag = book_author_Aristotle
						set_character_flag = book_author_nationality_Greek
					}

					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Pythagoras
								any_artifact = { has_artifact_flag = book_author_Pythagoras }
							}
						}

						set_character_flag = book_author_Pythagoras
						set_character_flag = book_author_nationality_Greek
					}

					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Thales_of_Mileto
								any_artifact = { has_artifact_flag = book_author_Thales_of_Mileto }
							}
						}

						set_character_flag = book_author_Thales_of_Mileto
						set_character_flag = book_author_nationality_Greek
					}

					20 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Zeno_of_Elea
								any_artifact = { has_artifact_flag = book_author_Zeno_of_Elea }
							}
						}

						set_character_flag = book_author_Zeno_of_Elea
						set_character_flag = book_author_nationality_Greek
					}
				}
			}

			10 = {
				trigger = {
					any_realm_wonder_upgrade = {
						is_active = yes
						has_wonder_upgrade_flag = history_flag
					}
				}

				set_character_flag = book_theme_History

				random_list = {
					25 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Herodotus
								any_artifact = { has_artifact_flag = book_author_Herodotus }
							}
						}

						set_character_flag = book_author_Herodotus
						set_character_flag = book_author_nationality_Greek
					}

					25 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Thucydides
								any_artifact = { has_artifact_flag = book_author_Thucydides }
							}
						}

						set_character_flag = book_author_Thucydides
						set_character_flag = book_author_nationality_Greek
					}

					25 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Polybius
								any_artifact = { has_artifact_flag = book_author_Polybius }
							}
						}

						set_character_flag = book_author_Polybius
						set_character_flag = book_author_nationality_Greek
					}

					25 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Strabo
								any_artifact = { has_artifact_flag = book_author_Strabo }
							}
						}

						set_character_flag = book_author_Strabo
						set_character_flag = book_author_nationality_Greek
					}
				}
			}

			10 = {
				trigger = {
					any_realm_wonder_upgrade = {
						is_active = yes
						has_wonder_upgrade_flag = natural_sciences
					}
				}

				random_list = {
					10 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Hypatia_of_Alexandria
								any_artifact = { has_artifact_flag = book_author_Hypatia_of_Alexandria }
							}
						}

						set_character_flag = book_author_Hypatia_of_Alexandria
						set_character_flag = book_author_nationality_Greek
						set_character_flag = book_theme_Astronomy
					}

					10 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Ptolemy
								any_artifact = { has_artifact_flag = book_author_Ptolemy }
							}
						}

						set_character_flag = book_author_Ptolemy
						set_character_flag = book_author_nationality_Roman
						set_character_flag = book_theme_Astronomy
					}

					10 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Aristarchus_of_Samos
								any_artifact = { has_artifact_flag = book_author_Aristarchus_of_Samos }
							}
						}

						set_character_flag = book_author_Aristarchus_of_Samos
						set_character_flag = book_author_nationality_Greek
						set_character_flag = book_theme_Astronomy
					}

					30 = {
						trigger = {
							NOR = {
								has_character_flag = book_author_Hippocrates_of_Kos
								any_artifact = { has_artifact_flag = book_author_Hippocrates_of_Kos }
							}
						}

						set_character_flag = book_author_Hippocrates_of_Kos
						set_character_flag = book_author_nationality_Greek
						set_character_flag = book_theme_Medicine
					}
				}
			}

			1 = { # it should almost never happen, unless the player has all books or found all books of a specific type.
				set_character_flag = book_author_Virgil
				set_character_flag = book_author_nationality_Roman
				set_character_flag = book_theme_Poetry
			}
		}

		random_independent_ruler = {
			limit = {
				religion_group = muslim
				is_landed = yes
				NOT = { character = ROOT }
			}

			preferred_limit = {
				any_realm_province = {
					held_under_PREV = yes

					distance = {
						who = ROOT
						value > 500
					}
				}
			}

			random_realm_province = {
				preferred_limit = {
					held_under_PREV = yes

					distance = {
						who = ROOT
						value > 500
					}
				}

				save_event_target_as = book_province
			}
		}

		if = {
			limit = {
				NOT = { event_target:book_province = { always = yes } }
			}

			802 = { save_event_target_as = book_province } # Alexandria
		}

		# Fire the news event
		character_event = {
			id = LT.20010
			days = 2
			random = 1
		}
	}
}


# The Character first learns of the rumor about the lost book
character_event = {
	id = LT.20010
	title = evt_TITLE_LT_20010
	desc = EVTDESC_LT_20010.1
	desc = EVTDESC_LT_20010.2
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	war = no

	trigger = {
		is_inaccessible_trigger = no
	}

	fail_trigger_effect = {
		repeat_event = {
			id = LT.20010
			years = 1
			random = 50
		}
	}

	immediate = {
		event_target:book_province = {
			owner = {
				# save_event_target_as = book_province_owner

				create_character = {
					female = no
					religion = THIS
					culture = THIS
					dynasty = none
					age = 43
					health = 6
					random_traits = yes
					add_trait = scholarly_theologian

					attributes = {
						learning = 12
					}
				}

				realm = { save_event_target_as = book_province_realm }
			}
		}

		random_courtier = {
			limit = {
				ai = yes
				is_ruler = no
				prisoner = no
				age > 20
			}

			preferred_limit = {
				has_job_title = no
				trait = scholar
			}
			preferred_limit = {
				has_job_title = no

				OR = {
					is_smart_trigger = yes
					learning > 10
				}
			}
			preferred_limit = {
				has_job_title = no
				is_dumb_trigger = no
			}
			preferred_limit = {
				trait = scholar
			}
			preferred_limit = {
				OR = {
					is_smart_trigger = yes
					learning > 10
				}
			}
			preferred_limit = {
				is_dumb_trigger = no
			}

			save_event_target_as = possible_emissary1
		}

		random_courtier = {
			limit = {
				ai = yes
				is_ruler = no
				prisoner = no
				age > 20
				NOT = { character = event_target:possible_emissary1 }
			}

			preferred_limit = {
				has_job_title = no
				trait = scholar
			}
			preferred_limit = {
				has_job_title = no

				OR = {
					is_smart_trigger = yes
					learning > 10
				}
			}
			preferred_limit = {
				has_job_title = no
				is_dumb_trigger = no
			}
			preferred_limit = {
				trait = scholar
			}
			preferred_limit = {
				OR = {
					is_smart_trigger = yes
					learning > 10
				}
			}
			preferred_limit = {
				is_dumb_trigger = no
			}

			save_event_target_as = possible_emissary2
		}
	}

	option = {
		name = EVTOPTA_LT_20010

		wealth = -30

		custom_tooltip = { text = EVTOPTA_LT_20010_TT }

		event_target:possible_emissary1 = {
			show_scope_change = no

			save_event_target_as = emissary
			add_trait = travelling # On a Journey
		}

		hidden_effect = {
			# event_target:emissary = {
				# move_character = event_target:book_province_holder
			# }
			random_list = {
				33 = { # The Book is found
					mult_modifier = {
						factor = 2
						event_target:emissary = { trait = diligent }
					}
					mult_modifier = {
						factor = 2
						event_target:emissary = { trait = scholar }
					}

					# ?? How to make time depend on distance?
					character_event = {
						id = LT.20040
						days = 100
						random = 50
					}
				}

				33 = { # emissary needs more money
					mult_modifier = {
						factor = 5
						trait = deceitful

						opinion = {
							who = ROOT
							value < 20
						}
					}

					letter_event = {
						id = LT.20030
						days = 100
						random = 50
					}
				}

				33 = { # It was just a rumor
					character_event = {
						id = LT.20020
						days = 100
						random = 50
					}
				}
			}
		}

		ai_chance = {
			factor = 30

			trigger = { wealth >= 50 }
		}
	}

	option = {
		name = EVTOPTB_LT_20010

		wealth = -30

		custom_tooltip = { text = EVTOPTB_LT_20010_TT }

		event_target:possible_emissary2 = {
			show_scope_change = no

			save_event_target_as = emissary
			add_trait = travelling # On a Journey
		}

		hidden_effect = {
			# event_target:emissary = {
				# move_character = event_target:book_province_holder
			# }

			random_list = {
				33 = { # The Book is found
					mult_modifier = {
						factor = 2
						event_target:emissary = { trait = diligent }
					}
					mult_modifier = {
						factor = 2
						event_target:emissary = { trait = scholar }
					}

					character_event = {
						id = LT.20020
						days = 100
						random = 50
					}
				}

				33 = { # emissary needs more money
					mult_modifier = {
						factor = 5
						trait = deceitful
						opinion = {
							who = ROOT
							value < 20
						}
					}

					letter_event = {
						id = LT.20030
						days = 100
						random = 50
					}
				}

				33 = { # It was just a rumor
					character_event = {
						id = LT.20040
						days = 100
						random = 50
					}
				}
			}
		}

		ai_chance = {
			factor = 30

			trigger = { wealth >= 50 }
		}
	}

	option = { # Not a good time
		name = EVTOPTC_LT_20010

		prestige = -20
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_

		ai_chance = { factor = 30 }
	}

	option = {
		name = EVTOPTD_LT_20010

		custom_tooltip = { text = EVTOPTD_LT_20010_TT }

		prestige = -50
		set_character_flag = not_interested_in_books
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_

		ai_chance = {
			factor = 10

			mult_modifier = {
				factor = 5
				learning < 6
			}
		}
	}
}

# Fallback for if the emissary dies
character_event = {
	id = LT.20011
	title = evt_TITLE_LT_20011
	desc = EVTDESC_LT_20011
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	portrait = event_target:emissary

	is_triggered_only = yes
	hide_new = yes

	immediate = {
		export_to_variable = {
			which = local_money_left
			value = stewardship
			who = event_target:emissary
		}
	}

	option = {
		name = EVTOPTA_LT_20011

		wealth = local_money_left
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

# The book does not exist
character_event = {
	id = LT.20020
	title = evt_TITLE_LT_20020
	desc = EVTDESC_LT_20020
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	portrait = event_target:emissary

	is_triggered_only = yes
	hide_new = yes

	trigger = {
		is_inaccessible_trigger = no
		event_target:emissary = { is_alive = yes }
	}

	fail_trigger_effect = {
		if = {
			limit = {
				event_target:emissary = { is_alive = no }
			}

			character_event = { id = LT.20011 days = 3 }
		}
		else = {
			repeat_event = {
				id = LT.20020
				days = 100
				random = 10
			}
		}
	}

	immediate = {
		event_target:emissary = {
			# move_character = ROOT
			remove_trait = travelling
		}

		export_to_variable = {
			which = local_money_left
			value = stewardship
			who = event_target:emissary
		}
	}

	option = {
		name = EVTOPTA_LT_20020

		wealth = local_money_left
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

# The emissary needs more money
letter_event = {
	id = LT.20030
	# title = evt_TITLE_LT_20030
	desc = EVTDESC_LT_20030
	border = GFX_event_letter_frame_intrigue
	portrait = event_target:emissary

	is_triggered_only = yes
	hide_new = yes

	war = no

	trigger = {
		event_target:emissary = { is_alive = yes }
		is_inaccessible_trigger = no
	}

	fail_trigger_effect = {
		if = {
			limit = {
				event_target:emissary = { is_alive = no }
			}

			character_event = { id = LT.20011 days = 3 }
		}
		else = {
			repeat_event = {
				id = LT.20030
				days = 100
				random = 10
			}
		}

	}

	option = { # pay
		name = EVTOPTA_LT_20030

		wealth = -50

		reverse_opinion = {
			name = opinion_grateful
			who = event_target:emissary
		}

		hidden_effect = {
			random_list = {
				60 = { # The Book is found
					# ?? How to make time depend on distance?
					character_event = {
						id = LT.20040
						days = 100
						random = 50
					}
				}

				20 = { # emissary rips off ROOT
					trigger = {
						event_target:emissary = {
							NOT = { trait = honest }
						}

						reverse_opinion = { who = event_target:emissary value < 30 }
					}

					mult_modifier = {
						factor = 10
						reverse_opinion = { who = event_target:emissary value < -10 }
					}
					mult_modifier = {
						factor = 10
						event_target:emissary = { trait = deceitful }
					}

					character_event = {
						id = LT.20035
						days = 50
						random = 20
					}
				}

				20 = { # It was just a rumor
					character_event = {
						id = LT.20020
						days = 100
						random = 50
					}
				}
			}
		}

		ai_chance = {
			factor = 1

			trigger = { wealth >= 50 }
		}
	}

	option = { # give up on search
		name = EVTOPTB_LT_20030

		event_target:emissary = {
			show_scope_change = no

			# move_character = ROOT
			remove_trait = travelling
		}

		prestige = -10
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

# emissary rips off character
character_event = {
	id = LT.20035
	title = evt_TITLE_LT_20035
	desc = EVTDESC_LT_20035
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_intrigue
	portrait = event_target:emissary

	is_triggered_only = yes
	hide_new = yes

	trigger = {
		event_target:emissary = { is_alive = yes }
		is_inaccessible_trigger = no
	}

	fail_trigger_effect = {
		if = {
			limit = {
				event_target:emissary = { is_alive = no }
			}

			character_event = { id = LT.20011 days = 3 }
		}
		else = {
			repeat_event = {
				id = LT.20035
				days = 200
				random = 10
			}
		}
	}

	immediate = {
		event_target:book_province = {
			holder_scope = {
				if = {
					limit = {
						NOT = { same_realm = ROOT }
					}

					save_event_target_as = emissary_current_host
				}
				else = {
					random_independent_ruler = {
						limit = { is_within_diplo_range = ROOT }
						preferred_limit = { is_rival = ROOT }
						save_event_target_as = emissary_current_host
					}
				}

				event_target:emissary = {
					remove_trait = travelling

					opinion = {
						name = opinion_afraid
						who = ROOT
						years = 5
					}

					move_character = event_target:emissary_current_host
				}
			}
		}
	}

	option = {
		name = EVTOPTA_LT_20035
	}

	option = {
		name = EVTOPTB_LT_20035
		tooltip_info = intrigue

		trigger = { intrigue >= 15 }

		wealth = -10
		custom_tooltip = { text = EVTOPTB_LT_20035_TT }

		character_event = {
			id = LT.20036
			days = 50
			random = 10
		}
	}

	after = {
		opinion = {
			name = opinion_traitor
			who = event_target:emissary
			years = 5
		}

		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

# Assassination attempt on the Emissary
character_event = {
	id = LT.20036
	title = evt_TITLE_LT_20036
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_intrigue
	portrait = event_target:emissary

	desc = {
		text = EVTDESC_LT_20036_DEAD
		trigger = { event_target:emissary = { is_alive = no } }
	}
	desc = {
		text = EVTDESC_LT_20036_ALIVE
		trigger = { event_target:emissary = { is_alive = yes } }
	}

	is_triggered_only = yes
	hide_new = yes

	trigger = {
		is_inaccessible_trigger = no
	}

	fail_trigger_effect = {
		repeat_event = {
			id = LT.20035
			days = 20
			random = 2
		}
	}

	immediate = {
		event_target:emissary = {
			if = {
				limit = { is_alive = yes }

				random_list = {
					70 = {
						mult_modifier = {
							factor = 2
							ROOT = { intrigue >= 25 }
						}

						death = {
							death_reason = death_murder_unknown
							killer = ROOT
						}
					}

					30 = {
						save_event_target_as = target_victim

						ROOT = {
							character_event = { id = 11 } # Consequences of discovery
							set_character_flag = failed_assassination_attempt
						}
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTA_LT_20036

		trigger = {
			NOT = { has_character_flag = failed_assassination_attempt }
		}
	}

	option = {
		name = EVTOPTB_LT_20036

		trigger = { has_character_flag = failed_assassination_attempt }

		clr_character_flag = failed_assassination_attempt
	}
}


# book found!
character_event = {
	id = LT.20040
	title = evt_TITLE_LT_20040
	desc = EVTDESC_LT_20040
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	portrait = event_target:emissary

	is_triggered_only = yes
	hide_new = yes

	war = no

	trigger = {
		event_target:emissary = { is_alive = yes }
		is_inaccessible_trigger = no
	}

	fail_trigger_effect = {
		if = {
			limit = {
				event_target:emissary = { is_alive = no }
			}

			character_event = { id = LT.20011 days = 3 }
		}
		else = {
			repeat_event = {
				id = LT.20040
				days = 200
				random = 10
			}
		}
	}

	immediate = {
		hidden_effect = {
			event_target:emissary = {
				remove_trait = travelling
				# move_character = ROOT
			}

			trigger_switch = {
				on_trigger = has_character_flag

				book_theme_Drama = {        add_artifact = antiquity_book_play }
				book_theme_Poetry = {       add_artifact = antiquity_book_poetry }
				book_theme_Architecture = { add_artifact = antiquity_book_architecture }
				book_theme_Philosophy = {   add_artifact = antiquity_book_philosophy }
				book_theme_History = {      add_artifact = antiquity_book_history }
				book_theme_Astronomy = {    add_artifact = antiquity_book_astronomy }
				book_theme_Medicine = {     add_artifact = antiquity_book_medicine }
			}
			new_artifact = {
				set_description = lost_masterpiece_book_desc
				set_creation_date = 1.1.1
				save_event_target_as = the_book

				random = {
					chance = 50
					set_artifact_flag = fake_antique_book
				}
			}
			trigger_switch = { # copying a flag between scopes; there should be a better way to do this...
				on_trigger = has_character_flag

				book_author_Euripedes = {             event_target:the_book = { set_artifact_flag = book_author_Euripedes } }
				book_author_Sophocles = {             event_target:the_book = { set_artifact_flag = book_author_Sophocles } }
				book_author_Aristophanes = {          event_target:the_book = { set_artifact_flag = book_author_Aristophanes } }
				book_author_Philemon = {              event_target:the_book = { set_artifact_flag = book_author_Philemon } }
				book_author_Aeschylus = {             event_target:the_book = { set_artifact_flag = book_author_Aeschylus } }
				book_author_Archilochus = {           event_target:the_book = { set_artifact_flag = book_author_Archilochus } }
				book_author_Alcman_of_Sparta = {      event_target:the_book = { set_artifact_flag = book_author_Alcman_of_Sparta } }
				book_author_Theocritus = {            event_target:the_book = { set_artifact_flag = book_author_Theocritus } }
				book_author_Sappho = {                event_target:the_book = { set_artifact_flag = book_author_Sappho } }
				book_author_Asclepiades_of_Samos = {  event_target:the_book = { set_artifact_flag = book_author_Asclepiades_of_Samos } }
				book_author_Hermodorus_of_Salamis = { event_target:the_book = { set_artifact_flag = book_author_Hermodorus_of_Salamis } }
				book_author_Vitruvius = {             event_target:the_book = { set_artifact_flag = book_author_Vitruvius } }
				book_author_Rabirius = {              event_target:the_book = { set_artifact_flag = book_author_Rabirius } }
				book_author_Cocceius_Auctus = {       event_target:the_book = { set_artifact_flag = book_author_Cocceius_Auctus } }
				book_author_Plato = {                 event_target:the_book = { set_artifact_flag = book_author_Plato } }
				book_author_Aristotle = {             event_target:the_book = { set_artifact_flag = book_author_Aristotle } }
				book_author_Pythagoras = {            event_target:the_book = { set_artifact_flag = book_author_Pythagoras } }
				book_author_Thales_of_Mileto = {      event_target:the_book = { set_artifact_flag = book_author_Thales_of_Mileto } }
				book_author_Zeno_of_Elea = {          event_target:the_book = { set_artifact_flag = book_author_Zeno_of_Elea } }
				book_author_Herodotus = {             event_target:the_book = { set_artifact_flag = book_author_Herodotus } }
				book_author_Thucydides = {            event_target:the_book = { set_artifact_flag = book_author_Thucydides } }
				book_author_Polybius = {              event_target:the_book = { set_artifact_flag = book_author_Polybius } }
				book_author_Strabo = {                event_target:the_book = { set_artifact_flag = book_author_Strabo } }
				book_author_Hypatia_of_Alexandria = { event_target:the_book = { set_artifact_flag = book_author_Hypatia_of_Alexandria } }
				book_author_Ptolemy = {               event_target:the_book = { set_artifact_flag = book_author_Ptolemy } }
				book_author_Aristarchus_of_Samos = {  event_target:the_book = { set_artifact_flag = book_author_Aristarchus_of_Samos } }
				book_author_Hippocrates_of_Kos = {    event_target:the_book = { set_artifact_flag = book_author_Hippocrates_of_Kos } }
				book_author_Virgil = {                event_target:the_book = { set_artifact_flag = book_author_Virgil } }
			}
		}
	}

	option = { # read the book
		name = EVTOPTA_LT_20040
		tooltip_info = learning

		trigger = { learning >= 6 }

		custom_tooltip = { text = EVTOPT_LT_20040_TT }

		change_learning = 1

		if = {
			limit = {
				event_target:the_book = {
					has_artifact_flag = fake_antique_book
				}
			}

			character_event = {
				id = LT.20055 # the fake is discovered by the character
				days = 30
				random = 10
			}
		}
		else = {
			clr_character_flag = looking_for_a_book
			clear_flags_with_prefix = book_theme_
			# clear_flags_with_prefix = book_author_
		}

		ai_chance = { factor = 40 }
	}

	option = { # invite the scholars to court
		name = EVTOPTB_LT_20040

		trigger = {
			OR = {
				has_wonder = wonder_house_of_wisdom
				has_wonder = wonder_library
			}
		}

		custom_tooltip = { text = EVTOPT_LT_20040_TT }

		wealth = -100
		prestige = 20

		character_event = {
			id = LT.20060 # The gathering happens
			days = 40
			random = 10
		}

		ai_chance = {
			factor = 40

			trigger = { wealth >= 150 }
		}
	}

	option = { # just store the book
		name = EVTOPTC_LT_20040

		custom_tooltip = { text = EVTOPT_LT_20040_TT }

		prestige = 20

		hidden_effect = {
			if = {
				limit = {
					event_target:the_book = {
						has_artifact_flag = fake_antique_book
					}
				}

				character_event = {
					id = LT.20050 # the fake is discovered by third party scholar
					days = 400
					random = 300
				}
			}
			else = {
				clr_character_flag = looking_for_a_book
				clear_flags_with_prefix = book_theme_
				# clear_flags_with_prefix = book_author_ -> For not repeating real books
			}
		}

		ai_chance = { factor = 20 }
	}

	after = {
		opinion = {
			name = opinion_glad
			who = event_target:emissary
			years = 5
		}
	}
}

# the fake is discovered by third party scholar
character_event = {
	id = LT.20050
	title = evt_TITLE_LT_20050
	desc = EVTDESC_LT_20050
	picture = GFX_evt_scandal
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	war = no

	trigger = {
		is_inaccessible_trigger = no
	}

	fail_trigger_effect = {
		repeat_event = {
			id = LT.20050
			days = 200
			random = 10
		}
	}

	immediate = {
		create_character = {
			religion = ROOT
			culture = ROOT
			dynasty = none
			age = 46
			health = 6
			random_traits = yes
			add_trait = scholar
			add_trait = honest
			add_trait = brave

			attributes = {
				learning = 15
			}
		}

		new_character = {
			save_event_target_as = the_whistleblower
		}

		add_artifact = antiquity_book_fake

		new_artifact = {
			set_description = fake_masterpiece_book_desc
			copy_artifact_history = event_target:the_book
			set_creation_date = 1.1.1
		}

		event_target:the_book = {
			destroy_artifact = yes
		}
	}

	option = { # inprison the whistleblower
		name = EVTOPTA_LT_20050

		reverse_imprison = event_target:the_whistleblower
		prestige = -50
	}

	option = { # reward and hire the whistleblower
		name = EVTOPTB_LT_20050

		wealth = -30

		reverse_opinion = {
			name = opinion_loyal_servant
			who = event_target:the_whistleblower
		}

		ai_chance = {
			factor = 1

			trigger = { wealth >= 50 }
		}
	}

	after = {
		add_character_modifier = {
			name = caught_with_forgery
			years = 1
		}

		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

# the fake is discovered by the character reading the book
character_event = {
	id = LT.20055
	title = evt_TITLE_LT_20055
	desc = EVTDESC_LT_20055
	picture = GFX_evt_open_book_hf
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes
	hide_new = yes

	trigger = {
		is_inaccessible_trigger = no
	}

	fail_trigger_effect = {
		repeat_event = {
			id = LT.20055
			days = 100
			random = 10
		}
	}

	immediate = {
		hidden_effect = {
			add_artifact = antiquity_book_fake

			new_artifact = {
				set_description = fake_masterpiece_book_desc
				copy_artifact_history = event_target:the_book
				set_creation_date = 1.1.1
			}

			event_target:the_book = { destroy_artifact = yes }
		}
	}

	option = { # At least I gained wisdom
		name = EVTOPTA_LT_20055

		prestige = -50
		change_learning = 1

		add_character_modifier = {
			name = caught_with_forgery
			years = 1
		}
	}

	option = { # burn the dammed book
		name = EVTOPTB_LT_20055

		prestige = -30

		new_artifact = {
			destroy_artifact = yes
		}
	}

	after = {
		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
		clear_flags_with_prefix = book_author_
	}
}

# the gathering of experts
character_event = {
	id = LT.20060
	title = evt_TITLE_LT_20060
	picture = GFX_placeholder # GFX_evt_gathering_of_minds
	border = GFX_event_normal_frame_religion

	desc = {
		text = EVTDESC_LT_20060_real_book
		picture = GFX_evt_gathering_of_minds
		trigger = {
			NOT = { event_target:the_book = { has_artifact_flag = fake_antique_book } }
		}
	}
	desc = {
		text = EVTDESC_LT_20060_fake_book
		picture = GFX_evt_scandal
		trigger = {
			event_target:the_book = { has_artifact_flag = fake_antique_book }
		}
	}

	is_triggered_only = yes

	war = no

	trigger = {
		is_inaccessible_trigger = no

		OR = {
			has_wonder = wonder_house_of_wisdom
			has_wonder = wonder_library
		}
	}

	fail_trigger_effect = {
		if = {
			limit = {
				NOR = {
					has_wonder = wonder_house_of_wisdom
					has_wonder = wonder_library
				}
			}

			clr_character_flag = looking_for_a_book
			clear_flags_with_prefix = book_theme_
		}
		else = {
			repeat_event = {
				id = LT.20060
				days = 100
				random = 10
			}
		}
	}

	immediate = {
		random_playable_ruler = {
			limit = {
				any_realm_province = {
					held_under_PREV = yes

					distance = {
						who = ROOT
						value < 500
					}
				}
			}

			random_courtier = {
				limit = {
					ai = yes
					is_ruler = no
					prisoner = no
					age > 20
				}

				preferred_limit = {
					has_job_title = no
					trait = scholar
				}
				preferred_limit = {
					has_job_title = no

					OR = {
						is_smart_trigger = yes
						learning > 10
					}
				}
				preferred_limit = {
					has_job_title = no
					is_dumb_trigger = no
				}
				preferred_limit = {
					trait = scholar
				}
				preferred_limit = {
					OR = {
						is_smart_trigger = yes
						learning > 10
					}
				}
				preferred_limit = {
					is_dumb_trigger = no
				}

				save_event_target_as = great_mind_1
			}
		}

		random_playable_ruler = {
			limit = {
				any_realm_province = {
					held_under_PREV = yes

					distance = {
						who = ROOT
						value < 500
					}
				}
			}

			random_courtier = {
				limit = {
					ai = yes
					is_ruler = no
					prisoner = no
					age > 20
				}
				preferred_limit = {
					has_job_title = no
					trait = scholar
				}
				preferred_limit = {
					has_job_title = no

					OR = {
						is_smart_trigger = yes
						learning > 10
					}
				}
				preferred_limit = {
					has_job_title = no
					is_dumb_trigger = no
				}
				preferred_limit = {
					trait = scholar
				}
				preferred_limit = {
					OR = {
						is_smart_trigger = yes
						learning > 10
					}
				}
				preferred_limit = {
					is_dumb_trigger = no
				}

				save_event_target_as = great_mind_2
			}
		}

		random_playable_ruler = {
			limit = {
				any_realm_province = {
					held_under_PREV = yes

					distance = {
						who = ROOT
						value < 500
					}
				}
			}

			random_courtier = {
				limit = {
					ai = yes
					is_ruler = no
					prisoner = no
					age > 20
				}
				preferred_limit = {
					has_job_title = no
					trait = scholar
				}
				preferred_limit = {
					has_job_title = no

					OR = {
						is_smart_trigger = yes
						learning > 10
					}
				}
				preferred_limit = {
					has_job_title = no
					is_dumb_trigger = no
				}
				preferred_limit = {
					trait = scholar
				}
				preferred_limit = {
					OR = {
						is_smart_trigger = yes
						learning > 10
					}
				}
				preferred_limit = {
					is_dumb_trigger = no
				}

				save_event_target_as = great_mind_3
			}
		}
	}

	option = { # Real Great!
		name = EVTOPTA_LT_20060_real_book

		trigger = {
			NOT = { event_target:the_book = { has_artifact_flag = fake_antique_book } }
		}

		prestige = 50
		economy_techpoints = 50

		add_character_modifier = {
			name = artifact_patron
			years = 2
		}

		chronicle = {
			entry = CHRONICLE_FOUND_REAL_BOOK
		}
	}

	option = { # Great, anyway!
		name = EVTOPTA_LT_20060_fake_book

		trigger = {
			event_target:the_book = { has_artifact_flag = fake_antique_book }
		}

		hidden_effect = {
			add_artifact = antiquity_book_fake

			new_artifact = {
				set_description = fake_masterpiece_book_desc
				copy_artifact_history = event_target:the_book
				set_creation_date = 1.1.1
			}

			event_target:the_book = {
				destroy_artifact = yes
			}
		}

		prestige = 30
		culture_techpoints = 50
		economy_techpoints = 50
		military_techpoints = 50

		clear_flags_with_prefix = book_author_
	}

	after = {
		reverse_opinion = {
			name = opinion_grateful_invitation
			who = event_target:great_mind_1
		}

		reverse_opinion = {
			name = opinion_grateful_invitation
			who = event_target:great_mind_2
		}

		reverse_opinion = {
			name = opinion_grateful_invitation
			who = event_target:great_mind_3
		}

		clr_character_flag = looking_for_a_book
		clear_flags_with_prefix = book_theme_
	}
}


## Tomb is found during wonder construction. Triggered as a random event from on_wonder_construction_start on_action

# To get a delay from the on_action triggered event
character_event = {
	id = LT.20100

	hide_window = yes
	is_triggered_only = yes # on_wonder_construction_start, random_events

	immediate = {
		character_event = {
			id = LT.20101
			days = 1000
			random = 950
		}
	}
}


character_event = {
	id = LT.20101
	title = evt_TITLE_LT_20101
	desc = EVTDESC_LT_20101.1
	desc = EVTDESC_LT_20101.2
	picture = GFX_evt_construction_site
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	trigger = {
		is_inaccessible_trigger = no

		NOR = {
			has_character_flag = not_interested_in_ruins
			has_character_flag = excavating_ruins
		}

		any_realm_wonder = {
			OR = {
				is_building_wonder = yes
				is_building_wonder_upgrade = yes
			}
		}
	}

	immediate = {
		set_character_flag = excavating_ruins

		random_realm_wonder = {
			limit = { is_building_wonder = yes }
			save_event_target_as = wonder_or_upgrade
			save_event_target_as = target_wonder
		}

		if = {
			limit = {
				NOT = { event_target:target_wonder = { always = yes } }
			}

			random_realm_wonder_upgrade = {
				limit = { is_building_wonder_upgrade = yes }
				save_event_target_as = wonder_or_upgrade
				wonder = { save_event_target_as = target_wonder }
			}
		}

		event_target:target_wonder = {
			location = { save_event_target_as = target_province }
		}
	}

	option = { # Yes investigate
		name = EVTOPTA_LT_20101

		custom_tooltip = { text = EVTOPTA_LT_20101_TT }

		scaled_wealth = {
			value = -0.3
			min = -10
			max = -60
		}

		hidden_effect = {
			random_list = {
				10 = { set_character_flag = tomb_found_accident }    # Accident
				20 = { set_character_flag = tomb_found_nothing }     # Found nothing
				30 = { set_character_flag = tomb_found_valuables_1 } # Found valuables
				20 = { set_character_flag = tomb_found_valuables_2 } # Found valuables
				10 = { set_character_flag = tomb_found_artifact }    # Found an important treasure
			}
		}

		character_event = {
			id = LT.20110
			days = 7
			random = 3
		}
	}

	option = { # Yes investigate, expert
		name = EVTOPTD_LT_20101
		tooltip_info_custom = EVTOPTD_LT_20101_TT

		trigger = {
			OR = {
				learning >= 15
				trait = erudite
				trait = architect
			}
		}

		scaled_wealth = {
			value = -0.4
			min = -20
			max = -80
		}

		hidden_effect = {
			random_list = {
				20 = { set_character_flag = tomb_found_nothing }     # Found nothing
				35 = { set_character_flag = tomb_found_valuables_1 } # Found valuables
				25 = { set_character_flag = tomb_found_valuables_2 } # Found valuables
				10 = { set_character_flag = tomb_found_artifact }    # Found an important treasure
			}
		}

		character_event = {
			id = LT.20110
			days = 7
			random = 3
		}
	}

	option = { # Not interested
		name = EVTOPTB_LT_20101

		clr_character_flag = excavating_ruins
	}

	option = { # Don't bother me with this kind of stuff
		name = EVTOPTC_LT_20101

		custom_tooltip = { text = EVTOPTC_LT_20101_TT }

		clr_character_flag = excavating_ruins
		set_character_flag = not_interested_in_ruins
	}
}


character_event = {
	id = LT.20110
	title = evt_TITLE_LT_20101
	picture = GFX_evt_pagan_artifacts
	border = GFX_event_normal_frame_religion

	desc = {
		text = EVTDESC_LT_20110_accident
		picture = GFX_evt_dead_body_hf
		trigger = { has_character_flag = tomb_found_accident }
	}
	desc = {
		text = EVTDESC_LT_20110_found_nothing
		picture = GFX_evt_bad_news
		trigger = { has_character_flag = tomb_found_nothing }
	}
	desc = {
		text = EVTDESC_LT_20110_found_valuables_1
		trigger = { has_character_flag = tomb_found_valuables_1 }
	}
	desc = {
		text = EVTDESC_LT_20110_found_valuables_2
		trigger = { has_character_flag = tomb_found_valuables_2 }
	}
	desc = {
		text = EVTDESC_LT_20110_found_artifact
		picture = GFX_evt_treasure_chamber
		trigger = { has_character_flag = tomb_found_artifact }
	}

	is_triggered_only = yes

	trigger = {
		is_inaccessible_trigger = no

		event_target:target_wonder = {
			wonder_owner = {
				character = ROOT
			}
		}
	}

	fail_trigger_effect = {
		if = { # character lost the wonder
			limit = {
				NOT = {
					event_target:target_wonder = {
						wonder_owner = {
							character = ROOT
						}
					}
				}
			}

			clr_character_flag = excavating_ruins
			clear_flags_with_prefix = tomb_found_
		}
		else = {
			repeat_event = {
				id = LT.20110
				days = 100
				random = 10
			}
		}
	}

	immediate = {
		if = {
			limit = { has_character_flag = tomb_found_artifact }

			random_list = {
				20 = {
					trigger = {
						NOT = { has_artifact = armor_tier_2 }
					}

					add_artifact = armor_tier_2

					new_artifact = {
						set_description = tomb_armor_desc
						set_creation_date = 1.1.1
						save_event_target_as = found_artifact
					}
				}

				20 = {
					trigger = {
						event_target:target_province = { religion_group = christian }
					}

					add_artifact = fingerbone_of_saint

					new_artifact = {
						set_creation_date = 1.1.1
						save_event_target_as = found_artifact
					}
				}

				20 = {
					trigger = {
						NOT = { has_artifact = emerald_scepter }
					}

					add_artifact = emerald_scepter

					new_artifact = {
						set_description = tomb_scepter_desc
						set_creation_date = 1.1.1
						save_event_target_as = found_artifact
					}
				}

				20 = {
					trigger = {
						NOT = { has_artifact = sword_tier_2_new }
					}

					add_artifact = sword_tier_2_new

					new_artifact = {
						set_description = tomb_sword_desc
						set_creation_date = 1.1.1
						save_event_target_as = found_artifact
					}
				}

				1 = {
					clr_character_flag = tomb_found_artifact
					set_character_flag = tomb_found_valuables_2
				}
			}
		}
	}

	option = { # too bad
		name = EVTOPTA_LT_20110

		trigger = {
			OR = {
				has_character_flag = tomb_found_accident
				has_character_flag = tomb_found_nothing
			}
		}

		if = {
			limit = { has_character_flag = tomb_found_accident }

			scaled_wealth = { value = -0.15 min = -20 max = -40 }

			event_target:target_wonder = {
				show_scope_change = no

				location = {
					show_scope_change = no

					add_province_modifier = {
						name = construction_accident
						years = 1
					}
				}
			}
		}
	}

	option = { # compensate the families
		name = EVTOPTF_LT_20110

		trigger = { has_character_flag = tomb_found_accident }

		scaled_wealth = { value = -0.4 min = -40 max = -100 }

		random = {
			chance = 30
			add_trait_charitable_effect = yes
		}

		random = {
			chance = 75
			remove_trait_greedy_effect = yes
		}
	}

	option = { # All to me
		name = EVTOPTB_LT_20110

		trigger = {
			OR = {
				has_character_flag = tomb_found_valuables_1
				has_character_flag = tomb_found_valuables_2
			}
		}

		trigger_switch = {
			on_trigger = has_character_flag

			tomb_found_valuables_1 = {
				wealth = 100

				random = {
					chance = 20
					add_trait_greedy_effect = yes
				}

				random = {
					chance = 50
					remove_trait_charitable_effect = yes
				}
			}

			tomb_found_valuables_2 = {
				wealth = 200

				random = {
					chance = 30
					add_trait_greedy_effect = yes
				}

				random = {
					chance = 75
					remove_trait_charitable_effect = yes
				}
			}
		}
	}
	option = { # share the findings
		name = EVTOPTC_LT_20110

		trigger = {
			OR = {
				has_character_flag = tomb_found_valuables_1
				has_character_flag = tomb_found_valuables_2
			}
		}

		trigger_switch = {
			on_trigger = has_character_flag

			tomb_found_valuables_1 = {
				wealth = 50

				random = {
					chance = 20
					add_trait_charitable_effect = yes
				}

				random = {
					chance = 50
					remove_trait_greedy_effect = yes
				}
			}

			tomb_found_valuables_2 = {
				wealth = 100

				random = {
					chance = 30
					add_trait_charitable_effect = yes
				}

				random = {
					chance = 75
					remove_trait_greedy_effect = yes
				}
			}
		}
	}

	option = { # All to me
		name = EVTOPTD_LT_20110

		trigger = { has_character_flag = tomb_found_artifact }

		custom_tooltip = { text = EVTOPT_LT_20110_TT }

		wealth = 150

		random = {
			chance = 30
			add_trait_greedy_effect = yes
		}

		random = {
			chance = 75
			remove_trait_charitable_effect = yes
		}
	}

	option = { # share the findings
		name = EVTOPTE_LT_20110

		trigger = { has_character_flag = tomb_found_artifact }

		custom_tooltip = { text = EVTOPT_LT_20110_TT }

		random = {
			chance = 30
			add_trait_charitable_effect = yes
		}

		random = {
			chance = 75
			remove_trait_greedy_effect = yes
		}
	}

	after = {
		clr_character_flag = excavating_ruins
		clear_flags_with_prefix = tomb_found_
	}
}


# LT.20201, LT.20209, and LT.20210 moved to mnm_smith_events.txt
## Smith event chain alternative events for Armory upgrade. Event LT.20201 is triggered from a new option EVTOPTC_MNM_9115 in event MNM.9115 from the smith decision event chain, if the character has the "Armory" wonder upgrade.


## Fired from Decision use_scary_upgrade to Try to Intimidate a character

character_event = {
	id = LT.20301
	picture = GFX_evt_torture
	border = GFX_event_normal_frame_intrigue

	desc = {
		text = EVTDESC_LT_20301
		trigger = { event_target:target_character = { is_evil_trigger = no } }
	}
	desc = {
		text = EVTDESC_LT_20301_evil_reaction
		trigger = { event_target:target_character = { is_evil_trigger = yes } }
	}

	is_triggered_only = yes # wonder_decisions.txt

	option = {
		name = EVTOPTA_LT_20301

		random_list = {
			75 = {
				mult_modifier = { factor = 0.5 diplomacy <  2 }
				mult_modifier = { factor = 0.9 diplomacy <  4 }
				mult_modifier = { factor = 0.9 diplomacy <  6 }
				mult_modifier = { factor = 0.9 diplomacy <  8 }
				mult_modifier = { factor = 0.9 diplomacy < 10 }
				mult_modifier = { factor = 1.1 diplomacy > 12 }
				mult_modifier = { factor = 1.1 diplomacy > 14 }
				mult_modifier = { factor = 1.1 diplomacy > 16 }
				mult_modifier = { factor = 1.1 diplomacy > 18 }
				mult_modifier = { factor = 3 event_target:target_character = { trait = craven } }
				mult_modifier = { factor = 0.4 event_target:target_character = { is_evil_trigger = yes } }

				reverse_opinion = {
					name = opinion_scared_into_submission
					who = event_target:target_character
					years = 2
				}
			}
			25 = {
				mult_modifier = { # Makes it even harder to scare someone 2 steps above you
					factor = 3

					trigger_if = {
						limit = {
							event_target:target_character = { real_tier = EMPEROR }
						}
						lower_real_tier_than = KING
					}
					trigger_else = {
						event_target:target_character = { real_tier = KING }
						lower_real_tier_than = DUKE
					}
				}
				mult_modifier = { # Makes it harder to scare someone above you
					factor = 3
					lower_real_tier_than = event_target:target_character
				}
				mult_modifier = {
					factor = 3
					event_target:target_character = { trait = brave }
				}

				custom_tooltip = { text = EVTOPTA_LT_20301_TT }

				if = {
					limit = { event_target:target_character = { is_evil_trigger = yes } }
					character_event = { id = LT.20310 }
				}
				else = {
					reverse_opinion = {
						name = opinion_threatened_me
						who = event_target:target_character
						years = 2
					}

					prestige = -20
				}
			}
		}
	}

	option = { # favor
		name = EVTOPTB_LT_20301

		trigger = {
			has_dlc = "Conclave"
			NOT = { holds_favor_on = event_target:target_character }
		}

		random_list = {
			75 = {
				mult_modifier = { factor = 0.5 diplomacy <  2 }
				mult_modifier = { factor = 0.9 diplomacy <  4 }
				mult_modifier = { factor = 0.9 diplomacy <  6 }
				mult_modifier = { factor = 0.9 diplomacy <  8 }
				mult_modifier = { factor = 0.9 diplomacy < 10 }
				mult_modifier = { factor = 1.1 diplomacy > 12 }
				mult_modifier = { factor = 1.1 diplomacy > 14 }
				mult_modifier = { factor = 1.1 diplomacy > 16 }
				mult_modifier = { factor = 1.1 diplomacy > 18 }
				mult_modifier = { factor = 3 event_target:target_character = { trait = craven } }
				mult_modifier = { factor = 0.4 event_target:target_character = { is_evil_trigger = yes } }

				add_favor = event_target:target_character
			}

			25 = {
				mult_modifier = { # Makes it even harder to threaten someone 2 steps above you
					factor = 3

					trigger_if = {
						limit = {
							event_target:target_character = { real_tier = EMPEROR }
						}
						lower_real_tier_than = KING
					}
					trigger_else = {
						event_target:target_character = { real_tier = KING }
						lower_real_tier_than = DUKE
					}
				}
				mult_modifier = { # Makes it harder to threaten someone above you
					factor = 3
					lower_real_tier_than = event_target:target_character
				}
				mult_modifier = {
					factor = 3
					event_target:target_character = { trait = brave }
				}

				custom_tooltip = { text = EVTOPTB_LT_20301_TT }

				if = {
					limit = { event_target:target_character = { is_evil_trigger = yes } }
					character_event = { id = LT.20310 }
				}
				else = {
					reverse_opinion = {
						name = opinion_threatened_me
						who = event_target:target_character
						years = 2
					}

					prestige = -20
				}
			}
		}
	}

	option = {
		name = EVTOPTC_LT_20301

		trigger = { event_target:target_character = { is_evil_trigger = yes } }

		random_list = {
			20 = {
				mult_modifier = { factor = 1.1 diplomacy > 12 }
				mult_modifier = { factor = 1.1 diplomacy > 14 }
				mult_modifier = { factor = 1.1 diplomacy > 16 }
				mult_modifier = { factor = 1.1 diplomacy > 18 }

				reverse_opinion = {
					name = opinion_thoroughly_impressed
					who = event_target:target_character
					months = 6
				}
			}

			60 = {
				mult_modifier = { factor = 1.1 diplomacy > 12 }
				mult_modifier = { factor = 1.1 diplomacy > 14 }
				mult_modifier = { factor = 1.1 diplomacy > 16 }
				mult_modifier = { factor = 1.1 diplomacy > 18 }

				reverse_opinion = {
					name = opinion_impressed
					who = event_target:target_character
					months = 6
				}
			}

			20 = {
				mult_modifier = { # Makes it even harder to scare someone 2 steps above you
					factor = 3

					trigger_if = {
						limit = {
							event_target:target_character = { real_tier = EMPEROR }
						}
						lower_real_tier_than = KING
					}
					trigger_else = {
						event_target:target_character = { real_tier = KING }
						lower_real_tier_than = DUKE
					}
				}
				mult_modifier = { # Makes it harder to scare someone above you
					factor = 2
					lower_real_tier_than = event_target:target_character
				}

				reverse_opinion = {
					name = opinion_unimpressed
					who = event_target:target_character
					months = 6
				}

				prestige = -10
			}
		}

		hidden_effect = {
			remove_character_modifier = used_scary_upgrade_cd
		}
	}

	option = {
		name = EVTOPTD_LT_20301

		trigger = { event_target:target_character = { is_evil_trigger = no } }

		random_list = {
			75 = {
				mult_modifier = { factor = 0.5 diplomacy <  2 }
				mult_modifier = { factor = 0.9 diplomacy <  4 }
				mult_modifier = { factor = 0.9 diplomacy <  6 }
				# mult_modifier = { factor = 0.9 diplomacy < 8 }
				# mult_modifier = { factor = 0.9 diplomacy < 10 }
				mult_modifier = { factor = 1.1 diplomacy > 12 }
				mult_modifier = { factor = 1.1 diplomacy > 14 }
				mult_modifier = { factor = 1.1 diplomacy > 16 }
				mult_modifier = { factor = 1.1 diplomacy > 18 }

				reverse_opinion = {
					name = opinion_liked_a_good_joke
					who = event_target:target_character
					months = 6
				}
			}

			25 = {
				mult_modifier = { # Makes it even harder to scare someone 2 steps above you
					factor = 3

					trigger_if = {
						limit = {
							event_target:target_character = { real_tier = EMPEROR }
						}
						lower_real_tier_than = KING
					}
					trigger_else = {
						event_target:target_character = { real_tier = KING }
						lower_real_tier_than = DUKE
					}
				}

				reverse_opinion = {
					name = opinion_unimpressed
					who = event_target:target_character
					months = 6
				}
			}
		}

		hidden_effect = {
			remove_character_modifier = used_scary_upgrade_cd
		}
	}
}

# They only laughed at me!
character_event = {
	id = LT.20310
	desc = EVTDESC_LT_20310
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20310

		reverse_opinion = {
			name = opinion_unimpressed
			who = event_target:target_character
			months = 6
		}

		prestige = -10

		random = {
			chance = 50
			add_trait_stressed_effect = yes
		}

	}
}


## Targeted Decision use_secluded_upgrade to use secluded wonder upgrade event chain
## It is implemented as playable from both sides. Up to LT.2043X, odd-numbered events happen to the target, even-numbered events to the decision-making character
character_event = { # invitation
	id = LT.20405
	desc = EVTDESC_LT_20405
	picture = GFX_evt_noble_in_castle
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		event_target:target_wonder = {
			wonder_owner = {
				character = FROMFROM
			}
		}
	}

	option = { # accept
		name = EVTOPTA_LT_20405

		FROMFROM = { character_event = { id = LT.20410 } }

		ai_chance = {
			factor = 2

			mult_modifier = {
				factor = 4
				opinion = { who = FROMFROM value >= 25 }
			}
		}
	}

	option = { # refuse
		name = EVTOPTB_LT_20405

		FROMFROM = { character_event = { id = LT.20412 } }

		ai_chance = {
			factor = 1

			trigger = { diplomacy < 15 }

			mult_modifier = {
				factor = 10
				opinion = { who = FROMFROM value < -25 }
			}
		}
	}

	option = { # politely refuse
		name = EVTOPTC_LT_20405
		tooltip_info = diplomacy

		trigger = { diplomacy >= 15 }

		set_character_flag = polite_refuse
		FROMFROM = { character_event = { id = LT.20412 } }

		ai_chance = {
			factor = 1

			mult_modifier = {
				factor = 10
				opinion = { who = FROMFROM value < -25 }
			}
		}
	}
}


character_event = { # What happens at the meeting
	id = LT.20410
	desc = EVTDESC_LT_20410
	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue
	portrait = event_target:target_character

	is_triggered_only = yes

	option = { # Friendly Chat
		name = EVTOPTA_LT_20410

		FROM = { character_event = { id = LT.20421 days = 1 } }

		tooltip = {
			random_list = {
				20 = { # Nothing
					trigger = {
						FROM = { diplomacy < 15 }
					}

					mult_modifier = {
						factor = 10
						FROM = { diplomacy < 8 }
					}
				}

				60 = {
					opinion = {
						name = opinion_impressed
						who = FROM
						years = 2
					}
				}

				20 = {
					trigger = {
						FROM = { diplomacy >= 8 }
					}

					mult_modifier = {
						factor = 5
						FROM = { diplomacy >= 15 }
					}

					opinion = {
						name = opinion_thoroughly_impressed
						who = FROM
						years = 2
					}
				}
			}
		}
	}

	option = { # Try to seduce
		name = EVTOPTB_LT_20410

		trigger = {
			NOT = { is_lover = FROM }
		}

		show_portrait = FROM

		if = {
			limit = {
				OR = {
					religion_has_incest = yes
					NOT = { is_close_relative = FROM }
					is_married = FROM
				}
			}

			custom_tooltip = { text = EVTOPTB_LT_20410_TT }
		}
		else = {
			custom_tooltip = { text = EVTOPTB_LT_20410_TT_unlikely }
		}

		FROM = { character_event = { id = LT.20431 days = 1 } }

		# CleanSlate: Seriously? No ai_chance block here? The ai just tries to romance whoever willy-nilly?
		ai_chance = {
			factor = 1

			trigger = {
				NOT = { trait = celibate }
				FROM = { root_attraction_trigger = yes }
			}
		}
	}


	option = { # Continuing Romance
		name = EVTOPTD_LT_20410

		trigger = { is_lover = FROM }

		custom_tooltip = { text = EVTOPTD_LT_20410_TT }

		FROM = { character_event = { id = LT.20433 days = 1 } }

		random = {
			chance = 30
			remove_trait_silently_stressed_effect = yes
		}

		random = {
			chance = 30

			opinion = {
				name = opinion_budding_romance
				who = FROM
			}
		}

		tooltip = {
			random = {
				chance = 30

				reverse_opinion = {
					name = opinion_budding_romance
					who = FROM
				}
			}
		}
	}

	option = { # Attempt Murder
		name = EVTOPTC_LT_20410
		tooltip_info_custom = EVTOPTC_LT_20410_TT

		trigger = {
			OR = {
				intrigue >= 15
				trait = deceitful
				trait = impaler
				trait = master_schemer
				trait = lunatic
				has_education_intrigue_trigger = yes
			}
		}

		show_portrait = FROM

		custom_tooltip = { text = EVTOPTC_LT_20410_TT_murder }

		FROM = { character_event = { id = LT.20441 days = 1 } }

		# CleanSlate: Seriously? No ai_chance block here? The ai just tries to murder whoever willy-nilly?
	}
}

character_event = { # The target refused my invitation
	id = LT.20412
	desc = EVTDESC_LT_20412
	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20412

		if = {
			limit = {
				FROM = { has_character_flag = polite_refuse }
			}

			FROM = { clr_character_flag = polite_refuse }
		}
		else = {
			opinion = {
				name = opinion_refused_invitation_to_meet
				who = FROM
			}
		}
	}
}

# We had a nice conversation
character_event = {
	id = LT.20421
	desc = EVTDESC_LT_20421
	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	immediate = {
		random_list = {
			20 = { # Nothing
				trigger = {
					FROM = { diplomacy < 15 }
				}

				mult_modifier = {
					factor = 10
					FROM = { diplomacy < 8 }
				}
			}

			60 = { set_character_flag = impressed }

			20 = {
				trigger = {
					FROM = { diplomacy >= 8 }
				}

				mult_modifier = {
					factor = 5
					FROM = { diplomacy >= 15 }
				}

				set_character_flag = thoroughly_impressed
			}
		}
	}

	option = {
		name = EVTOPTA_LT_20421

		trigger = { has_character_flag = thoroughly_impressed }

		opinion = {
			name = opinion_thoroughly_impressed
			who = FROM
			years = 2
		}

		clr_character_flag = thoroughly_impressed

		FROM = { character_event = { id = LT.20422 } }
	}

	option = {
		name = EVTOPTB_LT_20421

		trigger = { has_character_flag = impressed }

		opinion = {
			name = opinion_impressed
			who = FROM
			months = 12
		}

		clr_character_flag = impressed

		FROM = { character_event = { id = LT.20422 } }
	}

	option = {
		name = EVTOPTC_LT_20421

		trigger = {
			NOR = {
				has_character_flag = thoroughly_impressed
				has_character_flag = impressed
			}
		}
	}
}

# Notification for the initiator that the target was impressed
character_event = {
	id = LT.20422
	desc = EVTDESC_LT_20422
	picture = GFX_evt_courtiers_talking

	notification = yes
	is_triggered_only = yes
	hide_from = yes

	ai = no

	option = {
		name = OK
	}
}

character_event = { # Seduction reaction
	id = LT.20431
	desc = EVTDESC_LT_20431
	picture = GFX_evt_castle_garden
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = { # I want you too!
		name = EVTOPTA_LT_20431

		custom_tooltip = { text = EVTOPTC_LT_20431_TT }

		FROM = { character_event = { id = LT.20432 days = 1 } }

		tooltip = {
			add_lover = FROM

			opinion = {
				name = opinion_seduced_attracted
				who = FROM
			}
		}

		ai_chance = {
			factor = 1

			trigger = {
				FROM = {
					root_attraction_trigger = yes

					trigger_if = {
						limit = { is_close_relative = ROOT }

						OR = {
							is_married = ROOT
							religion_has_incest = yes
						}
					}
				}

				NOT = { trait = celibate }
			}

			mult_modifier = {
				factor = 10

				OR = {
					opinion = { who = FROM value >= 45 }
					has_opinion_modifier = { who = FROM name = opinion_budding_romance }
				}
			}
			mult_modifier = {
				factor = 5

				FROM = {
					OR = {
						trait = master_seducer
						trait = master_seductress
					}
				}
			}
			mult_modifier = {
				factor = 5

				OR = {
					trait = hedonist
					trait = lustful
				}
			}
			mult_modifier = {
				factor = 0.1
				trait = chaste
			}
		}
	}

	option = { # I'm not looking for anything "serious"
		name = EVTOPTA_LT_20431_no_love

		custom_tooltip = { text = EVTOPTC_LT_20431_TT_not_serious_romance }

		set_character_flag = not_serious_romance

		FROM = { character_event = { id = LT.20432 days = 1 } }

		tooltip = {
			reverse_opinion = {
				name = opinion_seduced_attracted
				who = FROM
			}
		}

		ai_chance = {
			factor = 1

			trigger = {
				FROM = {
					root_attraction_trigger = yes

					trigger_if = {
						limit = { is_close_relative = ROOT }

						OR = {
							is_married = ROOT
							religion_has_incest = yes
						}
					}
				}

				NOT = { trait = celibate }
			}

			mult_modifier = {
				factor = 5

				OR = {
					trait = master_seducer
					trait = master_seductress
				}
			}
			mult_modifier = {
				factor = 5

				OR = {
					trait = hedonist
					trait = lustful
				}
			}
			mult_modifier = {
				factor = 1.5
				has_lover = yes
			}
			mult_modifier = {
				factor = 0.1
				trait = chaste
			}
		}
	}

	option = { # Refuse
		name = EVTOPTB_LT_20431

		show_portrait = FROM

		FROM = { character_event = { id = LT.20434 days = 1 } }
	}

	option = { # Try to Murder
		name = EVTOPTC_LT_20431
		tooltip_info_custom = EVTOPTC_LT_20410_TT

		trigger = {
			OR = {
				intrigue >= 10
				trait = deceitful
				trait = impaler
				trait = master_schemer
				trait = lunatic
				has_education_intrigue_trigger = yes
			}
		}

		show_portrait = FROM

		custom_tooltip = { text = EVTOPTC_LT_20410_TT_murder }

		set_character_flag = murderer_target

		FROM = { character_event = { id = LT.20441 days = 5 } }

		# CleanSlate: Seriously? No ai_chance block here? The ai just tries to murder whoever willy-nilly?
	}
}

character_event = { # We are lovers now
	id = LT.20432
	picture = GFX_evt_lovers
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	desc = {
		text = EVTDESC_LT_20432_A
		trigger = {
			FROM = { has_character_flag = not_serious_romance }
		}
	}
	desc = {
		text = EVTDESC_LT_20432_B
		trigger = {
			FROM = { NOT = { has_character_flag = not_serious_romance } }
		}
	}

	option = {
		name = {
			text = EVTOPTA_LT_20432_A # I just want them more
			trigger = {
				FROM = { has_character_flag = not_serious_romance }
			}
		}
		name = {
			text = EVTOPTA_LT_20432_B # life is good
			trigger = {
				FROM = { NOT = { has_character_flag = not_serious_romance } }
			}
		}


		if = {
			limit = {
				FROM = { has_character_flag = not_serious_romance }
			}

			FROM = { clr_character_flag = not_serious_romance }

			reverse_opinion = {
				name = opinion_seduced_attracted
				who = FROM
			}
		}
		else = {
			# CleanSlate: No unprotected_sex_effect here?

			add_lover = FROM

			reverse_opinion = {
				name = opinion_seduced_attracted
				who = FROM
			}
		}
	}
}

character_event = { # Lovers make love
	id = LT.20433
	desc = EVTDESC_LT_20433
	picture = GFX_evt_lovers
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20432_B # life is good

		# CleanSlate: No unprotected_sex_effect here?

		random = {
			chance = 30

			opinion = {
				name = opinion_budding_romance
				who = FROM
			}
		}

		random = {
			chance = 30
			remove_trait_silently_stressed_effect = yes
		}
	}
}


character_event = { # I was refused!
	id = LT.20434
	desc = EVTDESC_LT_20434
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20434

		prestige = -10

		reverse_opinion = {
			name = opinion_dislike
			who = FROM
			years = 1
		}

		opinion = {
			name = opinion_advance_rejected
			who = FROM
		}
	}
}


character_event = { # Murder attempt Reaction. This event can happen to either character
	id = LT.20441
	picture = GFX_evt_assassination
	border = GFX_event_normal_frame_intrigue

	desc = {
		text = EVTDESC_LT_20441
		trigger = { FROM = { NOT = { has_character_flag = murderer_target } } }
	}
	desc = {
		text = EVTDESC_LT_20441_murderer_target
		trigger = { FROM = { has_character_flag = murderer_target } }
	}

	is_triggered_only = yes

	immediate = {
		save_event_target_as = murderer
	}

	option = { # Run away
		name = EVTOPTA_LT_20441

		random_list = {
			25 = {
				mult_modifier = { factor = 5 trait = duelist }
				mult_modifier = { factor = 3 trait = genius }
				mult_modifier = { factor = 2 trait = quick }
				mult_modifier = { factor = 2 trait = shrewd }

				custom_tooltip = { text = EVTOPTA_LT_20441_TT_escape }
				character_event = { id = LT.20450 days = 3 }
				FROM = { character_event = { id = LT.20460 } }
			}

			50 = {
				custom_tooltip = { text = EVTOPTA_LT_20441_TT_wounded }
				add_trait_wounded_effect = yes
				set_character_flag = wounded_in_attempt
				character_event = { id = LT.20450 days = 3 }
				FROM = { character_event = { id = LT.20460 } }
			}

			25 = { # Dead
				custom_tooltip = { text = EVTOPTA_LT_20441_TT_dead }
				character_event = { id = LT.20455 days = 3 }
				FROM = { character_event = { id = LT.20465 } }
			}
		}

		ai_chance = {
			factor = 1

			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 50 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 40 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 30 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 20 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 10 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 55 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 45 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 35 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 25 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 15 } }
			mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 05 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -05 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -10 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -20 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -30 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -40 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -50 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -15 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -25 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -35 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -45 } }
			mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -55 } }
		}
	}

	option = { # Fight
		name = EVTOPTB_LT_20441

		set_character_flag = murder_fight
		FROM = { set_character_flag = murder_fight }

		random_list = {
			50 = {
				custom_tooltip = { text = EVTOPTB_LT_20441_TT_win }
				character_event = { id = LT.20465 }
				FROM = { character_event = { id = LT.20455 } }
			}

			50 = { # Dead
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 50 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 40 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 30 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 20 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 10 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 55 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 45 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 35 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 25 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 15 } }
				mult_modifier = { factor = 0.75 combat_rating_diff = { character = FROM value >= 05 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -05 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -10 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -20 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -30 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -40 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -50 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -15 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -25 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -35 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -45 } }
				mult_modifier = { factor = 1.50 combat_rating_diff = { character = FROM value < -55 } }

				custom_tooltip = { text = EVTOPTB_LT_20441_TT_lose }
				character_event = { id = LT.20455 }
				FROM = { character_event = { id = LT.20465 } }
			}
		}
	}

	after = {
		opinion = {
			name = opinion_murder_attempt
			who = FROM
		}

		clr_character_flag = murderer_target
	}
}

# I escaped alive from the murder attempt!
character_event = {
	id = LT.20450
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

	desc = {
		text = EVTDESC_LT_20450
		picture = GFX_evt_bad_news
		trigger = { NOT = { has_character_flag = wounded_in_attempt } }
	}
	desc = {
		text = EVTDESC_LT_20450_wounded
		picture = GFX_evt_court_physician
		trigger = { has_character_flag = wounded_in_attempt }
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20450

		random = {
			chance = 50
			add_trait_stressed_effect = yes
		}
	}
}

# I am dying
character_event = {
	id = LT.20455
	desc = EVTDESC_LT_20455
	picture = GFX_evt_danse_macabre
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20455

		death = { death_reason = death_murder }
	}
}

# I failed the murder attempt
character_event = {
	id = LT.20460
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_intrigue

	desc = {
		text = EVTDESC_LT_20460
		trigger = { FROM = { NOT = { has_character_flag = wounded_in_attempt } } }
	}
	desc = {
		text = EVTDESC_LT_20460_wounded
		trigger = { FROM = { has_character_flag = wounded_in_attempt } }
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20450

		random = {
			chance = 50
			add_trait_stressed_effect = yes
		}

		FROM = { clr_character_flag = wounded_in_attempt }
	}
}

# I killed the other
character_event = {
	id = LT.20465
	picture = GFX_evt_danse_macabre
	border = GFX_event_normal_frame_intrigue

	desc = {
		text = EVTDESC_LT_20465_fight
		trigger = { has_character_flag = murder_fight }
	}
	desc = {
		text = EVTDESC_LT_20465
		trigger = {
			NOT = { has_character_flag = murder_fight }
		}
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_LT_20465

		clr_character_flag = murder_fight
	}
}


## Event for burying the character's predecessor if having wonder upgrade with burial flag

# Setting up event, fires on the dead ruler (on_death)
character_event = {
	id = LT.20501

	hide_window = yes
	is_triggered_only = yes # on_death

	only_independent = yes

	trigger = {
		realm_wonder_or_upgrade_has_flag_burial_ground_trigger = yes
	}

	immediate = {
		save_event_target_as = target_dead_ruler

		any_realm_character = {
			if = {
				limit = { opinion = { who = ROOT value >= 20 } }
				set_character_flag = liked_dead_ruler_@ROOT
			}
			else_if = {
				limit = { opinion = { who = ROOT value < -50 } }
				set_character_flag = hated_dead_ruler_@ROOT
			}
		}

		current_heir = {
			character_event = { id = LT.20510 days = 1 }
		}
	}
}

character_event = {
	id = LT.20510
	title = evt_TITLE_LT_20510
	picture = GFX_evt_treasure_chamber
	border = GFX_event_normal_frame_religion

	desc = {
		text = EVTDESC_LT_20510_pagan
		picture = GFX_evt_bad_news
		trigger = { religion_group = pagan_group }
	}
	desc = {
		text = EVTDESC_LT_20510_christian
		picture = GFX_evt_bad_news
		trigger = { religion_group = christian }
	}
	desc = {
		text = EVTDESC_LT_20510_muslim
		picture = GFX_evt_bad_news
		trigger = { religion_group = muslim }
	}
	desc = {
		text = EVTDESC_LT_20510_jewish
		picture = GFX_evt_bad_news
		trigger = { religion_group = jewish_group }
	}
	desc = {
		text = EVTDESC_LT_20510_indian
		picture = GFX_evt_bad_news
		trigger = { religion_group = indian_group }
	}

	is_triggered_only = yes

	trigger = {
		is_inaccessible_trigger = no
		realm_wonder_or_upgrade_has_flag_burial_ground_trigger = yes
	}

	immediate = {
		random_realm_wonder = {
			limit = {
				is_active = yes
				has_wonder_flag = burial_ground
			}

			save_event_target_as = target_wonder
		}

		if = {
			limit = {
				NOT = { event_target:target_wonder = { always = yes } }
			}

			random_realm_wonder_upgrade = {
				limit = {
					is_active = yes
					has_wonder_upgrade_flag = burial_ground
				}

				save_event_target_as = target_upgrade
				wonder = { save_event_target_as = target_wonder }
			}
		}
	}

	option = { # The most expensive
		name = EVTOPTA_LT_20510

		custom_tooltip = { text = EVTOPTA_LT_20510_TT }

		scaled_wealth = {
			value = -0.5
			min = -100
			max = -400
		}

		set_character_flag = big_burial
		character_event = { id = LT.20520 days = 10 }
	}

	option = { # A Reasonable amount
		name = EVTOPTB_LT_20510

		custom_tooltip = { text = EVTOPTB_LT_20510_TT }

		scaled_wealth = {
			value = -0.3
			min =  -50
			max = -200
		}

		set_character_flag = normal_burial
		character_event = { id = LT.20520 days = 5 }
	}

	option = { # The cheapest
		name = EVTOPTC_LT_20510

		scaled_wealth = { value = -0.1 min = -10 max = -100 }
		prestige = -20
		piety = 10

		clr_character_flag = liked_dead_ruler_@FROM
		clr_character_flag = hated_dead_ruler_@FROM

		hidden_effect = {
			any_realm_character = {
				clr_character_flag = liked_dead_ruler_@FROM
				clr_character_flag = hated_dead_ruler_@FROM
			}
		}
	}

	option = { # S/He does not deserve proper burial
		name = EVTOPTD_LT_20510

		custom_tooltip = { text = EVTOPTD_LT_20510_TT }

		prestige = -50
		piety = -50

		clr_character_flag = liked_dead_ruler_@FROM
		clr_character_flag = hated_dead_ruler_@FROM

		hidden_effect = {
			any_realm_character = {
				if = {
					limit = { has_character_flag = liked_dead_ruler_@FROM }

					clr_character_flag = liked_dead_ruler_@FROM

					opinion = {
						name = opinion_did_not_honor_the_dead
						who = ROOT
					}
				}
				else_if = {
					limit = { has_character_flag = hated_dead_ruler_@FROM }

					clr_character_flag = hated_dead_ruler_@FROM

					opinion = {
						name = opinion_did_not_honor_hated_ruler
						who = ROOT
					}
				}
			}
		}
	}
}

character_event = {
	id = LT.20520
	title = evt_TITLE_LT_20510
	picture = GFX_evt_treasure_chamber
	border = GFX_event_normal_frame_religion

	desc = {
		text = EVTDESC_LT_20520_pagan
		picture = GFX_evt_feast_hf
		trigger = { religion_group = pagan_group }
	}
	desc = {
		text = EVTDESC_LT_20520_monoteist
		picture = GFX_evt_died_funeral
		trigger = {
			OR = {
				religion_group = christian
				religion_group = jewish_group
				religion_group = muslim
			}
		}
	}
	desc = { # Indian funeral traditions vary greatly, between cremation and burial, so it is better not to be specific...
		text = EVTDESC_LT_20520_indian
		picture = GFX_evt_india_temple
		trigger = { religion_group = indian_group }
	}

	is_triggered_only = yes

	trigger = {
		is_inaccessible_trigger = no
		realm_wonder_or_upgrade_has_flag_burial_ground_trigger = yes

		event_target:target_wonder = {
			wonder_owner = {
				character = ROOT
			}
		}

		OR = {
			has_character_flag = big_burial
			has_character_flag = normal_burial
		}
	}

	option = {
		name = {
			text = EVTOPTA_LT_20520_polyteist
			trigger = {
				OR = {
					religion_group = pagan_group
					religion_group = indian_group
				}
			}
		}
		name = {
			text = EVTOPTA_LT_20520_monoteist
			trigger = {
				OR = {
					religion_group = christian
					religion_group = jewish_group
				}
			}
		}
		name = {
			text = EVTOPTA_LT_20520_muslim
			trigger = { religion_group = muslim }
		}

		custom_tooltip = { text = EVTOPTA_LT_20520_TT }

		if = {
			limit = { has_character_flag = big_burial }
			clr_character_flag = big_burial

			prestige = 150
			piety = 50

			hidden_effect = {
				any_realm_character = {
					if = {
						limit = { has_character_flag = liked_dead_ruler_@FROMFROM }

						clr_character_flag = liked_dead_ruler_@FROMFROM

						opinion = {
							name = opinion_did_honor_the_dead
							who = ROOT
						}
					}
					else_if = {
						limit = { has_character_flag = hated_dead_ruler_@FROMFROM }

						clr_character_flag = hated_dead_ruler_@FROMFROM

						opinion = {
							name = opinion_did_honor_hated_ruler
							who = ROOT
						}
					}
				}
			}
		}
		else = {
			clr_character_flag = normal_burial

			prestige = 50
			piety = 100

			hidden_effect = {
				any_realm_character = {
					if = {
						limit = { has_character_flag = liked_dead_ruler_@FROMFROM }

						clr_character_flag = liked_dead_ruler_@FROMFROM

						opinion = {
							name = opinion_did_honor_the_dead
							who = ROOT
							years = 1
						}
					}
					else = {
						clr_character_flag = hated_dead_ruler_@FROMFROM
					}
				}
			}
		}

		clr_character_flag = liked_dead_ruler_@FROMFROM
		clr_character_flag = hated_dead_ruler_@FROMFROM
	}
}


## Events related to stores_relic flag. It fires from decision store_relic_in_wonder

character_event = {
	id = LT.20601
	picture = GFX_evt_treasure_chamber
	border = GFX_event_normal_frame_religion

	desc = {
		text = EVTDESC_LT_20601_one_artifact
		picture = GFX_evt_relic_box
		trigger = { NOT = { event_target:target_artifact_2 = { is_artifact_active = yes } } }
	}
	desc = {
		text = EVTDESC_LT_20601_two_artifacts
		trigger = {
			event_target:target_artifact_2 = { is_artifact_active = yes }
			NOT = { event_target:target_artifact_3 = { is_artifact_active = yes } }
		}
	}
	desc = {
		text = EVTDESC_LT_20601_more_artifacts
		trigger = {
			event_target:target_artifact_3 = { is_artifact_active = yes }
		}
	}

	is_triggered_only = yes # wonder_decisions.txt

	only_independent = yes

	trigger = {
		any_realm_wonder_upgrade = {
			has_wonder_upgrade_flag = stores_relic
			is_active = no
		}
	}

	option = {
		name = EVTOPTA_LT_20601

		trigger = { event_target:target_artifact_1 = { is_artifact_active = yes } }

		event_target:target_artifact_1 = {
			show_scope_change = no

			custom_tooltip = { text = EVTOPTA_LT_20601_TT }
			if = { 		limit = { quality == 5 } ROOT = { show_scope_change = no piety = 500 prestige = 500 } }
			else_if = { limit = { quality == 4 } ROOT = { show_scope_change = no piety = 400 prestige = 300 } }
			else_if = { limit = { quality == 3 } ROOT = { show_scope_change = no piety = 300 prestige = 100 } }
			else_if = { limit = { quality == 2 } ROOT = { show_scope_change = no piety = 200 } }
			else = { 							 ROOT = { show_scope_change = no piety = 100 } }
		}

		hidden_effect = {
			if = {
				limit = { event_target:target_artifact_1 = { owner = { character = ROOT } } }
				event_target:target_artifact_1 = { unsafe_destroy_artifact = yes }
				event_target:target_upgrade = { set_wonder_upgrade_flag = is_storing_relic }
			}
			else = { character_event = { id = LT.20610 } } # cheated?
		}
	}

	option = {
		name = EVTOPTB_LT_20601

		trigger = { event_target:target_artifact_2 = { is_artifact_active = yes } }

		event_target:target_artifact_2 = {
			show_scope_change = no

			custom_tooltip = { text = EVTOPTA_LT_20601_TT }
			if = { 		limit = { quality == 5 } ROOT = { show_scope_change = no piety = 500 prestige = 500 } }
			else_if = { limit = { quality == 4 } ROOT = { show_scope_change = no piety = 400 prestige = 300 } }
			else_if = { limit = { quality == 3 } ROOT = { show_scope_change = no piety = 300 prestige = 100 } }
			else_if = { limit = { quality == 2 } ROOT = { show_scope_change = no piety = 200 } }
			else = { 							 ROOT = { show_scope_change = no piety = 100 } }
		}

		hidden_effect = {
			if = {
				limit = { event_target:target_artifact_2 = { owner = { character = ROOT } } }
				event_target:target_artifact_2 = { unsafe_destroy_artifact = yes }
				event_target:target_upgrade = { set_wonder_upgrade_flag = is_storing_relic }
			}
			else = { character_event = { id = LT.20610 } } # cheated?
		}
	}

	option = {
		name = EVTOPTC_LT_20601

		trigger = { event_target:target_artifact_3 = { is_artifact_active = yes } }

		event_target:target_artifact_3 = {
			show_scope_change = no

			custom_tooltip = { text = EVTOPTA_LT_20601_TT }
			if = { 		limit = { quality == 5 } ROOT = { show_scope_change = no piety = 500 prestige = 500 } }
			else_if = { limit = { quality == 4 } ROOT = { show_scope_change = no piety = 400 prestige = 300 } }
			else_if = { limit = { quality == 3 } ROOT = { show_scope_change = no piety = 300 prestige = 100 } }
			else_if = { limit = { quality == 2 } ROOT = { show_scope_change = no piety = 200 } }
			else = { 							 ROOT = { show_scope_change = no piety = 100 } }
		}

		hidden_effect = {
			if = {
				limit = { event_target:target_artifact_3 = { owner = { character = ROOT } } }
				event_target:target_artifact_3 = { unsafe_destroy_artifact = yes }
				event_target:target_upgrade = { set_wonder_upgrade_flag = is_storing_relic }
			}
			else = { character_event = { id = LT.20610 } } # cheated?
		}
	}

	option = { # Not a good idea after all
		name = EVTOPTE_LT_20601
	}

	after = {
		clr_character_flag = taking_relic_decision
	}
}

# CleanSlate: This seems a bit much

# I am dead
character_event = {
	id = LT.20610
	desc = EVTDESC_LT_20610
	picture = GFX_evt_danse_macabre
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { multiplayer = yes }
			death = { death_reason = death_murder_unknown_lightning }
		}
	}

	option = {
		name = EVTOPTA_LT_20610

		if = {
			limit = { multiplayer = no }
			death = { death_reason = death_murder_unknown_lightning }
		}
		else = {
			tooltip = {
				death = { death_reason = death_murder_unknown_lightning }
			}
		}
	}
}


## upgrade_strategic_exclaves effect.

# Fired from on_action when the upgrades finishes construction
character_event = {
	id = LT.20700
	title = evt_TITLE_LT_20700
	desc = EVTDESC_LT_20700
	picture = GFX_evt_castle_construction
	border = GFX_event_normal_frame_war

	is_triggered_only = yes # on_wonder_upgrade_finish

	trigger = {
		FROMFROM = { has_wonder_upgrade = upgrade_strategic_exclaves }
	}

	immediate = {
		FROM = { save_event_target_as = target_upgrade }
		FROMFROM = { save_event_target_as = target_wonder }
		FROMFROMFROM = {
			save_event_target_as = target_province

			any_province_holding = {
				trigger_switch = {
					on_trigger = holding_type

					city =   { add_building = ct_wall_5 }
					temple = { add_building = tp_wall_5 }
					castle = { add_building = ca_wall_5 }
					tribal = { add_building = tb_hillfort_5 }
					nomad =  { add_building = no_camp_fortifications_8 }
				}
			}
		}
	}

	option = {
		name = EVTOPTA_LT_20700
		custom_tooltip = { text = EVTOPTA_LT_20700_TT }
	}
}

## Looting Events

# To set the name the wonder will acquire when looting has finished
# Is done here to save the actual stage of the wonder at the time of looting starting
character_event = {
	id = LT.20799

	hide_window = yes
	is_triggered_only = yes # on_wonder_loot_start

	only_independent = yes

	trigger = {
		FROM = { NOT = { has_wonder_flag = was_ruined } }
	}

	immediate = {
		FROMFROM = { save_event_target_as = target_province }

		FROM = {
			original_wonder_owner = {
				save_event_target_as = wonder_owner_original
			}

			save_event_target_as = target_wonder

			# Name...
			if = {
				limit = { NOT = { has_wonder_flag = was_ruined } }

				set_wonder_flag = was_ruined

				if = {
					limit = {
						wonder_stage >= 3 # it was a high stage building
					}

					set_wonder_flag = wonder_stage_3
				}
				else = {
					set_wonder_flag = wonder_stage_less_than_3
				}
			}
		}
	}
}


# To get a delay from the on_action triggered event
character_event = {
	id = LT.20800

	hide_window = yes
	is_triggered_only = yes # on_wonder_loot_start

	only_independent = yes

	trigger = {
		NOT = { has_character_flag = looted_wonder_artifact }
		FROM = { has_wonder_flag = gives_artifact }
	}

	immediate = {
		FROM = { save_event_target_as = target_wonder }

		character_event = {
			id = LT.20805
			days = 20
			random = 5
		}
	}
}

# This event will spawn an artifact of the correct type and give it to the character. It is possible to add more artifacts by creating wonder flags and then adding the artifact here.
character_event = {
	id = LT.20805
	desc = EVTDESC_LT_20805
	picture = GFX_evt_end_of_days
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	only_independent = yes

	trigger = {
		NOT = { has_character_flag = looted_wonder_artifact }

		event_target:target_wonder = {
			has_wonder_flag = gives_artifact
			NOT = { has_wonder_flag = artifact_was_looted }
			wonder_owner = { character = ROOT }
		}

		any_courtier = {
			is_inaccessible_or_incapable_trigger = no
		}
	}

	immediate = {
		set_character_flag = looted_wonder_artifact

		event_target:target_wonder = {
			set_wonder_flag = artifact_was_looted
		}

		any_courtier = {
			limit = { is_inaccessible_or_incapable_trigger = no }

			score_value = { # Prioritizes selecting an interesting courtier...
				value = 10
				interesting_courtier_selection_score = yes
			}

			save_event_target_as = target_courtier

			event_target:target_wonder = {
				trigger_switch = {
					on_trigger = has_wonder_flag

					gives_artifact_bells = {
						PREV = {
							add_artifact = wonder_artifact_bells

							new_artifact = {
								set_name = looted_wonder_artifact_bells_rename
								set_description = looted_wonder_artifact_bells_desc
								set_creation_date = 1.1.1
								save_event_target_as = looted_artifact
							}
						}

						if = {
							limit = { has_wonder_upgrade = upgrade_bells }
							destroy_wonder_upgrade = upgrade_bells
						}

						if = {
							limit = { has_wonder_upgrade = upgrade_bells_golden }
							destroy_wonder_upgrade = upgrade_bells_golden
						}
					}

					gives_artifact_book = {
						PREV = {
							add_random_book_effect = yes

							new_artifact = {
								set_creation_date = 1.1.1
								save_event_target_as = looted_artifact
							}
						}
					}
				}
			}
		}
	}

	option = { # I want it!
		name = EVTOPTA_LT_20805

		event_target:target_courtier = {
			show_scope_change = no

			reverse_opinion = {
				name = opinion_grateful
				who = ROOT
			}

			event_target:looted_artifact = {
				show_scope_change = no

				transfer_artifact = {
					from = PREV
					to = FROM
				}
			}
		}
	}

	option = { # give it away
		name = EVTOPTB_LT_20805

		reverse_opinion = {
			name = opinion_grateful
			who = event_target:target_courtier
		}
	}
}

# clean-up event, if a wonder finishes restoration
character_event = {
	id = LT.20808

	hide_window = yes
	is_triggered_only = yes # on_wonder_restore_finish

	immediate = {
		FROM = { clr_wonder_flag = artifact_was_looted }
	}
}


# Notification for the initiator that looting started and it provoked cultural unrest
character_event = {
	id = LT.20810
	picture = GFX_evt_courtiers_talking

	desc = {
		text = EVTDESC_LT_20810_cheap
		trigger = { FROM = { has_wonder_flag = cost_low } }
	}
	desc = {
		text = EVTDESC_LT_20810
		trigger = { NOT = { FROM = { has_wonder_flag = cost_low } } }
	}

	is_triggered_only = yes # on_wonder_loot_start
	hide_from = yes

	option = { # private looting
		name = EVTOPTA_LT_20810

		FROM = {
			clr_wonder_flag = being_looted_public
			set_wonder_flag = being_looted_private
		}

		FROMFROM = {
			add_province_modifier = {
				name = cultural_unrest
				years = 2
			}
		}
	}

	option = { # everybody joins
		name = EVTOPTB_LT_20810

		FROM = {
			clr_wonder_flag = being_looted_private
			set_wonder_flag = being_looted_public
		}
	}
}


# Notification for the owner that looting stage finished, fired from on_action on_wonder_stage_loot_finish
character_event = {
	id = LT.20820
	title = evt_TITLE_LT_20820
	picture = GFX_evt_courtiers_talking

	desc = {
		text = EVTDESC_LT_20820_the_end
		trigger = { FROM = { is_at_lootable_stage = no } }
	}
	desc = {
		text = EVTDESC_LT_20820
		trigger = { FROM = { is_at_lootable_stage = yes } }
	}

	notification = yes
	is_triggered_only = yes # on_wonder_stage_loot_finish
	hide_from = yes

	immediate = {
		FROM = {
			set_variable = { which = local_loot value = 400 }

			trigger_switch = {
				on_trigger = has_wonder_flag

				cost_low =    { set_variable = { which = local_loot value = 300 } }
				cost_medium = { set_variable = { which = local_loot value = 500 } }
				cost_high =   { set_variable = { which = local_loot value = 800 } }
			}
		}

		if = {
			limit = { FROM = { has_wonder_flag = being_looted_public } }
			multiply_variable = { which = local_loot value = 0.5 }
		}

		wealth = local_loot
	}

	option = {
		name = OK
	}

	after = {
		FROM = { clear_flags_with_prefix = being_looted_ }
	}
}


# Hagia Sophia conversion event
character_event = {
	id = LT.20900
	title = wonder_cathedral_hagia_sophia
	picture = GFX_evt_hagia_sofia
	border = GFX_event_normal_frame_religion

	desc = {
		text = EVTDESC_LT_20900_chaplain
		trigger = { job_spiritual = { always = yes } }
	}
	desc = {
		text = EVTDESC_LT_20900
		trigger = { NOT = { job_spiritual = { always = yes } } }
	}

	is_triggered_only = yes # on_new_holder(_inheritance/usurpation)

	only_independent = yes

	trigger = {
		trigger_if = {
			limit = { is_catholic_branch = yes }

			any_realm_wonder = {
				NOT = { has_wonder_flag = Hagia_Sophia_catholic_cult }

				OR = {
					has_wonder_flag = Hagia_Sophia_orthodox_cult
					has_wonder_flag = Hagia_Sophia_muslim_cult
				}
			}
		}
		trigger_else_if = {
			limit = { is_orthodox_branch = yes }

			any_realm_wonder = {
				NOT = { has_wonder_flag = Hagia_Sophia_orthodox_cult }

				OR = {
					has_wonder_flag = Hagia_Sophia_catholic_cult
					has_wonder_flag = Hagia_Sophia_muslim_cult
				}
			}
		}
		trigger_else = {
			religion_group = muslim

			any_realm_wonder = {
				NOT = { has_wonder_flag = Hagia_Sophia_muslim_cult }

				OR = {
					has_wonder_flag = Hagia_Sophia_orthodox_cult
					has_wonder_flag = Hagia_Sophia_catholic_cult
				}
			}
		}
	}

	immediate = {
		random_realm_wonder = {
			limit = { has_wonder = wonder_cathedral_hagia_sophia }
			save_event_target_as = target_wonder

			if = {
				limit = {
					trigger_if = {
						limit = { has_wonder_flag = Hagia_Sophia_catholic_cult }
						location = { is_catholic_branch = yes }
					}
					trigger_else_if = {
						limit = { has_wonder_flag = Hagia_Sophia_orthodox_cult }
						location = { is_orthodox_branch = yes }
					}
					trigger_else = {
						has_wonder_flag = Hagia_Sophia_muslim_cult
						location = { religion_group = muslim }
					}
				}

				location = { set_province_flag = people_had_hagia_sophia }
			}
		}
	}

	option = { # Convert
		name = EVTOPTA_LT_20900

		event_target:target_wonder = { clear_flags_with_prefix = Hagia_Sophia_ }

		if = {
			limit = { is_catholic_branch = yes }

			event_target:target_wonder = {
				set_wonder_flag = Hagia_Sophia_catholic_cult
				set_wonder_model = wonder_hagia_sophia
			}
		}
		else_if = {
			limit = { is_orthodox_branch = yes }

			event_target:target_wonder = {
				set_wonder_flag = Hagia_Sophia_orthodox_cult
				set_wonder_model = wonder_hagia_sophia
			}
		}
		else_if = {
			limit = { religion_group = muslim }

			event_target:target_wonder = {
				set_wonder_flag = Hagia_Sophia_muslim_cult
				set_wonder_model = wonder_hagia_sophia_minarets
			}
		}

		piety = 200

		reverse_opinion = {
			name = opinion_religious_tract
			who = job_spiritual
			years = 5
		}

		event_target:target_wonder = {
			show_scope_change = no

			location = {
				show_scope_change = no

				if = {
					limit = { has_province_flag = people_had_hagia_sophia }

					add_province_modifier = {
						name = religious_tension
						years = 5
					}
				}
			}
		}
	}

	option = { # Don't Convert
		name = EVTOPTB_LT_20900

		piety = -50

		reverse_opinion = {
			name = opinion_angry
			who = job_spiritual
			years = 5
		}

		event_target:target_wonder = {
			show_scope_change = no

			location = {
				show_scope_change = no

				if = {
					limit = { has_province_flag = people_had_hagia_sophia }

					add_province_modifier = {
						name = religious_tolerance
						years = 10
					}
				}
			}
		}
	}
}

# After a Siege, things might get out of control and a sack occur. Similar to HL.4813, but weaker. Triggered as random event from on_action on_siege_won_leader
character_event = {
	id = LT.21000
	desc = EVTDESC_LT_21000.1
	desc = EVTDESC_LT_21000.2
	picture = GFX_evt_siege
	border = GFX_event_normal_frame_war
	portrait = event_target:top_liege_target

	is_triggered_only = yes # on_siege_won_leader, random_events

	trigger = {
		is_nomadic = no # Nomads get their own event ( HL.4813 )
		is_allowed_to_loot = no # A little bit of a too harsh block. Could be expanded upon.

		NOR = {
			has_character_flag = disciplinary_commander
			has_character_modifier = strong_leader_modifier
		}

		FROM = {
			num_of_buildings >= 4

			OR = {
				holding_type = city
				holding_type = temple
				holding_type = castle
				holding_type = tribal
			}

			location = {
				NOT = { has_province_modifier = recently_burnt_the_land_not_owner }
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 2
			has_character_modifier = weak_leader_modifier
		}
		mult_modifier = {
			factor = 2
			FROM = { is_capital = yes }
		}
		mult_modifier = {
			factor = 3
			has_character_modifier = plundering_leader_modifier
		}
	}

	immediate = {
		FROM = {
			holder_scope  = {
				save_event_target_as = holder_target

				top_liege = {
					save_event_target_as = top_liege_target
				}
			}
			location = {
				add_province_modifier = {
					name = recently_burnt_the_land_not_owner
					years = 10
				}
			}
		}
	}

	option = {
		name = EVTOPTA_LT_21000

		show_portrait = event_target:holder_target
		show_portrait = event_target:top_liege_target

		trigger_switch = {
			on_trigger = prestige
			1000 = { prestige = -200 }
			 500 = { prestige = -100 }
			 100 = { prestige =  -50 }
			   0 = { prestige =  -20 }
		}

		FROM = {
			show_scope_change = no

			destroy_random_building = THIS

			location = {
				show_scope_change = no

				if = {
					limit = { has_wonder = yes }

					random = {
						chance = 30
						wonder = { set_wonder_damaged = yes }
					}
				}
			}

			holder_scope = {
				show_scope_change = no

				opinion = {
					name = opinion_furious
					who = ROOT
					years = 3
				}

				top_liege = {
					show_scope_change = no

					opinion = {
						name = opinion_furious
						who = ROOT
						years = 3
					}

					custom_tooltip = {
						text = EVTOPTA_LT_21000_DISHONORABLE_TT

						hidden_effect = {
							generate_tooltip = no

							any_realm_character = {
								limit = { NOT = { trait = cruel } }

								opinion = {
									name = opinion_dishonorable
									who = ROOT
									years = 10
								}
							}
						}
					}
				}
			}
		}

		add_character_modifier = {
			name = plundering_leader_modifier
			years = 2
		}

		ai_chance = { factor = 40 }
	}

	option = {
		name = EVTOPTB_LT_21000

		show_portrait = event_target:holder_target
		show_portrait = event_target:top_liege_target

		if = {
			limit = { FROM = { holding_type = tribal } }
			wealth = 5
		}
		else = {
			wealth = 10
		}

		trigger_switch = {
			on_trigger = prestige

			1000 = { prestige = -400 }
			 500 = { prestige = -200 }
			 100 = { prestige =  -80 }
			   0 = { prestige =  -40 }
		}

		random = {
			chance = 50
			add_trait_wroth_effect = yes
		}
		random = {
			chance = 50
			add_trait_cruel_effect = yes
		}

		FROM = {
			show_scope_change = no

			destroy_random_building = THIS

			location = {
				show_scope_change = no

				if = {
					limit = { has_wonder = yes }

					ROOT = { wealth = 30 }

					random = {
						chance = 30
						wonder = { set_wonder_damaged = yes }
					}
				}
			}

			holder_scope = {
				show_scope_change = no

				opinion = {
					name = opinion_furious
					who = ROOT
					years = 3
				}

				top_liege = {
					show_scope_change = no

					opinion = {
						name = opinion_furious
						who = ROOT
						years = 3
					}

					custom_tooltip = {
						text = EVTOPTA_LT_21000_DISHONORABLE_TT

						hidden_effect = {
							generate_tooltip = no

							any_realm_character = {
								limit = { NOT = { trait = cruel } }

								opinion = {
									name = opinion_dishonorable
									who = ROOT
									years = 10
								}
							}
						}
					}
				}
			}
		}

		hidden_effect = {
			remove_character_modifier = plundering_leader_modifier
		}

		add_character_modifier = {
			name = plundering_leader_modifier
			years = 2
		}

		ai_chance = {
			factor = 10

			mult_modifier = {
				factor = 5
				trait = cruel
			}
			mult_modifier = {
				factor = 5
				trait = wroth
			}
		}
	}

	option = {
		name = EVTOPTC_LT_21000

	#	trigger = {
	#		NOR = {
	#			has_character_modifier = strong_leader_modifier
	#			has_character_modifier = weak_leader_modifier
	#		}
	#	}

		random_list = {
			50 = {
				mult_modifier = { factor = 0.5 martial <  2 }
				mult_modifier = { factor = 0.7 martial <  4 }
				mult_modifier = { factor = 0.8 martial <  6 }
				mult_modifier = { factor = 0.9 martial <  8 }
				mult_modifier = { factor = 0.9 martial < 10 }
				mult_modifier = { factor = 1.2 martial > 12 }
				mult_modifier = { factor = 1.2 martial > 14 }
				mult_modifier = { factor = 1.3 martial > 16 }
				mult_modifier = { factor = 1.4 martial > 18 }

				custom_tooltip = { text = EVTOPTC_LT_21000_CONTROL_TT }

				any_controlled_unit = {
					show_scope_change = no

					limit = {
						location = {
							FROM = {
								location = {
									province = PREVPREV
								}
							}
						}
					}

					troops = -0.05
				}

				prestige = 50

				hidden_effect = {
					remove_character_modifier = plundering_leader_modifier
				}

				add_character_modifier = {
					name = strong_leader_modifier
					years = 10
				}
			}

			50 = {
				custom_tooltip = { text = EVTOPTC_LT_21000_NO_CONTROL_TT }

				FROM = {
					show_scope_change = no

					destroy_random_building = THIS

					location = {
						show_scope_change = no

						if = {
							limit = { has_wonder = yes }
							wonder = { set_wonder_damaged = yes }
						}
					}
				}

				hidden_effect = {
					remove_character_modifier = plundering_leader_modifier
				}

				add_character_modifier = {
					name = weak_leader_modifier
					years = 10
				}
			}
		}

		ai_chance = { factor = 50 }
	}
}