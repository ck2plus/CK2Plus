# TODO: Split this into separate files with descriptive names

namespace = Plus

#reserved: Plus.100 to Plus.149
#reserved: Plus.1750 to Plus.1849

#######################################
# ESTATE EVENTS
#######################################

# Grant Estate - fired from the minor title
character_event = {
	id = Plus.105
	desc = EVTDESC_Plus_105
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = EVTOPTA_Plus_105 # A minor estate

		trigger = {
			wealth >= 50

			FROM = {
				NOT = { has_character_modifier = estates_1 }
			}
		}

		wealth = -50

		FROM = {
			show_scope_change = no

			opinion = {
				name = opinion_granted_minor_estate
				who = ROOT
				years = 100
			}

			if = {
				limit = { NOT = { has_character_modifier = estates_1 } }

				add_character_modifier = {
					name = estates_1
					duration = -1
				}

				hidden_effect = {
					give_minor_title = title_lord
				}
			}
		}
	}

	option = {
		name = EVTOPTD_Plus_105 # None at all!
	}
}

# Relative demands estates due to his ambition
character_event = {
	id = Plus.106

	is_triggered_only = yes # on_yearly_pulse, random_events
	hide_window = yes

	min_age = 20
	only_capable = yes
	prisoner = no

	trigger = {
		has_ambition = obj_gain_estates_1
		is_ruler = no

		liege = {
			OR = {
				is_close_relative = ROOT
				dynasty = ROOT
			}

			wealth >= 50
			war = no
		}

		NOR = {
			trait = eunuch
			trait = monk
			trait = nun
			has_minor_title = title_guru
			has_character_flag = flag_denied_estates
			is_married = liege
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 0.1
			NOT = { is_close_relative = liege }
		}

		mult_modifier = {
			factor = 2
			liege = { wealth >= 250 }
		}

		mult_modifier = {
			factor = 2
			liege = { wealth >= 500 }
		}

		mult_modifier = {
			factor = 2
			trait = greedy
		}

		mult_modifier = {
			factor = 2
			trait = ambitious
		}

		mult_modifier = {
			factor = 2
			trait = diligent
		}

		mult_modifier = {
			factor = 0.2
			trait = slothful
		}

		mult_modifier = {
			factor = 0.2
			trait = content
		}

		mult_modifier = {
			factor = 0.2
			trait = charitable
		}
	}

	immediate = {
		liege = {
			character_event = {
				id = Plus.107 # Ask liege for estates
				days = 3
			}
		}
	}
}

# Liege responds to the request
character_event = {
	id = Plus.107
	desc = EVTDESC_Plus_107
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = EVTOPTA_Plus_107 # Give him what he wants

		trigger = { wealth >= 50 }

		wealth = -50

		FROM = {
			show_scope_change = no

			opinion = {
				name = opinion_granted_minor_estate
				who = ROOT
				years = 100
			}

			add_character_modifier = {
				name = estates_1
				duration = -1
			}

			hidden_effect = {
				give_minor_title = title_lord
			}
		}

		ai_chance = {
			factor = 10

			trigger = {
				NOT = { has_character_modifier = ai_austerity }
			}

			mult_modifier = {
				factor = 0.1
				trait = greedy
			}

			mult_modifier = {
				factor = 10
				trait = charitable
			}

			mult_modifier = {
				factor = 2
				wealth >= 100
			}

			mult_modifier = {
				factor = 2
				wealth >= 200
			}

			mult_modifier = {
				factor = 2
				wealth >= 300
			}

			mult_modifier = {
				factor = 2
				wealth >= 400
			}

			mult_modifier = {
				factor = 2
				wealth >= 500
			}

			mult_modifier = {
				factor = 5
				is_parent_of = FROM
			}

			mult_modifier = {
				factor = 10
				FROM = { is_primary_heir = yes }
			}
		}
	}

	option = {
		name = EVTOPTB_Plus_107 # Say you can't afford it

		FROM = {
			show_scope_change = no

			opinion = {
				name = opinion_denied_estates
				who = ROOT
				months = 240
			}

			tooltip = { cancel_ambition = yes }
			set_character_flag = flag_denied_estates
		}

		ai_chance = { factor = 90 }
	}
}

# Character buys estates if they have the money (on-action bi-yearly pulse event)
character_event = {
	id = Plus.108

	is_triggered_only = yes
	hide_window = yes

	min_age = 16
	only_capable = yes
	prisoner = no
	ai = yes

	trigger = {
		wealth >= 50
		is_ruler = no

		trigger_if = {
			limit = { is_female = yes }

			liege = {
				OR = {
					has_law = true_cognatic_succession
					has_law = enatic_cognatic_succession
					has_law = enatic_succession

					trigger_if = {
						limit = { has_law = cognatic_succession }
						is_close_relative = ROOT
					}
				}
			}
		}

		liege = {
			is_nomadic = no
			is_tribal = no
		}

		NOR = {
			any_spouse = { is_ruler = yes }
			trait = eunuch
			trait = blinded
			trait = monk
			trait = nun
			has_minor_title = title_guru
			has_character_modifier = planning_claimant_adventure
		}
	}

	weight_multiplier = {
		days = 1
	}

	immediate = {
		wealth = -50

		add_character_modifier = {
			name = estates_1
			duration = -1
		}

		give_minor_title = title_lord
	}
}

# Ruler sells off estates (on-action bi-yearly pulse event)
character_event = {
	id = Plus.109
	desc = EVTDESC_Plus_109
	picture = GFX_evt_council

	is_triggered_only = yes # TODO: Move to on_new_holder on_action?

	only_rulers = yes

	trigger = {
		has_character_modifier = estates_1
	}

	weight_multiplier = {
		days = 1
	}

	option = {
		name = OK

		if = {
			limit = { has_character_modifier = estates_1 }
			remove_character_modifier = estates_1
			wealth = 40
		}
	}
}

# Estates Removal Upon Exile (on-action event)
character_event = {
	id = Plus.110
	desc = EVTDESC155
	picture = GFX_evt_carriage

	is_triggered_only = yes

	immediate = {
		remove_character_modifier = estates_1
	}

	option = {
		name = OK
	}
}

# Estates Succession On Character Death (on-action event)
character_event = {
	id = Plus.111

	is_triggered_only = yes
	hide_window = yes

	ai = yes

	trigger = {
		has_character_modifier = estates_1
		is_ruler = no
	}

	immediate = {
		# Deal with first rank of estates
		if = {
			limit = {
				any_child = {
					OR = {
						trigger_if = {
							limit = { is_female = no }
							ROOT = { liege = { has_law = agnatic_succession } }
						}
						trigger_else = {
							ROOT = { liege = { has_law = enatic_succession } }
						}

						ROOT = {
							liege = {
								has_law = cognatic_succession
								has_law = true_cognatic_succession
								has_law = enatic_cognatic_succession
							}
						}
					}

					has_inheritance_blocker = no
					NOT = { has_character_flag = received_estate }
				}
			}

			random_child = {
				limit = {
					OR = {
						trigger_if = {
							limit = { is_female = no }
							ROOT = { liege = { has_law = agnatic_succession } }
						}
						trigger_else = {
							ROOT = { liege = { has_law = enatic_succession } }
						}

						ROOT = {
							liege = {
								has_law = cognatic_succession
								has_law = true_cognatic_succession
								has_law = enatic_cognatic_succession
							}
						}
					}

					has_inheritance_blocker = no

					NOR = {
						has_character_flag = received_estate

						any_sibling = {
							is_older_than = PREV

							OR = {
								trigger_if = {
									limit = { is_female = no }
									ROOT = { liege = { has_law = agnatic_succession } }
								}
								trigger_else = {
									ROOT = { liege = { has_law = enatic_succession } }
								}

								ROOT = {
									liege = {
										has_law = cognatic_succession
										has_law = true_cognatic_succession
										has_law = enatic_cognatic_succession
									}
								}
							}

							has_inheritance_blocker = no
							NOT = { has_character_flag = received_estate }
						}
					}
				}

				set_character_flag = received_estate

				if = {
					limit = {
						is_ruler = no
						NOT = { has_character_modifier = estates_1 }
					}

					add_character_modifier = {
						name = estates_1
						duration = -1
					}

					hidden_effect = {
						give_minor_title = title_lord
					}
				}
			}

			ROOT = {
				if = {
					limit = { has_character_modifier = estates_1 }
					remove_character_modifier = estates_1
				}
			}
		}

		# Remove estate flags from children
		any_child = {
			limit = { has_character_flag = received_estate }
			clr_character_flag = received_estate
		}

		# Sell off the remainder of the estates
		if = {
			limit = { has_character_modifier = estates_1 }
			remove_character_modifier = estates_1
			wealth = 40
		}
	}
}

#######################################
# GENERATE RANDOM CLAIMS
#######################################

# Generate random claim on a neighbour
character_event = {
	id = Plus.115 # formerly 1000182425
	desc = EVTDESC_Plus_115
	picture = GFX_evt_emissary

	is_triggered_only = yes

	only_rulers = yes
	war = no

	trigger = {
		OR = {
			is_feudal = yes
			is_tribal = yes
		}

		higher_real_tier_than = BARON
		has_regent = no

		any_realm_province = {
			held_under_PREV = yes

			any_neighbor_province = {
				owner = {
					religion_group = ROOT

					trigger_if = {
						limit = { same_realm = ROOT }
						same_liege = ROOT
					}

					OR = {
						is_feudal = yes
						is_tribal = yes
					}

					NOR = {
						character = ROOT
						is_vassal_or_below_of = ROOT
						is_liege_or_above_of = ROOT
					}
				}

				county = {
					NOT = { claimed_by = ROOT }
				}

				duchy = {
					NOT = { claimed_by = ROOT }

					trigger_if = {
						limit = { has_holder = yes }

						holder_scope = {
							religion_group = ROOT

							trigger_if = {
								limit = { same_realm = ROOT }
								same_liege = ROOT
							}

							OR = {
								is_feudal = yes
								is_tribal = yes
							}

							NOR = {
								character = ROOT
								is_vassal_or_below_of = ROOT
								is_liege_or_above_of = ROOT
							}
						}
					}
				}
			}
		}
	}

	weight_multiplier = {
		days = 1

		mult_modifier = {
			factor = 0.5
			ai = no
		}

		mult_modifier = {
			factor = 0.25

			is_unreformed_pagan_trigger = yes
			NOT = { has_ambition = obj_become_king }
		}

		mult_modifier = {
			factor = 1.1

			ai = no
			has_ambition = obj_become_king
		}

		mult_modifier = {
			factor = 1.2
			ai = yes
			has_ambition = obj_become_king
		}

		mult_modifier = {
			factor = 2.5 # AI doesn't fabricate claims effectively
			ai = yes
		}

		mult_modifier = {
			factor = 3.0 # Encourage AI independent counts and dukes to form Kingdoms

			independent = yes
			num_of_duke_titles < 2
			ai = yes

			OR = {
				real_tier = COUNT
				real_tier = DUKE
			}
		}

		mult_modifier = {
			factor = 1.2

			independent = yes
			trait = ambitious
		}

		mult_modifier = {
			factor = 0.5

			independent = yes
			trait = content
		}

		mult_modifier = {
			factor = 0.5 # Discourage free claims for bigger AI

			independent = yes
			real_tier = KING
			realm_size >= 35
			ai = yes
		}

		mult_modifier = {
			factor = 0.25 # Discourage free claims for bigger AI

			independent = yes
			real_tier = EMPEROR
			realm_size >= 120
			ai = yes
		}

		mult_modifier = {
			factor = 0.25
			independent = no
		}

		mult_modifier = {
			factor = 1.1
			realm_diplomacy >= 20
		}

		mult_modifier = {
			factor = 1.1
			realm_diplomacy >= 30
		}

		mult_modifier = {
			factor = 1.1
			realm_diplomacy >= 40
		}

		mult_modifier = {
			factor = 1.1
			realm_diplomacy >= 50
		}
	}

	immediate = {
		random = {
			chance = 20
			set_character_flag = duchy_claim
		}

		set_character_flag = claim_by_event
	}

	option = {
		name = EXCELLENT

		random_realm_province = {
			show_scope_change = no

			limit = {
				held_under_PREV = yes

				any_neighbor_province = {
					owner = {
						religion_group = ROOT

						trigger_if = {
							limit = { same_realm = ROOT }
							same_liege = ROOT
						}

						OR = {
							is_feudal = yes
							is_tribal = yes
						}

						NOR = {
							character = ROOT
							is_vassal_or_below_of = ROOT
							is_liege_or_above_of = ROOT
						}
					}

					county = {
						NOT = { claimed_by = ROOT }
					}

					duchy = {
						NOT = { claimed_by = ROOT }

						trigger_if = {
							limit = { has_holder = yes }

							holder_scope = {
								religion_group = ROOT

								trigger_if = {
									limit = { same_realm = ROOT }
									same_liege = ROOT
								}

								OR = {
									is_feudal = yes
									is_tribal = yes
								}

								NOR = {
									character = ROOT
									is_vassal_or_below_of = ROOT
									is_liege_or_above_of = ROOT
								}
							}
						}
					}
				}
			}

			preferred_limit = { owned_by = ROOT } # Prefer claims near demesne

			random_neighbor_province = {
				show_scope_change = no

				limit = {
					owner = {
						religion_group = ROOT

						trigger_if = {
							limit = { same_realm = ROOT }
							same_liege = ROOT
						}

						OR = {
							is_feudal = yes
							is_tribal = yes
						}

						NOR = {
							character = ROOT
							is_vassal_or_below_of = ROOT
							is_liege_or_above_of = ROOT
						}
					}

					county = {
						NOT = { claimed_by = ROOT }
					}

					duchy = {
						NOT = { claimed_by = ROOT }

						trigger_if = {
							limit = { has_holder = yes }

							holder_scope = {
								religion_group = ROOT

								trigger_if = {
									limit = { same_realm = ROOT }
									same_liege = ROOT
								}

								OR = {
									is_feudal = yes
									is_tribal = yes
								}

								NOR = {
									character = ROOT
									is_vassal_or_below_of = ROOT
									is_liege_or_above_of = ROOT
								}
							}
						}
					}
				}

				if = {
					limit = {
						ROOT = { has_character_flag = duchy_claim }
						duchy = { has_holder = yes }
					}

					duchy = {
						show_scope_change = no

						add_claim = ROOT

						hidden_effect = {
							holder_scope = { character_event = { id = Plus.116 } }
						}
					}
				}
				else = {
					county = {
						show_scope_change = no

						add_claim = ROOT

						hidden_effect = {
							holder_scope = { character_event = { id = Plus.116 } }
						}
					}
				}
			}
		}

		clr_character_flag = duchy_claim
	}
}

# Neighbor is informed of the claim
character_event = {
	id = Plus.116
	picture = GFX_evt_emissary
	desc = EVTDESC_Plus_116

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA_Plus_116
	}
}

#######################################
# ABDICATION
# Written by Rylock
#######################################

# Ruler considers Abdication
character_event = {
	id = Plus.120
	desc = EVTDESC_Plus_120
	picture = GFX_evt_recovery

	is_triggered_only = yes

	option = {
		name = EVTOPTA_Plus_120 # Go ahead and abdicate

		hidden_effect = {
			current_heir = {
				character_event = {
					id = Plus.121
					days = 1
				}
			}
		}

		if = {
			limit = { is_priest = yes }
			set_character_flag = was_priest
		}

		# Renew tributes automatically
		any_independent_ruler = {
			limit = {
				pays_tribute_to = ROOT

				NOR = {
					is_tributary = { type = imperial suzerain = ROOT }
					is_tributary = { type = permanent suzerain = ROOT }
					is_tributary = { type = offmap suzerain = ROOT }
					is_tributary = { type = nomadic suzerain = ROOT }
				}
			}

			ROOT = {
				current_heir = { save_event_target_as = abdicate_heir }
			}

			if = {
				limit = {
					OR = {
						is_tributary = {
							type = voluntary
							suzerain = ROOT
						}

						is_tributary = {
							type = default
							suzerain = ROOT
						}
					}
				}

				set_character_flag = is_voluntary_tributary
			}
			else_if = {
				limit = {
					is_tributary = {
						type = forced
						suzerain = ROOT
					}
				}
				set_character_flag = is_forced_tributary
			}
			else_if = {
				limit = {
					is_tributary = {
						type = protectorate
						suzerain = ROOT
					}
				}
				set_character_flag = is_protectorate
			}

			character_event = {
				id = Plus.420
				days = 1
			}
		}

		abdicate = yes

		if = {
			limit = { NOT = { trait = content } }
			add_trait = content
		}

		if = {
			limit = {
				religion_group = christian

				OR = {
					trait = zealous
					trait = humble
					has_character_flag = was_priest
				}
			}

			set_christian_ascetic_effect = yes
		}
		else = {
			add_trait = abdicated
		}

		clr_character_flag = was_priest

		ai_chance = { factor = 100 }
	}

	option = {
		name = EVTOPTB_Plus_120  # Reconsider

		clr_character_flag = considering_abdication

		ai_chance = { factor = 0 }
	}
}

# Notify heir of abdication
character_event = {
	id = Plus.121
	picture = GFX_evt_council
	desc = EVTDESC_Plus_121

	is_triggered_only = yes

	option = {
		name = EVTOPTA_Plus_121

		opinion = {
			name = abdicated_for_me
			who = FROM
			years = 100
		}

		hidden_effect = {
			FROM = {
				transfer_scaled_wealth = {
					to = ROOT
					value = all
				}

				any_artifact = {
					transfer_artifact = {
						from = PREV
						to = ROOT
					}
				}

				banish = ROOT
			}
		}
	}
}

#######################################
# INFERTILITY
# Written by Rylock
#######################################

# Women who get sick have a chance of having fertility affected long-term
character_event = {
	id = Plus.125

	is_triggered_only = yes # on_yearly_pulse, random_eve
	hide_window = yes

	min_age = 16
	max_age = 45
	only_women = yes
	is_sick = yes

	trigger = {
		NOR = {
			has_character_modifier = barren
			has_character_flag = is_barren
		}

		immortal = no
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 0.67
			is_strong_trigger = yes
		}

		mult_modifier = {
			factor = 2

			OR = {
				is_weak_trigger = yes
				trait = inbred
				health < 4.1
			}
		}

		mult_modifier = {
			factor = 2
			has_epidemic = yes
		}

		mult_modifier = {
			factor = 2

			OR = {
				trait = ill
				trait = pneumonic
				trait = great_pox
				trait = wounded
			}
		}

		mult_modifier = {
			factor = 1.33
			practical_age >= 30
		}

		mult_modifier = {
			factor = 1.33
			practical_age >= 35
		}
	}

	immediate = {
		random_list = {
			30 = { }

			30 = {
				if = {
					limit = {
						NOR = {
							trait = infertile
							has_character_modifier = barren
						}
					}

					add_character_modifier = { # Temp Infertility
						name = infertile
						years = 5
					}
				}
			}

			30 = {
				if = {
					limit = { trait = infertile }

					remove_trait = infertile
					set_character_flag = is_barren

					add_character_modifier = {
						name = barren
						duration = -1
					}
				}
				else_if = {
					limit = { NOT = { has_character_modifier = barren } }
					add_trait = infertile
				}
			}

			10 = {
				if = {
					limit = { NOT = { has_character_modifier = barren } }

					remove_trait = infertile
					set_character_flag = is_barren

					add_character_modifier = {
						name = barren
						duration = -1
					}
				}
			}
		}
	}
}

# Woman is married and suspects she might be barren
character_event = {
	id = Plus.126
	picture = GFX_evt_recovery
	desc = EVTDESC_Plus_126

	is_triggered_only = yes # on_yearly_pulse, random_eve

	has_character_flag = is_barren
	only_women = yes
	min_age = 16
	max_age = 45
	prisoner = no
	only_capable = yes

	trigger = {
		has_character_modifier = barren
		has_children = no

		OR = {
			is_married = yes
			is_consort = yes
		}

		NOR = {
			trait = celibate
			has_character_flag = knows_barren
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 0.5
			practical_age < 20
		}

		mult_modifier = {
			factor = 0.5
			practical_age < 25
		}

		mult_modifier = {
			factor = 1.33
			practical_age >= 30
		}

		mult_modifier = {
			factor = 2

			is_married = yes
			is_lover = spouse
		}

		mult_modifier = {
			factor = 2
			is_smart_trigger = yes
		}

		mult_modifier = {
			factor = 0.5
			is_dumb_trigger = yes
		}
	}

	immediate = {
		set_character_flag = knows_barren
	}

	option = {
		name = EVTOPTA_Plus_126 # I don't care about the risk

		random_list = {
			40 = {}

			10 = {
				custom_tooltip = {
					text = REMOVE_BARREN_SUCCESS

					clr_character_flag = is_barren
					remove_character_modifier = barren
				}
			}

			30 = {
				custom_tooltip = {
					text = REMOVE_BARREN_BUT_INFERTILE

					clr_character_flag = is_barren
					remove_character_modifier = barren
					add_trait = infertile
				}
			}

			13 = {
				if = {
					limit = {
						NOT = { trait = wounded }
						can_be_maimed_trigger = yes
					}

					add_trait_wounded_effect = yes
				}
			}

			5 = {
				if = {
					limit = {
						NOT = { trait = wounded }
						can_be_maimed_trigger = yes
					}

					add_maimed_trait_effect = yes
				}
			}

			2 = {
				death = { death_reason = death_accident }
			}
		}

		ai_chance = {
			factor = 50

			mult_modifier = {
				factor = 0.5
				trait = craven
			}

			mult_modifier = {
				factor = 0.5
				trait = paranoid
			}

			mult_modifier = {
				factor = 1.5
				trait = brave
			}

			mult_modifier = {
				factor = 2
				is_lover = ROOT
			}

			mult_modifier = {
				factor = 1.5

				is_married = yes
				opinion = { who = spouse value >= 25 }
			}

			mult_modifier = {
				factor = 1.5

				is_married = yes
				opinion = { who = spouse value >= 50 }
			}

			mult_modifier = {
				factor = 1.5

				is_married = yes
				opinion = { who = spouse value >= 75 }
			}
		}
	}

	option = {
		name = EVTOPTB_Plus_126 # I will put my faith in God

		trigger = {
			piety >= 0
			NOT = { trait = cynical }
		}

		piety = 10

		random_list = {
			80 = {}

			5 = {
				custom_tooltip = {
					text = REMOVE_BARREN_SUCCESS

					clr_character_flag = is_barren
					remove_character_modifier = barren
				}
			}

			15 = {
				custom_tooltip = {
					text = REMOVE_BARREN_BUT_INFERTILE

					clr_character_flag = is_barren
					remove_character_modifier = barren
					add_trait = infertile
				}
			}
		}

		ai_chance = {
			factor = 30

			mult_modifier = {
				factor = 2
				trait = zealous
			}

			mult_modifier = {
				factor = 2
				trait = humble
			}
		}
	}

	option = {
		name = EVTOPTC_Plus_126 # He will get no child from me

		random = {
			chance = 30
			add_trait_partially_deceitful_effect = yes
		}

		ai_chance = {
			factor = 20

			mult_modifier = {
				factor = 0.5
				trait = honest
			}

			mult_modifier = {
				factor = 2
				trait = deceitful
			}

			mult_modifier = {
				factor = 2
				trait = slothful
			}

			mult_modifier = {
				factor = 3
				is_rival = spouse
			}

			mult_modifier = {
				factor = 1.5

				is_married = yes
				opinion = { who = spouse value < 0 }
			}

			mult_modifier = {
				factor = 1.5

				is_married = yes
				opinion = { who = spouse value < -25 }
			}

			mult_modifier = {
				factor = 2

				is_married = yes
				opinion = { who = spouse value < -50 }
			}
		}
	}
}

# Husband suspects wife is barren
character_event = {
	id = Plus.127
	picture = GFX_evt_recovery
	desc = EVTDESC_Plus_127

	is_triggered_only = yes # on_yearly_pulse, random_eve

	only_rulers = yes
	is_married = yes
	only_men = yes
	prisoner = no
	only_capable = yes
	max_age = 75

	trigger = {
		fertility >= 0.1
		is_dumb_trigger = no

		NOR = {
			trait = celibate
			trait = eunuch
		}

		any_spouse = {
			has_character_modifier = barren

			NOR = {
				any_child = { is_child_of = ROOT }
				has_character_flag = husband_knows_barren
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 1.33
			practical_age >= 30
		}

		mult_modifier = {
			factor = 2
			any_spouse = { has_character_flag = knows_barren }
		}

		mult_modifier = {
			factor = 2

			any_spouse = {
				is_lover = ROOT
				has_character_modifier = barren
			}
		}

		mult_modifier = {
			factor = 2

			OR = {
				learning >= 12
				is_smart_trigger = yes
			}
		}
	}

	immediate = {
		random_spouse = {
			limit = {
				has_character_modifier = barren

				NOR = {
					any_child = { is_child_of = ROOT }
					has_character_flag = husband_knows_barren
				}
			}

			save_event_target_as = barren_wife
		}
	}

	option = {
		name = EVTOPTA_Plus_127

		opinion = {
			name = knows_barren
			who = event_target:barren_wife
			years = 100
		}

		event_target:barren_wife = {
			show_scope_change = no

			set_character_flag = husband_knows_barren

			if = {
				limit = { is_lover = ROOT }
				remove_lover = ROOT
			}
		}
	}
}

### Add barren modifier

# ROOT is employee
# FROM is employer's marriage party
character_event = {
	id = Plus.128

	is_triggered_only = yes # on_marriage, MAKE_CONSORT_INTERACTION_ACCEPT_EVENT, OFFER_CONSORT_INTERACTION_ACCEPT_EVENT
	hide_window = yes

	trigger = {
		FROM = {
			has_character_flag = is_barren
			NOT = { has_character_modifier = barren }
			is_pregnant = no
			immortal = no
		}
	}

	immediate = {
		FROM = {
			remove_trait = infertile

			add_character_modifier = {
				name = barren
				duration = -1
				hidden = yes
			}
		}
	}
}

# ROOT is consort
# FROM took ROOT consort
character_event = {
	id = Plus.129

	is_triggered_only = yes # on_forced_consort
	hide_window = yes

	trigger = {
		ROOT = {
			has_character_flag = is_barren
			NOT = { has_character_modifier = barren }
			is_pregnant = no
			immortal = no
		}
	}

	immediate = {
		ROOT = {
			remove_trait = infertile

			add_character_modifier = {
				name = barren
				duration = -1
				hidden = yes
			}
		}
	}
}

#######################################
# VASSAL ASKS FOR KING TITLE
# Written by Rylock
#######################################

# Liege holds too many king titles in an uncentralized realm
# TODO: Turn into decision?
character_event = {
	id = Plus.130
	desc = EVTDESC_Plus_130
	picture = GFX_evt_council

	is_triggered_only = yes # on_yearly_pulse, random_events

	only_playable = yes
	min_age = 16
	only_capable = yes
	prisoner = no
	war = no

	trigger = {
		independent = no
		is_feudal = yes
		religion = liege

		trigger_if = {
			limit = { real_tier = COUNT }
			num_of_count_titles >= 3
		}
		trigger_else = {
			real_tier = DUKE
		}

		# Liege is an uncrowned or incapable king/emperor with at least three king titles & two counties
		liege = {
			OR = {
				trait = uncrowned
				is_incapable = yes

				AND = {
					prisoner = yes
					host = { character = ROOT }
				}
			}

			higher_real_tier_than = DUKE
			num_of_king_titles >= 3
			num_of_count_titles >= 2
			war = no
			is_feudal = yes
		}

		OR = {
			trait = ambitious
			trait = envious
			opinion = { who = liege value < -50 }
		}

		NOR = {
			trait = content
			trait = craven
			trait = humble
			is_dumb_trigger = yes
			has_character_flag = demanded_king_title
			any_heir_title = { higher_real_tier_than = DUKE }
			any_demesne_title = { temporary = yes }
		}

		# The liege has a spare king title
		liege = {
			any_demesne_title = {
				real_tier = KING
				is_titular = no
				can_be_given_away = yes

				# which does not have his capital
				PREV = {
					capital_scope = {
						kingdom = { NOT = { title = PREVPREVPREV } }
					}
				}

				# but has the duke's capital
				ROOT = {
					capital_scope = {
						kingdom = { title = PREVPREVPREV }
					}

					NOT = {
						any_heir_title = { title = PREVPREV }
					}
				}

				# and has low crown authority
				OR = {
					has_law = crown_authority_0
					has_law = crown_authority_1
				}
			}

			trigger_if = {
				limit = { real_tier = KING }

				reverse_opinion = {
					who = ROOT
					value < 0
				}
			}
			trigger_else = { # Must be emperor, by elimination
				reverse_opinion = {
					who = ROOT
					value < 25
				}
			}

			NOR = {
				reverse_has_truce = ROOT
				has_non_aggression_pact_with = ROOT
				reverse_has_opinion_modifier = { who = ROOT name = opinion_coerced_into_leaving_faction }
				has_character_flag = king_title_demanded
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 2
			trait = ambitious
		}

		mult_modifier = {
			factor = 1.33
			trait = envious
		}

		mult_modifier = {
			factor = 0.67
			trait = kind
		}

		mult_modifier = {
			factor = 0.67
			trait = charitable
		}

		mult_modifier = {
			factor = 0.33
			prestige < 100
		}

		mult_modifier = {
			factor = 1.33
			prestige >= 1000
		}

		mult_modifier = {
			factor = 0.67
			NOT = { culture = liege }
		}

		mult_modifier = {
			factor = 2

			OR = {
				leads_faction = yes
				in_faction = faction_court
			}
		}

		mult_modifier = {
			factor = 0.2
			relative_power_to_liege < 0.1
		}

		mult_modifier = {
			factor = 2
			relative_power_to_liege >= 0.5
		}

		mult_modifier = {
			factor = 2
			relative_power_to_liege >= 1.0
		}

		mult_modifier = {
			factor = 2
			liege = { num_of_king_titles >= 4 }
		}
	}

	immediate = {
		set_character_flag = demanded_king_title

		# The liege has a spare king title
		liege = {
			random_demesne_title = {
				limit = {
					real_tier = KING
					is_titular = no
					can_be_given_away = yes

					# which does not have his capital
					PREV = {
						capital_scope = {
							kingdom = { NOT = { title = PREVPREVPREV } }
						}
					}

					# but has the duke's capital
					ROOT = {
						capital_scope = {
							kingdom = { title = PREVPREVPREV }
						}

						NOT = {
							any_heir_title = { title = PREVPREV }
						}
					}

					# and has low crown authority
					OR = {
						has_law = crown_authority_0
						has_law = crown_authority_1
					}
				}

				save_event_target_as = petitioned_title
			}
		}
	}

	option = {
		name = EVTOPTA_Plus_130 # Make the demand

		liege = {
			show_scope_change = no

			log = "[Root.GetBestName] has demanded that [This.GetBestName] surrender [petitioned_title.GetName], as [This.GetSheHe] has too many."
			set_character_flag = king_title_demanded

			character_event = {
				id = Plus.131
				tooltip = demand_kingdom_title
			}
		}
	}

	option = {
		name = EVTOPTB_Plus_130 # No, leave it be

		random = {
			chance = 30
			add_trait_fully_content_effect = yes
		}

		ai_chance = { factor = 0 }
	}
}

# liege receives the demand for a king title
character_event = {
	id = Plus.131
	desc = EVTDESC_Plus_131
	picture = GFX_evt_emissary

	is_triggered_only = yes

	immediate = {
		random_child = {
			limit = {
				is_alive = yes
				is_adult = yes
				same_realm = ROOT

				trigger_if = {
					limit = { is_female = no }

					event_target:petitioned_title = {
						NOR = {
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}
					}
				}
				trigger_else = {
					event_target:petitioned_title = {
						NOR = {
							has_law = cognatic_succession
							has_law = agnatic_succession
						}
					}
				}

				NOR = {
					real_tier = KING
					character = FROM
					is_primary_heir = ROOT
				}
			}

			save_event_target_as = child_recipient
		}

		event_target:petitioned_title = {
			if = {
				limit = {
					any_claimant = {
						has_strong_claim = PREV
						same_realm = ROOT
						is_adult = yes
						lower_real_tier_than = KING

						NOR = {
							is_child_of = ROOT
							character = FROM
							is_primary_heir = ROOT
						}
					}
				}

				random_realm_character = { # TODO: Replace with 'random_claimant' if Paradox come to their senses
					limit = {
						has_strong_claim = PREV
						same_realm = ROOT
						is_adult = yes
						lower_real_tier_than = KING

						NOR = {
							is_child_of = ROOT
							character = FROM
							is_primary_heir = ROOT
						}
					}

					save_event_target_as = claimant_recipient
				}
			}
			else = {
				random_pretender = {
					limit = {
						same_realm = ROOT
						is_adult = yes
						lower_real_tier_than = KING

						NOR = {
							is_child_of = ROOT
							character = FROM
							is_primary_heir = ROOT
						}
					}

					save_event_target_as = pretender_recipient
				}
			}
		}
	}

	option = {
		name = EVTOPTA_Plus_131 # Give it to him

		reverse_opinion = {
			name = opinion_granted_kingdom
			who = FROM
			years = 200
		}

		prestige = -200

		event_target:petitioned_title = {
			show_scope_change = no

			log = "[Root.GetBestName] has agreed to surrender [This.GetFullName] to [From.GetBestName]."
			grant_title = FROM

			hidden_effect = {
				remove_claim = ROOT
				add_weak_pressed_claim = ROOT

				if = {
					limit = { ROOT = { real_tier = EMPEROR } }

					FROM = {
						set_defacto_liege = ROOT
						pf_liege_change_effect = yes
					}
				}
			}
		}

		pf_court_plus4_effect = yes
		pf_glory_plus2_effect = yes

		ai_chance = {
			factor = 50

			mult_modifier = {
				factor = 0.75
				opinion = { who = FROM value < -25 }
			}

			mult_modifier = {
				factor = 0.75
				opinion = { who = FROM value < -50 }
			}

			mult_modifier = {
				factor = 0.75
				opinion = { who = FROM value < -75 }
			}

			mult_modifier = {
				factor = 1.5
				opinion = { who = FROM value >= 25 }
			}

			mult_modifier = {
				factor = 1.5
				opinion = { who = FROM value >= 50 }
			}

			mult_modifier = {
				factor = 1.5
				dynasty = FROM
			}

			mult_modifier = {
				factor = 0.75
				NOT = { culture = FROM }
			}

			mult_modifier = {
				factor = 0.5
				NOT = { culture_group = FROM }
			}

			mult_modifier = {
				factor = 2
				relative_power = { who = FROM power < 1.0 }
			}

			mult_modifier = {
				factor = 1.5
				relative_power = { who = FROM power < 0.5 }
			}
		}
	}

	option = {
		name = EVTOPTB_Plus_131 # Give it to one of my children instead

		trigger = {
			trigger_if = {
				limit = { prisoner = yes }
				host = { NOT = { character = FROM } }
			}

			event_target:child_recipient = { always = yes }
		}

		prestige = -100

		hidden_effect = {
			FROM = {
				letter_event = {
					id = Plus.133
					days = 3
				}
			}
		}

		event_target:child_recipient = {
			show_scope_change = no

			hidden_effect = {
				reverse_opinion = {
					name = jealous
					who = FROM
					years = 20
				}
			}

			opinion = {
				name = opinion_granted_kingdom
				who = ROOT
				years = 200
			}
		}

		event_target:petitioned_title = {
			show_scope_change = no

			hidden_effect = {
				if = {
					limit = { NOT = { claimed_by = FROM } }
					add_claim = FROM
				}
			}

			log = "[Root.GetBestName] has granted [This.GetFullName] to [PrevPrev.GetBestName] instead."
			grant_title = event_target:child_recipient

			hidden_effect = {
				remove_claim = ROOT
				add_weak_pressed_claim = ROOT
			}
		}

		if = {
			limit = { ROOT = { real_tier = EMPEROR } }
			set_defacto_liege = ROOT
			pf_liege_change_effect = yes
		}

		pf_court_plus2_effect = yes
		pf_glory_plus2_effect = yes

		ai_chance = { factor = 200 }
	}

	option = {
		name = EVTOPTC_Plus_131 # Give it to someone in line for the title

		trigger = {
			event_target:pretender_recipient = { always = yes }

			trigger_if = {
				limit = { prisoner = yes }
				host = { NOT = { character = FROM } }
			}
		}

		prestige = -200

		hidden_effect = {
			FROM = {
				letter_event = {
					id = Plus.133
					days = 3
				}
			}

			opinion = {
				name = jealous
				who = event_target:pretender_recipient
				years = 20
			}
		}

		reverse_opinion = {
			name = opinion_granted_kingdom
			who = event_target:pretender_recipient
			years = 200
		}

		event_target:petitioned_title = {
			show_scope_change = no

			hidden_effect = {
				if = {
					limit = { NOT = { claimed_by = FROM } }
					add_claim = FROM
				}
			}

			log = "[Root.GetBestName] has granted [This.GetFullName] to [PrevPrev.GetBestName] instead."
			grant_title = event_target:pretender_recipient

			hidden_effect = {
				remove_claim = ROOT
				add_weak_pressed_claim = ROOT
			}
		}

		if = {
			limit = { ROOT = { real_tier = EMPEROR } }

			set_defacto_liege = ROOT
			pf_liege_change_effect = yes
		}

		pf_court_plus2_effect = yes
		pf_glory_plus2_effect = yes

		ai_chance = { factor = 50 }
	}

	option = {
		name = EVTOPTD_Plus_131 # Give it to a claimant

		trigger = {
			event_target:claimant_recipient = { always = yes }

			trigger_if = {
				limit = { prisoner = yes }
				host = { NOT = { character = FROM } }
			}
		}

		prestige = -200

		hidden_effect = {
			FROM = {
				letter_event = {
					id = Plus.133
					days = 3
				}
			}

			opinion = {
				name = jealous
				who = event_target:claimant_recipient
				years = 20
			}
		}

		reverse_opinion = {
			name = opinion_granted_kingdom
			who = event_target:claimant_recipient
			years = 200
		}

		event_target:petitioned_title = {
			show_scope_change = no

			hidden_effect = {
				if = {
					limit = { NOT = { claimed_by = FROM } }
					add_claim = FROM
				}
			}

			log = "[Root.GetBestName] has granted [Prev.GetFullName] to [This.GetBestName] instead."
			grant_title = event_target:claimant_recipient

			hidden_effect = {
				remove_claim = ROOT
				add_weak_pressed_claim = ROOT
			}
		}

		pf_court_plus2_effect = yes
		pf_glory_plus2_effect = yes

		ai_chance = { factor = 100 }
	}

	option = {
		name = EVTOPTE_Plus_131 # Never! The title is mine!

		trigger = {
			is_incapable = no

			trigger_if = {
				limit = { prisoner = yes }
				host = { NOT = { character = FROM } }
			}
		}

		log = "[Root.GetBestName] has refused the demand from [From.GetBestName] for a kingdom."

		FROM = {
			show_scope_change = no

			letter_event = {
				id = Plus.132
				days = 3
				tooltip = refuse_kingdom_title
			}
		}

		pf_court_minus2_effect = yes
		pf_glory_minus2_effect = yes

		ai_chance = {
			factor = 100

			trigger = { has_regent = no }

			mult_modifier = {
				factor = 4
				real_tier = KING
			}

			mult_modifier = {
				factor = 0.5
				num_of_king_titles >= 4
			}

			mult_modifier = {
				factor = 0.5
				num_of_king_titles >= 5
			}

			mult_modifier = {
				factor = 10
				trait = ambitious
			}

			mult_modifier = {
				factor = 5
				trait = greedy
			}

			mult_modifier = {
				factor = 3
				trait = proud
			}

			mult_modifier = {
				factor = 0.5
				trait = content
			}

			mult_modifier = {
				factor = 0.5
				trait = humble
			}

			mult_modifier = {
				factor = 0.5
				trait = charitable
			}

			mult_modifier = {
				factor = 0.5
				trait = craven
			}
		}
	}
}

# liege has refused to give up the title at all
letter_event = {
	id = Plus.132
	desc = EVTDESC_Plus_132

	is_triggered_only = yes

	option = {
		name = EVTOPTA_Plus_132

		opinion = {
			name = opinion_denied_title
			who = FROM
			years = 20
		}

		add_pressed_claim = event_target:petitioned_title

		FROM = {
			show_scope_change = no

			any_vassal = {
				show_scope_change = no

				limit = {
					likes_better_than = {
						who = ROOT
						than = FROM
					}

					has_regent = no

					NOR = {
						character = ROOT
						is_primary_heir = FROM
					}
				}

				opinion = {
					name = refused_to_give_up_title
					who = FROM
					years = 5
				}

				opinion = {
					name = sympathetic_to_cause
					who = ROOT
					years = 5
				}
			}
		}
	}
}

# liege gave the title to someone else
letter_event = {
	id = Plus.133
	desc = EVTDESC_Plus_133

	is_triggered_only = yes

	option = {
		name = EVTOPTA_Plus_133

		opinion = {
			name = opinion_denied_title
			who = FROM
			years = 5
		}
	}
}

#######################################
# ANTIPOPE EVENTS
# Written by Rylock
#######################################

# Vassal reacts to the antipope
character_event = {
	id = Plus.135
	desc = EVTDESC_Plus_135
	picture = GFX_evt_pope_feast
	border = GFX_event_normal_frame_religion

	only_playable = yes
	religion_group = christian
	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		independent = no
		religion = liege

		OR = {
			religion = catholic
			religion = fraticelli
		}

		liege = {
			independent = yes

			rightful_religious_head_scope = {
				is_antipope = yes
				is_vassal_or_below_of = PREV
				NOT = { character = ROOT }
			}
		}

		religion_head = {
			religion = ROOT
		}

		NOT = { has_character_flag = took_sides_antipope }
	}

	mean_time_to_happen = {
		days = 10
	}

	immediate = {
		set_character_flag = took_sides_antipope
	}

	option = {
		name = EVTOPTA_Plus_135 # I support my liege

		trigger = {
			NOT = { in_faction = faction_antiking }
		}

		set_character_flag = supports_the_antipope

		religion_head = {
			show_scope_change = no

			opinion = {
				name = opinion_supports_antipope
				who = ROOT
				years = 20
			}

			reverse_opinion = {
				name = opinion_supports_antipope
				who = ROOT
				years = 20
			}
		}

		rightful_religious_head_scope = {
			show_scope_change = no

			opinion = {
				name = opinion_supports_me_antipope
				who = ROOT
				years = 20
			}

			reverse_opinion = {
				name = opinion_supports_me_antipope
				who = ROOT
				years = 20
			}
		}

		liege = {
			show_scope_change = no

			opinion = {
				name = opinion_supports_me_antipope
				who = ROOT
				years = 10
			}

			reverse_opinion = {
				name = opinion_supports_me_antipope
				who = ROOT
				years = 10
			}
		}

		ai_chance = {
			factor = 40

			trigger = {
				religion_head = {
					NOT = { is_friend = ROOT }
				}

				rightful_religious_head_scope = {
					ROOT = { NOT = { excommunicated_for = PREV } }
				}
			}

			mult_modifier = {
				factor = 0.1
				rightful_religious_head_scope = { is_rival = ROOT }
			}

			mult_modifier = {
				factor = 0.5
				trait = cynical
			}

			mult_modifier = {
				factor = 0.5
				trait = zealous
			}

			mult_modifier = {
				factor = 0.5

				religion_head = {
					ROOT = {
						likes_better_than = { who = PREV than = liege }
					}
				}
			}

			mult_modifier = {
				factor = 2

				religion_head = {
					ROOT = {
						likes_better_than = { who = liege than = PREV }
					}
				}
			}

			mult_modifier = {
				factor = 1.5

				religion_head = {
					ROOT = {
						opinion_diff = { first = liege second = PREV value >= 25 }
					}
				}
			}

			mult_modifier = {
				factor = 1.5

				religion_head = {
					ROOT = {
						opinion_diff = { first = liege second = PREV value >= 50 }
					}
				}
			}

			mult_modifier = {
				factor = 1.5

				religion_head = {
					ROOT = {
						opinion_diff = { first = liege second = PREV value >= 75 }
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTB_Plus_135 # I support the pope

		set_character_flag = opposes_the_antipope

		religion_head = {
			show_scope_change = no

			opinion = {
				name = opinion_opposes_antipope
				who = ROOT
				years = 20
			}

			reverse_opinion = {
				name = opinion_opposes_antipope
				who = ROOT
				years = 20
			}
		}

		rightful_religious_head_scope = {
			show_scope_change = no

			opinion = {
				name = opinion_opposes_me_antipope
				who = ROOT
				years = 20
			}

			reverse_opinion = {
				name = opinion_opposes_me_antipope
				who = ROOT
				years = 20
			}
		}

		liege = {
			show_scope_change = no

			opinion = {
				name = opinion_opposes_me_antipope
				who = ROOT
				years = 10
			}

			reverse_opinion = {
				name = opinion_opposes_me_antipope
				who = ROOT
				years = 10
			}
		}

		ai_chance = {
			factor = 40

			trigger = {
				religion_head = {
					NOT = { is_rival = ROOT }
				}

				religion_head = {
					ROOT = { NOT = { excommunicated_for = PREV } }
				}
			}

			mult_modifier = {
				factor = 0.1
				rightful_religious_head_scope = { is_friend = ROOT }
			}

			mult_modifier = {
				factor = 0.1
				is_primary_heir = liege
			}

			mult_modifier = {
				factor = 0.5
				is_close_relative = liege
			}

			mult_modifier = {
				factor = 0.5
				trait = cynical
			}

			mult_modifier = {
				factor = 2
				trait = zealous
			}

			mult_modifier = {
				factor = 2

				religion_head = {
					ROOT = {
						likes_better_than = { who = PREV than = liege }
					}
				}
			}

			mult_modifier = {
				factor = 0.5

				religion_head = {
					ROOT = {
						likes_better_than = { who = liege than = PREV }
					}
				}
			}

			mult_modifier = {
				factor = 1.5

				religion_head = {
					ROOT = {
						opinion_diff = { first = PREV second = liege value >= 25 }
					}
				}
			}

			mult_modifier = {
				factor = 1.5

				religion_head = {
					ROOT = {
						opinion_diff = { first = PREV second = liege value >= 50 }
					}
				}
			}

			mult_modifier = {
				factor = 1.5

				religion_head = {
					ROOT = {
						opinion_diff = { first = PREV second = liege value >= 75 }
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTC_Plus_135 # I have no interest in this conflict

		trigger = {
			NOT = { in_faction = faction_antiking }
		}

		religion_head = {
			show_scope_change = no

			opinion = {
				name = opinion_neutral_antipope
				who = ROOT
				years = 20
			}
		}

		ai_chance = {
			factor = 20

			trigger = {
				is_theocracy = no
				is_priest = no
				NOT = { trait = zealous }
			}

			mult_modifier = {
				factor = 4
				trait = cynical
			}

			mult_modifier = {
				factor = 2
				trait = content
			}

			mult_modifier = {
				factor = 0.5
				trait = ambitious
			}

			mult_modifier = {
				factor = 2
				is_republic = yes
			}
		}
	}
}

#######################################
# TANIST/FEUDAL ELECTIVE CLAIMS
# Written by Rylock
#######################################

# Ruler with Tanist succession dies without heir being a child
character_event = {
	id = Plus.136

	is_triggered_only = yes # on_death
	hide_window = yes

	only_rulers = yes

	trigger = {
		num_of_children >= 1

		any_demesne_title = {
			has_law = succ_tanistry
			current_heir = { NOT = { is_child_of = ROOT } }
		}
	}

	immediate = {
		any_demesne_title = {
			limit = {
				has_law = succ_tanistry
				current_heir = { NOT = { is_child_of = ROOT } }
			}

			save_event_target_as = rightful_tanist_title

			if = {
				limit = { has_law = true_cognatic_succession }

				ROOT = {
					random_child = {
						limit = {
							has_inheritance_blocker = no

							NOT = {
								any_sibling = {
									has_inheritance_blocker = no
									is_older_than = PREV
								}
							}
						}

						character_event = {
							id = Plus.137
							days = 3
						}
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_law = agnatic_succession
						has_law = cognatic_succession
					}
				}

				ROOT = {
					random_child = {
						limit = {
							is_female = no
							has_inheritance_blocker = no

							NOT = {
								any_sibling = {
									is_female = no
									has_inheritance_blocker = no
									is_older_than = PREV
								}
							}
						}

						character_event = {
							id = Plus.137
							days = 3
						}
					}
				}
			}
			else = {
				ROOT = {
					random_child = {
						limit = {
							is_female = yes
							has_inheritance_blocker = no

							NOT = {
								any_sibling = {
									is_female = yes
									has_inheritance_blocker = no
									is_older_than = PREV
								}
							}
						}

						character_event = {
							id = Plus.137
							days = 3
						}
					}
				}
			}
		}
	}
}

# Child gets a strong claim to Tanist titles
character_event = {
	id = Plus.137

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		set_character_flag = justified_claimant
		add_pressed_claim = event_target:rightful_tanist_title
	}
}

# Ruler with Feudal Elective succession dies
character_event = {
	id = Plus.138

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes

	trigger = {
		any_demesne_title = {
			OR = {
				has_law = succ_feudal_elective
				has_law = succ_byzantine_elective
				has_law = succ_hre_elective
			}
		}
	}

	immediate = {
		any_demesne_title = {
			limit = {
				OR = {
					has_law = succ_feudal_elective
					has_law = succ_byzantine_elective
					has_law = succ_hre_elective
				}

				current_heir = { NOT = { is_child_of = ROOT } }
			}

			save_event_target_as = rightful_elective_title

			if = {
				limit = { has_law = true_cognatic_succession }

				ROOT = {
					random_child = {
						limit = {
							has_inheritance_blocker = no

							NOT = {
								any_sibling = {
									has_inheritance_blocker = no
									is_older_than = PREV
								}
							}
						}

						set_character_flag = justified_claimant
					}
				}
			}
			else_if = {
				limit = {
					OR = {
						has_law = agnatic_succession
						has_law = cognatic_succession
					}
				}

				ROOT = {
					random_child = {
						limit = {
							is_female = no
							has_inheritance_blocker = no

							NOT = {
								any_sibling = {
									is_female = no
									has_inheritance_blocker = no
									is_older_than = PREV
								}
							}
						}

						set_character_flag = justified_claimant
					}
				}
			}
			else = {
				ROOT = {
					random_child = {
						limit = {
							is_female = yes
							has_inheritance_blocker = no

							NOT = {
								any_sibling = {
									is_female = yes
									has_inheritance_blocker = no
									is_older_than = PREV
								}
							}
						}

						set_character_flag = justified_claimant
					}
				}
			}
		}

		any_demesne_title = {
			limit = {
				OR = {
					has_law = succ_feudal_elective
					has_law = succ_byzantine_elective
					has_law = succ_hre_elective
				}
			}

			save_event_target_as = rightful_elective_title

			any_pretender = {
				character_event = { id = Plus.139 days = 3 }
			}
		}
	}
}

# Pretenders get a weak non-inheritable claim to Feudal Elective titles
character_event = {
	id = Plus.139

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		set_character_flag = justified_claimant

		if = {
			limit = { NOT = { has_claim = event_target:rightful_elective_title }  }
			add_weak_claim = event_target:rightful_elective_title
		}
	}
}

#######################################
# AI DIVORCE EVENTS
# Written by Rylock
#######################################

# Spouse informed of divorce
character_event = {
	id = Plus.140
	desc = EVTDESC_Plus_140
	picture = GFX_evt_quarrel

	is_triggered_only = yes

	immediate = {
		FROMFROM = { save_event_target_as = target_sender }
	}

	option = {
		name = {
			text = EVTOPTA_Plus_140
			trigger = { FROMFROM = { is_female = yes } }
		}
		name = {
			text = EVTOPTB_Plus_140
			trigger = { FROMFROM = { is_female = no } }
		}

		log = "[FromFrom.GetTitledName] divorces [Root.GetTitledName]."
		remove_spouse = FROMFROM
		prestige = -100

		opinion = {
			name = opinion_divorced
			who = event_target:target_sender
		}

		any_dynasty_member = {
			show_scope_change = no

			limit = {
				is_close_relative = ROOT
				NOT = { character = event_target:target_sender }
			}

			opinion = {
				name = opinion_divorced_relative
				who = event_target:target_sender
			}

			character_event = {
				id = Plus.141
				days = 1
			}
		}
	}
}

# Close Relatives informed of divorce
character_event = {
	id = Plus.141
	desc = EVTDESC_Plus_141
	picture = GFX_evt_quarrel

	is_triggered_only = yes

	ai = no

	option = {
		name = I_SEE
	}
}

#######################################
# CADET EVENTS
# Written by Rylock
#######################################

# Children informed of new cadet branch
character_event = {
	id = Plus.142
	desc = EVTDESC_Plus_142
	picture = GFX_evt_recieve_letter

	is_triggered_only = yes

	option = {
		name = OK

		if = {
			limit = { ai = no }

			chronicle = {
				entry = CHRONICLE_CADET_BRANCH_FORMED
				portrait = [FROM.GetID]
				picture = GFX_evt_coronation
			}
		}

		dynasty = FROM
	}
}

# Dynasty members informed of new cadet branch
character_event = {
	id = Plus.143
	desc = EVTDESC_Plus_143
	picture = GFX_evt_recieve_letter

	is_triggered_only = yes

	trigger = {
		NOT = { dynasty = FROM }
	}

	option = {
		name = OK

		if = {
			limit = {
				ai = no
				NOT = { has_character_flag = no_chronicle_update }
			}

			chronicle = {
				entry = CHRONICLE_CADET_BRANCH_FORMED
				portrait = [FROM.GetID]
				picture = GFX_evt_coronation
			}
		}

		if = {
			limit = { has_character_flag = no_chronicle_update }
			clr_character_flag = no_chronicle_update
		}

		opinion = {
			name = opinion_abandoned_dynasty
			who = FROM
			years = 20
		}
	}
}

# New cadet branch started
character_event = {
	id = Plus.144
	desc = EVTDESC_Plus_144
	picture = GFX_evt_coronation

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA_Plus_144
	}
}

# New dynasty declared by Muslim, breaking away from decadent dynasty
character_event = {
	id = Plus.145
	desc = EVTDESC_Plus_145
	picture = GFX_evt_coronation

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA_Plus_144
	}
}

# New dynasty declared by high ranking ruler
character_event = {
	id = Plus.146
	desc = EVTDESC_Plus_146
	picture = GFX_evt_coronation

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA_Plus_144
	}
}

### Inherited kingdom is destroyed if no de jure land is controlled
character_event = {
	id = Plus.1750

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		FROM = {
			real_tier = KING
			is_titular = no
			is_primary_type_title = no
			is_landless_type_title = no
		}

		OR = {
			has_global_flag = vanilla_empires
			lower_real_tier_than = EMPEROR
		}

		has_game_rule = {
			name = de_jure_requirement
			value = required
		}
	}

	immediate = {
		character_event = {
			id = Plus.1751
			days = 2
		}
	}
}

character_event = {
	id = Plus.1751
	desc = EVTDESC_Plus_1751
	title = EVTNAME_Plus_1751
	picture = GFX_evt_coronation
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes
	major = yes

	trigger = {
		FROMFROM = {
			holder = ROOT
			is_contested = no

			NOT = {
				any_de_jure_vassal_title = {
					real_tier = COUNT

					holder_scope = {
						OR = {
							character = ROOT
							is_vassal_or_below_of = ROOT
						}
					}
				}
			}
		}

		pf_war_flag_trigger = no
		pf_war_trait_trigger = no
	}

	major_trigger = {
		OR = {
			is_close_relative = ROOT
			has_claim = FROMFROM
			same_realm = ROOT

			FROMFROM = {
				num_title_realm_provs = {
					who = PREV
					value >= 1
				}

				# any_de_jure_vassal_title = {
				#	holder_scope = {
				#		OR = {
				#			character = PREVPREVPREV
				#			is_vassal_or_below_of = PREVPREVPREV
				#		}
				#	}
				# }
			}

			distance = {
				who = ROOT
				distance < 300
			}
		}
	}

	option = {
		name = EVTOPTA_Plus_1751

		trigger = { character = ROOT }

		log = "The [FromFrom.GetFullName] has been destroyed after being inherited by [Root.GetTitledName], who owns no land in [FromFrom.GetName]."
		destroy_landed_title = FROMFROM
	}

	option = {
		name = OK

		trigger = { NOT = { character = ROOT } }
	}
}

#######################################
# ANTI-BORDER GORE EVENTS
# Written by Rylock
#######################################

# Ruler returned a county they should not have been granted
character_event = {
	id = Plus.1755

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Grant the county to a neighbor, if possible
		event_target:new_title = {
			location = {
				random_neighbor_province = {
					limit = {
						owner = {
							vassal_of = ROOT
							religion = ROOT
							culture_group = ROOT
							in_revolt = no
							prisoner = no
							is_incapable = no
							NOT = { is_rival = ROOT }
							opinion = { who = ROOT value >= -25 }
							reverse_opinion = { who = ROOT value >= -25 }
							relative_power = { who = ROOT power < 1.0 }
						}
					}

					owner = {
						save_event_target_as = new_owner
						log = "---> [new_title.GetFullName] granted to [new_owner.GetBestName], a neighboring province owner."
						grant_title = event_target:new_title
						set_defacto_liege = ROOT
					}

					break = yes
				}
			}
		}

		# Grant_title to an appropriate adult dynasty member, if possible
		random_realm_character = {
			limit = {
				is_vassal_or_below_of = ROOT
				is_adult = yes
				practical_age < 50
				is_ruler = no
				prisoner = no
				is_incapable = no
				NOT = { is_rival = ROOT }

				OR = {
					dynasty = ROOT
					is_close_relative = ROOT
				}

				OR = {
					fertility >= 0.1
					has_living_children = yes
				}

				opinion = {
					who = ROOT
					value >= -25
				}

				reverse_opinion = {
					who = ROOT
					value >= -25
				}

				OR = {
					event_target:new_title = { has_law = true_cognatic_succession }

					AND = {
						is_female = no

						event_target:new_title = {
							NOR = {
								has_law = enatic_succession
								has_law = enatic_cognatic_succession
							}
						}
					}

					AND = {
						is_female = yes

						event_target:new_title = {
							NOR = {
								has_law = agnatic_succession
								has_law = cognatic_succession
							}
						}
					}
				}
			}

			save_event_target_as = new_owner
			log = "---> [new_title.GetFullName] granted to [new_owner.GetBestName], an adult dynasty member."
			grant_title = event_target:new_title
			set_defacto_liege = ROOT
			break = yes
		}

		# Grant title to an appropriate child, if possible
		random_close_relative = {
			limit = {
				is_vassal_or_below_of = ROOT

				OR = {
					is_child_of = ROOT
					is_grandchild_of = ROOT
				}

				OR = {
					fertility >= 0.1
					has_living_children = yes
				}

				is_ruler = no
				prisoner = no
				is_incapable = no
				practical_age < 50
				NOT = { is_rival = ROOT }
				opinion = { who = ROOT value >= -25 }
				reverse_opinion = { who = ROOT value >= -25 }

				trigger_if = {
					limit = { is_female = no }

					event_target:new_title = {
						NOR = {
							has_law = enatic_succession
							has_law = enatic_cognatic_succession
						}
					}
				}
				trigger_else = {
					event_target:new_title = {
						NOR = {
							has_law = agnatic_succession
							has_law = cognatic_succession
						}
					}
				}
			}

			save_event_target_as = new_owner
			log = "---> [new_title.GetFullName] granted to [new_owner.GetBestName], a child relative."
			grant_title = event_target:new_title
			set_defacto_liege = ROOT
			break = yes
		}

		# Grant title to an appropriate courtier, if possible
		random_courtier = {
			limit = {
				OR = {
					is_councillor = yes
					martial >= 8
					diplomacy >= 8
					intrigue >= 8
					stewardship >= 8
				}

				OR = {
					fertility >= 0.1
					has_living_children = yes
				}

				is_ruler = no
				prisoner = no
				opinion = { who = ROOT value = 0 }
				reverse_opinion = { who = ROOT value = 0 }
				is_incapable = no
				NOT = { is_rival = ROOT }

				trigger_if = {
					limit = { is_female = no }

					event_target:new_title = {
						NOR = {
							has_law = enatic_succession
							has_law = enatic_cognatic_succession
						}
					}
				}
				trigger_else = {
					event_target:new_title = {
						NOR = {
							has_law = agnatic_succession
							has_law = cognatic_succession
						}
					}
				}
			}

			save_event_target_as = new_owner
			log = "---> [new_title.GetFullName] granted to [new_owner.GetBestName], a capable courtier."
			grant_title = event_target:new_title
			set_defacto_liege = ROOT
			break = yes
		}

		# Final ootion
		create_character = {
			random_traits = yes
			dynasty = random
			female = no
			religion = ROOT
			culture = ROOT
		}

		new_character = {
			save_event_target_as = new_owner
			log = "---> [new_title.GetFullName] granted to [new_owner.GetBestName], a new character."
			grant_title = event_target:new_title
			set_defacto_liege = ROOT
		}
	}
}

# AI vassal has a vassal too far away
character_event = {
	id = Plus.1757

	is_triggered_only = yes
	hide_window = yes

	only_playable = yes
	ai = yes
	war = no

	trigger = {
		higher_real_tier_than = COUNT
		independent = no

		# Both my liege and I can't be involved in a war or revolt
		pf_war_trait_trigger = no
		pf_war_flag_trigger = no

		liege = {
			ai = yes
			war = no
		}

		NOT = {
			any_liege = {
				OR = {
					pf_war_flag_trigger = yes
					pf_war_trait_trigger = yes
				}
			}
		}

		# Has a vassal who holds a county too far away from mine and is not a de jure vassal of mine
		any_vassal = {
			num_of_count_titles >= 1
			war = no
			pf_war_trait_trigger = no

			NOT = {
				any_demesne_title = {
					real_tier = COUNT

					location = {
						OR = {
							duchy = { holder = ROOT }
							kingdom = { holder = ROOT }
							any_neighbor_province = { owned_by = ROOT }

							ROOT = {
								any_demesne_title = {
									real_tier = COUNT

									location = {
										distance = {
											where = PREVPREVPREV
											value < 100
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		save_event_target_as = old_liege
		liege = { save_event_target_as = current_liege }

		random_vassal = {
			limit = {
				num_of_count_titles >= 1
				war = no
				pf_war_trait_trigger = no

				NOT = {
					any_demesne_title = {
						real_tier = COUNT

						location = {
							OR = {
								duchy = { holder = ROOT }
								kingdom = { holder = ROOT }
								any_neighbor_province = { owned_by = ROOT }

								ROOT = {
									any_demesne_title = {
										real_tier = COUNT

										location = {
											distance = {
												where = PREVPREVPREV
												value < 100
											}
										}
									}
								}
							}
						}
					}
				}
			}

			save_event_target_as = reassigned_vassal
			# Temporarily assign the vassal back to my liege
			set_defacto_liege = event_target:current_liege

			event_target:current_liege = {
				reverse_remove_opinion = {
					name = opinion_vassal_transfer
					who = ROOT
				}

				character_event = { id = Plus.1758 }
			}
		}
	}
}

character_event = {
	id = Plus.1758

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Keep the vassal if not over the vassal limit
		if = {
			limit = { over_vassal_limit < 1 }

			save_event_target_as = new_liege
			log = "[reassigned_vassal.GetBestName] was too distant a vassal from [old_liege.GetBestName], and thus was re-assigned as vassal to [new_liege.GetBestName]"
		}

		# Find a closer new liege if over the vassal limit
		else = {
			random_vassal = {
				limit = {
					higher_real_tier_than = event_target:reassigned_vassal
					in_revolt = no

					NOR = {
						character = event_target:old_liege
						trait = pf_rebel
					}
				}

				# First look for a vassal who doesn't hate me, who is not too strong, and is the de jure liege or a neighbor
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal
					}

					NOT = { in_faction = faction_separatist }
					relative_power = { who = ROOT power < 1.0 }
					opinion = { who = ROOT value >= 0 }
				}

				# Then look for a de jure liege or neighbor who doesn't hate me
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal
					}

					opinion = { who = ROOT value >= 0 }
				}

				# Then look for any de jure liege or neighbor who isn't a rival
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal
					}

					NOT = { is_rival = ROOT }
				}

				# Then look for a vassal who isn't too far away, who doesn't hate me, and who isn't too strong
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal

						distance_from_realm = {
							who = event_target:reassigned_vassal
							value < 50
						}
					}

					opinion = { who = ROOT value >= 0 }
					relative_power = { who = ROOT power < 1.0 }
					NOT = { in_faction = faction_separatist }
				}

				# Then look for a vassal who isn't too far away and who doesn't hate me
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal

						distance_from_realm = {
							who = event_target:reassigned_vassal
							value < 50
						}
					}

					opinion = { who = ROOT value >= 0 }
				}

				# Then look for a vassal who isn't too far away who isn't a rival
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal

						distance_from_realm = {
							who = event_target:reassigned_vassal
							value < 50
						}
					}

					NOT = { is_rival = ROOT }
				}

				# Then look for a vassal who's a bit further away, who doesn't hate me, and who isn't too strong
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal

						distance_from_realm = {
							who = event_target:reassigned_vassal
							value < 100
						}
					}

					opinion = { who = ROOT value >= 0 }
					relative_power = { who = ROOT power < 1.0 }
					NOT = { in_faction = faction_separatist }
				}

				# Then look for a vassal who's a bit further away and who doesn't hate me
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal

						distance_from_realm = {
							who = event_target:reassigned_vassal
							value < 100
						}
					}

					opinion = { who = ROOT value >= 0 }
				}

				# Then look for a vassal who's a bit further away who isn't a rival
				preferred_limit = {
					OR = {
						de_jure_vassal_or_below = event_target:reassigned_vassal
						shares_realm_border_with = event_target:reassigned_vassal

						distance_from_realm = {
							who = event_target:reassigned_vassal
							value < 100
						}
					}

					NOT = { is_rival = ROOT }
				}

				save_event_target_as = new_liege
				log = "[reassigned_vassal.GetBestName] was too distant a vassal from [old_liege.GetBestName], and thus was re-assigned as vassal to [new_liege.GetBestName]"

				opinion = {
					name = opinion_vassal_transfer
					who = ROOT
				}

				event_target:reassigned_vassal = {
					set_defacto_liege = event_target:new_liege
					pf_liege_change_effect = yes
				}
			}
		}
	}
}

#######################################
# OLD TRIGGERED MODIFIERS
# Written by vukica
#######################################

# Small demesne modifier
character_event = {
	id = Plus.1759

	is_triggered_only = yes # on_yearly_pulse, on_new_holder(_inheritance/usurpation), on_unlanded
	hide_window = yes

	only_rulers = yes

	trigger = {
		OR = {
			has_character_modifier = small_demesne_1
			has_character_modifier = small_demesne_2
			has_character_modifier = small_demesne_3

			AND = {
				is_playable = yes
				is_nomadic = no
				demesne_size < 4
			}
		}
	}

	immediate = {
		remove_character_modifier = small_demesne_1
		remove_character_modifier = small_demesne_2
		remove_character_modifier = small_demesne_3

		if = {
			limit = { demesne_size < 2 }

			add_character_modifier = {
				name = small_demesne_1
				duration = -1
			}
		}
		else_if = {
			limit = { demesne_size < 3 }

			add_character_modifier = {
				name = small_demesne_2
				duration = -1
			}
		}
		else_if = {
			limit = { demesne_size < 4 }

			add_character_modifier = {
				name = small_demesne_3
				duration = -1
			}
		}
	}
}

# Overextended republic
character_event = {
	id = Plus.1760

	is_triggered_only = yes # on_yearly_pulse, on_new_holder(_inheritance/usurpation), on_unlanded
	hide_window = yes

	is_patrician = yes

	trigger = {
		any_realm_province = {
			is_coastal = yes
			held_under_PREV = yes

			any_province_holding = {
				holding_type = city
				ROOT = { completely_controls = PREV }
			}

			ROOT = {
				capital_scope = {
					distance = {
						where = PREVPREV	# Comparing the distance between ROOT's capital and the title in question
						value >= 650		# From aprox. Venice to East Cyprus and from Venice to Gibraltar
					}
				}
			}
		}
	}

	immediate = {
		add_character_modifier = {
			name = overextended_republic
			duration = -1
		}
	}

	fail_trigger_effect = {
		remove_character_modifier = overextended_republic
	}
}

#######################################
# NON-DYNASTY HEIRS
# Written by Rylock
#######################################

### Player dies with a non-dynasty heir
character_event = {
	id = Plus.1761

	is_triggered_only = yes # on_death
	hide_window = yes

	ai = no
	is_patrician = no

	trigger = {
		NOT = { player_heir = { always = yes } }
		current_heir = { always = yes }

		has_game_rule = {
			name = non_dynastic_heirs
			value = yes
		}
	}

	immediate = {
		create_character = {
			culture = current_heir
			religion = current_heir
			dynasty = current_heir
			female = no
			age = 20
			add_trait = immortal
		}

		new_character = {
			save_event_target_as = switch_dynasty
		}

		current_heir = {
			dynasty = ROOT

			character_event = {
				id = Plus.1762
				days = 1
			}
		}
	}
}

### Give the heir back their original dynasty after 1 day
character_event = {
	id = Plus.1762

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		dynasty = event_target:switch_dynasty

		event_target:switch_dynasty = {
			dynasty = father_bastard
			remove_trait = immortal
			death = { death_reason = death_accident }
		}

		recalc_succession = yes
	}
}

#######################################
# RE-EDUCATION EVENTS
# Written by vukica
#######################################

# Confirm you really want to re-educate
character_event = {
	id = Plus.1763
	desc = EVTDESC_Plus_1763
	picture = GFX_evt_library

	is_triggered_only = yes

	only_rulers = yes

	option = { # Yes, I need different skills!
		name = EVTOPTA_Plus_1763

		character_event = { id = Plus.1764 }
	}

	option = { # I want to be better!
		name = EVTOPTB_Plus_1763

		trigger = { has_top_tier_education_trait_trigger = no }

		set_character_flag = improving_education
		character_event = { id = Plus.1764 }
	}

	option = {
		name = CANCEL

		hidden_effect = {
			remove_character_modifier = being_reeducated
		}
	}
}

# Select re-education focus
character_event = {
	id = Plus.1764
	desc = EVTDESC_Plus_1764
	picture = GFX_evt_library

	is_triggered_only = yes

	only_rulers = yes

	option = { # Diplomacy is the key to the future
		name = EVTOPTA_Plus_1764

		trigger = {
			NOT = { has_character_flag = improving_education }
			has_education_diplomacy_trigger = no
			has_court_educator_trigger = no
		}

		set_character_flag = reeducates_to_diplomacy
		clr_character_flag = hiring_educator
	}

	option = { # I must become a warrior
		name = EVTOPTB_Plus_1764

		trigger = {
			NOT = { has_character_flag = improving_education }
			has_education_martial_trigger = no
			has_court_educator_trigger = no
		}

		set_character_flag = reeducates_to_martial
		clr_character_flag = hiring_educator
	}

	option = { # I will master the numbers
		name = EVTOPTC_Plus_1764

		trigger = {
			NOT = { has_character_flag = improving_education }
			has_education_stewardship_trigger = no
			has_court_educator_trigger = no
		}

		set_character_flag = reeducates_to_stewardship
		clr_character_flag = hiring_educator
	}

	option = { # Learn to rule from the shadows
		name = EVTOPTD_Plus_1764

		trigger = {
			NOT = { has_character_flag = improving_education }
			has_education_intrigue_trigger = no
			has_court_educator_trigger = no
		}

		set_character_flag = reeducates_to_intrigue
		clr_character_flag = hiring_educator
	}

	option = { # I must devote myself to faith
		name = EVTOPTE_Plus_1764

		trigger = {
			NOT = { has_character_flag = improving_education }
			has_education_learning_trigger = no
			has_court_educator_trigger = no
		}

		set_character_flag = reeducates_to_learning
		clr_character_flag = hiring_educator
	}

	option = { # My court educator sets the path
		name = EVTOPTF_Plus_1764

		trigger = { has_court_educator_trigger = yes }

		hidden_effect = {
			clr_character_flag = hiring_educator

			random_courtier_or_vassal = {
				limit = { is_court_educator_trigger = yes }

				if = {
					limit = { has_education_diplomacy_trigger = yes }
					ROOT = { set_character_flag = reeducates_to_diplomacy }
				}
				else_if = {
					limit = { has_education_martial_trigger = yes }
					ROOT = { set_character_flag = reeducates_to_martial }
				}
				else_if = {
					limit = { has_education_stewardship_trigger = yes }
					ROOT = { set_character_flag = reeducates_to_stewardship }
				}
				else_if = {
					limit = { has_education_intrigue_trigger = yes }
					ROOT = { set_character_flag = reeducates_to_intrigue }
				}
				else = {
					ROOT = { set_character_flag = reeducates_to_learning }
				}
			}
		}
	}

	option = { # I want to hire a new educator!
		name = EVTOPTG_Plus_1764

		trigger = { has_court_educator_trigger = yes }

		hidden_effect = {
			set_character_flag = hiring_educator

			random_courtier_or_vassal = {
				limit = { is_court_educator_trigger = yes }
				remove_court_educator_effect = yes
			}
		}
	}

	after = {
		if = {
			limit = {
				has_character_flag = hiring_educator
				NOT = { has_character_flag = improving_education }
			}
			character_event = { id = Plus.1764 }
		}
		else = {
			character_event = { id = Plus.1765 }
		}
	}
}

# Determine investment level
character_event = {
	id = Plus.1765
	desc = EVTDESC_Plus_1765
	picture = GFX_evt_library

	is_triggered_only = yes

	only_rulers = yes

	option = { # I want the best education money can buy
		name = EVTOPTA_Plus_1765

		trigger = {
			trigger_if = {
				limit = { has_character_flag = improving_education }
				has_top_tier_education_trait_trigger = no
			}
		}

		scaled_wealth = {
			value = -1
			min = -150
			max = -250
		}

		custom_tooltip = {
			text = BEST_EDUCATION # Can result with education level 3 or 4.
			set_character_flag = best_education
		}
	}

	option = { # I will spend moderately
		name = EVTOPTB_Plus_1765

		trigger = {
			trigger_if = {
				limit = { has_character_flag = improving_education }

				OR = {
					has_bottom_tier_education_trait_trigger = yes
					has_2nd_tier_education_trait_trigger = yes
				}
			}
		}

		scaled_wealth = {
			value = -0.5
			min = -50
			max = -150
		}

		custom_tooltip = {
			text = MEDIOCRE_EDUCATION # Can result with education levels 2 or 3
			set_character_flag = mediocre_education
		}
	}

	option = { # Anything is better than what I have now.
		name = EVTOPTC_Plus_1765

		trigger = {
			trigger_if = {
				limit = { has_character_flag = improving_education }
				has_bottom_tier_education_trait_trigger = yes
			}
		}

		scaled_wealth = {
			value = -0.2
			min = -20
			max = -50
		}

		custom_tooltip = {
			text = POOR_EDUCATION # Can result with education levels 1 and 2
			set_character_flag = poor_education
		}
	}

	after = {
		character_event = { id = Plus.1766 }

		hidden_effect = {
			set_variable = {
				which = learning_outcome
				value = 0
			}
		}
	}
}

# Generate new court educator
character_event = {
	id = Plus.1766

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes

	trigger = {
		# Do this only if player has not assigned a court educator.
		has_court_educator_trigger = no
	}

	immediate = {
		create_character = {
			random_traits = yes
			dynasty = random
			religion = ROOT
			culture = ROOT
			female = no

			attributes = {
				diplomacy = 2
				learning = 4
				stewardship = 2
				intrigue = 2
				martial = 2
			}
		}

		new_character = {
			will_not_marry_effect = yes
			remove_trait = slow
			remove_trait = imbecile
			remove_trait = dull
			clear_education_trait = yes

			set_character_flag = hired_educator
			make_court_educator_effect = yes
			save_event_target_as = new_educator

			if = {
				limit = {
					ROOT = {
						trigger_if = {
							limit = { has_character_flag = improving_education }
							has_education_diplomacy_trigger = yes
						}
						trigger_else = {
							has_character_flag = reeducates_to_diplomacy
						}
					}
				}

				if = {
					limit = { ROOT = { has_character_flag = best_education } }
					change_diplomacy = 8
					add_trait = socializer
					add_trait = grey_eminence
				}
				else_if = {
					limit = { ROOT = { has_character_flag = mediocre_education } }
					change_diplomacy = 6
					add_trait = charismatic_negotiator
				}
				else = {
					change_diplomacy = 4
					add_trait = underhanded_rogue
				}
			}
			else_if = {
				limit = {
					ROOT = {
						trigger_if = {
							limit = { has_character_flag = improving_education }
							has_education_martial_trigger = yes
						}
						trigger_else = {
							has_character_flag = reeducates_to_martial
						}
					}
				}

				if = {
					limit = { ROOT = { has_character_flag = best_education } }
					change_martial = 8
					add_trait = strategist
					add_trait = brilliant_strategist
				}
				else_if = {
					limit = { ROOT = { has_character_flag = mediocre_education } }
					change_martial = 6
					add_trait = skilled_tactician
				}
				else = {
					change_martial = 4
					add_trait = tough_soldier
				}
			}
			else_if = {
				limit = {
					ROOT = {
						trigger_if = {
							limit = { has_character_flag = improving_education }
							has_education_stewardship_trigger = yes
						}
						trigger_else = {
							has_character_flag = reeducates_to_stewardship
						}
					}
				}

				if = {
					limit = { ROOT = { has_character_flag = best_education } }
					change_stewardship = 8
					add_trait = administrator
					add_trait = midas_touched
				}
				else_if = {
					limit = { ROOT = { has_character_flag = mediocre_education } }
					change_stewardship = 6
					add_trait = fortune_builder
				}
				else = {
					change_stewardship = 4
					add_trait = thrifty_clerk
				}
			}
			else_if = {
				limit = {
					ROOT = {
						trigger_if = {
							limit = { has_character_flag = improving_education }
							has_education_intrigue_trigger = yes
						}
						trigger_else = {
							has_character_flag = reeducates_to_intrigue
						}
					}
				}

				if = {
					limit = { ROOT = { has_character_flag = best_education } }
					change_intrigue = 8
					add_trait = master_schemer
					add_trait = elusive_shadow
				}
				else_if = {
					limit = { ROOT = { has_character_flag = mediocre_education } }
					change_intrigue = 6
					add_trait = intricate_webweaver
				}
				else = {
					change_intrigue = 4
					add_trait = flamboyant_schemer
				}
			}
			else_if = {
				limit = {
					ROOT = {
						trigger_if = {
							limit = { has_character_flag = improving_education }
							has_education_learning_trigger = yes
						}
						trigger_else = {
							has_character_flag = reeducates_to_learning
						}
					}
				}

				if = {
					limit = { ROOT = { has_character_flag = best_education } }
					change_learning = 8
					add_trait = erudite
					add_trait = mastermind_theologian
				}
				else_if = {
					limit = { ROOT = { has_character_flag = mediocre_education } }
					change_learning = 6
					add_trait = scholarly_theologian
				}
				else = {
					change_learning = 4
					add_trait = dutiful_cleric
				}
			}
		}

		character_event = {
			id = Plus.1768 # Inform liege about new educator
			days = 1
		}
	}
}

# Hired educator dies
character_event = {
	id = Plus.1767

	is_triggered_only = yes # on_death
	hide_window = yes

	has_character_flag = hired_educator

	trigger = {
		is_court_educator_trigger = yes
	}

	immediate = {
		liege = {
			character_event = {
				id = Plus.1766
				days = 1
			}
		}
	}
}

# Notify liege about new educator
character_event = {
	id = Plus.1768
	desc = EVTDESC_Plus_1768
	picture = GFX_evt_library

	is_triggered_only = yes
	hide_from = yes

	only_rulers = yes

	option = {
		name = OK
	}
}

#Education pulse tombola event
#happens on_yearly_pulse for rulers only
character_event = {
	id = Plus.1771

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes

	trigger = {
		has_character_modifier = being_reeducated
		has_court_educator_trigger = yes
	}

	immediate = {
		random_list = {
			20 = {
				trigger = {
					OR = {
						has_character_flag = generic_education_event_one
						has_character_flag = generic_education_event_two
						has_character_flag = generic_education_event_three
						has_character_flag = generic_education_event_four
						has_character_flag = generic_education_event_five
						has_character_flag = had_first_education_event
						has_character_flag = had_second_education_event
					}
				}

				character_event = { id = Plus.1772 days = 30 random = 30 }
			}

			80 = { # Education event
				random_list = {
					10 = {
						# Education event Generic 1
						trigger = {
							NOT = { has_character_flag = generic_education_event_one }
						}

						force_two_education_events_effect = yes
						set_character_flag = generic_education_event_one
						character_event = { id = Plus.1773 days = 30 random = 30 }
					}

					10 = {
						# Education event Generic 2
						trigger = {
							NOT = { has_character_flag = generic_education_event_two }
						}

						force_two_education_events_effect = yes
						set_character_flag = generic_education_event_two
						character_event = { id = Plus.1774 days = 30 random = 30 }
					}

					10 = {
						# Education event Generic 3
						trigger = {
							NOT = { has_character_flag = generic_education_event_three }
						}

						force_two_education_events_effect = yes
						set_character_flag = generic_education_event_three
						character_event = { id = Plus.1775 days = 30 random = 30 }
					}

					10 = {
						# Education event Generic 4
						trigger = {
							NOT = { has_character_flag = generic_education_event_four }
						}

						force_two_education_events_effect = yes
						set_character_flag = generic_education_event_four
						character_event = { id = Plus.1776 days = 30 random = 30 }
					}

					10 = {
						# Education event Generic 5
						trigger = {
							has_lover = yes
							NOT = { has_character_flag = generic_education_event_five }
						}

						force_two_education_events_effect = yes
						set_character_flag = generic_education_event_five
						character_event = { id = Plus.1777 days = 30 random = 30 }
					}
				}
			}
		}
	}
}

# Education done
character_event = {
	id = Plus.1772
	desc = EVTDESC_Plus_1772
	picture = GFX_evt_library

	is_triggered_only = yes
	hide_from = yes

	only_rulers = yes

	trigger = {
		has_character_modifier = being_reeducated
		has_court_educator_trigger = yes
	}

	immediate = {
		random_courtier_or_vassal = {
			limit = { is_court_educator_trigger = yes }
			save_event_target_as = target_court_educator
		}
	}

	option = {
		name = OK

		random_list = {
			25 = {
				# Tier 4
				# educator is level 4
				# educator is level 3
				# 	learning_outcome positive
				trigger = {
					NOT = { has_character_flag = improving_education }

					check_variable = {
						which = learning_outcome
						value >= 0
					}

					event_target:target_court_educator = {
						OR = {
							has_top_tier_education_trait_trigger = yes
							has_tier_3_education_trigger = yes
						}
					}
				}

				mult_modifier = {
					factor = 1.5
					check_variable = { which = learning_outcome value >= 3 }
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
				}

				if = {
					limit = {
						check_variable = { which = learning_outcome value >= 3 }
						event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
					}

					upgrade_education_effect = yes
				}

				reeducate_to_tier_4_effect = yes
			}

			25 = {
				# Tier 3
				# educator is level 4
				# 	learning_outcome negative
				# educator is level 3
				# 	learning_outcome positive
				# educator is level 2
				# 	learning_outcome positive
				trigger = {
					NOT = { has_character_flag = improving_education }

					trigger_if = {
						limit = { check_variable = { which = learning_outcome value < 0 } }
						event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
					}
					trigger_else = {
						event_target:target_court_educator = {
							OR = {
								has_tier_3_education_trigger = yes
								has_tier_2_education_trigger = yes
							}
						}
					}
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_tier_3_education_trigger = yes }
				}

				mult_modifier = {
					factor = 1.3
					check_variable = { which = learning_outcome value >= 3 }
				}

				if = {
					limit = {
						check_variable = { which = learning_outcome value < -1 }
						event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
					}

					reduce_education_effect = yes
				}

				reeducate_to_tier_3_effect = yes
			}

			25 = {
				# Tier 2
				# educator is level 3
				# 	learning_outcome negative
				# educator is level 2
				# 	learning_outcome positive
				# educator is level 1
				#	learning_outcome positive

				trigger = {
					NOT = { has_character_flag = improving_education }

					trigger_if = {
						limit = { check_variable = { which = learning_outcome value < 0 } }
						event_target:target_court_educator = { has_tier_3_education_trigger = yes }
					}
					trigger_else = {
						event_target:target_court_educator = {
							OR = {
								has_tier_2_education_trigger = yes
								has_tier_1_education_trigger = yes
							}
						}
					}
				}

				mult_modifier = {
					factor = 1.1
					check_variable = { which = learning_outcome value >= 3 }
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_tier_2_education_trigger = yes }
				}

				if = {
					limit = {
						check_variable = { which = learning_outcome value < -1 }
						event_target:target_court_educator = { has_tier_3_education_trigger = yes }
					}

					reduce_education_effect = yes
				}

				reeducate_to_tier_2_effect = yes
			}

			25 = {
				# Tier 1
				# educator is level 2
				# educator is level 1
				#	learning_outcome negative
				trigger = {
					NOT = { has_character_flag = improving_education }
					check_variable = { which = learning_outcome value < 0 }

					event_target:target_court_educator = {
						OR = {
							has_tier_2_education_trigger = yes
							has_tier_1_education_trigger = yes
						}
					}
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_tier_1_education_trigger = yes }
				}

				if = {
					limit = {
						check_variable = { which = learning_outcome value < -1 }
						event_target:target_court_educator = { has_tier_2_education_trigger = yes }
					}

					reduce_education_effect = yes
				}

				reeducate_to_tier_1_effect = yes
			}

			25 = { # Increase education by 3
				trigger = { has_character_flag = improving_education }

				mult_modifier = {
					factor = 3
					event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
				}

				mult_modifier = {
					factor = 3
					check_variable = { which = learning_outcome value >= 3 }
				}

				custom_tooltip = {
					text = EDUCATION_INCREASED_BY_3_TT

					upgrade_education_effect = yes
					upgrade_education_effect = yes
					upgrade_education_effect = yes
				}
			}

			25 = { # Increase education by 2
				trigger = { has_character_flag = improving_education }

				mult_modifier = {
					factor = 2
					event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
				}

				mult_modifier = {
					factor = 2
					check_variable = { which = learning_outcome value >= 3 }
				}

				custom_tooltip = {
					text = EDUCATION_INCREASED_BY_2_TT

					upgrade_education_effect = yes
					upgrade_education_effect = yes
				}
			}

			25 = { # Increase education by 1
				trigger = { has_character_flag = improving_education }

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
				}

				mult_modifier = {
					factor = 2
					event_target:target_court_educator = { has_tier_3_education_trigger = yes }
				}

				mult_modifier = {
					factor = 2
					check_variable = { which = "learning_outcome" value = 0 }
				}

				upgrade_education_effect = yes
			}

			25 = { # Fail
				trigger = { has_character_flag = improving_education  }

				mult_modifier = {
					factor = 0.3
					event_target:target_court_educator = { has_top_tier_education_trait_trigger = yes }
				}

				mult_modifier = {
					factor = 2
					event_target:target_court_educator = { has_tier_2_education_trigger = yes }
				}

				mult_modifier = {
					factor = 2
					check_variable = { which = learning_outcome value < 0 }
				}

				mult_modifier = {
					factor = 4
					check_variable = { which = learning_outcome value < -2 }
				}

				custom_tooltip = { text = FAIL_IMPROVING_EDUCATION }
			}
		}

		hidden_effect = {
			remove_character_modifier = being_reeducated
			clr_character_flag = best_education
			clr_character_flag = mediocre_education
			clr_character_flag = poor_education
			clr_character_flag = reeducates_to_diplomacy
			clr_character_flag = reeducates_to_martial
			clr_character_flag = reeducates_to_stewardship
			clr_character_flag = reeducates_to_intrigue
			clr_character_flag = reeducates_to_learning
			clr_character_flag = generic_education_event_one
			clr_character_flag = generic_education_event_two
			clr_character_flag = generic_education_event_three
			clr_character_flag = generic_education_event_four
			clr_character_flag = generic_education_event_five
			set_character_flag = was_reeducated
			clear_event_target = target_court_educator
			clr_character_flag = had_first_education_event
			clr_character_flag = had_second_education_event
			clr_character_flag = improving_education
		}
	}
}

# Education event Generic 1 - has difficulty learning
character_event = {
	id = Plus.1773
	desc = EVTDESC_Plus_1773
	picture = GFX_evt_library

	is_triggered_only = yes
	hide_from = yes

	only_rulers = yes

	trigger = {
		has_character_modifier = being_reeducated
		has_court_educator_trigger = yes
	}

	immediate = {
		random_realm_character = {
			limit = { is_court_educator_trigger = yes }
			save_event_target_as = target_court_educator
		}

		set_character_flag = generic_education_event_one
		force_two_education_events_effect = yes
	}

	option = { # Persist
		name = EVTOPTA_Plus_1773

		random_list = {
			50 = {
				# Diligent + learning_outcome +1
				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = diligent }
				}

				add_trait_partially_diligent_effect = yes

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 1
					}
				}
			}

			50 = {
				# Stressed + learning_outcome -0.5
				# Add stress if not stressed
				add_trait_stressed_effect = yes

				# If stress is already here and learning level is really low, activate depression, or lose health
				if = {
					limit = {
						check_variable = {
							which = learning_outcome
							value < -2
						}
					}

					if = {
						limit = { trait = depressed }
						health = -0.5
					}
					else = {
						add_trait_depressed_effect = yes
					}
				}

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -0.5
					}
				}
			}
		}
	}

	option = { # Take it easy
		name = EVTOPTB_Plus_1773

		random_list = {
			50 = {
				# Slothful + learning_outcome -1
				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = slothful }
				}

				add_trait_partially_slothful_effect = yes

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -1
					}
				}
			}

			50 = {
				# Health +0.5 + learning_outcome +0.5
				health = 0.5

				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 0.5
					}
				}
			}
		}
	}

	after = {
		clear_event_target = target_court_educator
	}
}

# Education event Generic 2 - argument with educator
character_event = {
	id = Plus.1774
	desc = EVTDESC_Plus_1774
	picture = GFX_evt_library

	is_triggered_only = yes
	hide_from = yes

	only_rulers = yes

	trigger = {
		has_character_modifier = being_reeducated
		has_court_educator_trigger = yes
	}

	immediate = {
		any_courtier_or_vassal = {
			limit = { is_court_educator_trigger = yes }
			save_event_target_as = target_court_educator
		}

		set_character_flag = generic_education_event_two
		force_two_education_events_effect = yes
	}

	option = { # Talk with them
		name = EVTOPTA_Plus_1774

		random_list = {
			50 = {
				# Wroth (learning_outcome -0.5)
				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = wroth }
				}

				add_trait_wroth_effect = yes
				remove_trait_patient_effect = yes

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -0.5
					}
				}
			}

			50 = {
				# Gregarious (learning_outcome +1)
				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = gregarious }
				}

				add_trait_partially_gregarious_effect = yes

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 1
					}
				}
			}
		}
	}

	option = { # My word is final
		name = EVTOPTB_Plus_1774

		random_list = {
			50 = {
				# May get proud (learning outcome -1)
				add_trait_partially_proud_effect = yes

				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = proud }
				}

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -1
					}
				}
			}

			50 = {
				# Some prestige (learning_outcome +0.5)

				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				scaled_prestige = {
					value = 0.2
					min = 10
					max = 200
				}

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 0.5
					}
				}
			}
		}
	}

	after = {
		clear_event_target = target_court_educator
	}
}

# Education event Generic 3 - new book published
character_event = {
	id = Plus.1775
	desc = EVTDESC_Plus_1775
	picture = GFX_evt_library

	is_triggered_only = yes
	hide_from = yes

	only_rulers = yes

	trigger = {
		has_character_modifier = being_reeducated
		has_court_educator_trigger = yes
	}

	immediate = {
		random_courtier_or_vassal = {
			limit = { is_court_educator_trigger = yes }
			save_event_target_as = target_court_educator
		}

		set_character_flag = generic_education_event_three
		force_two_education_events_effect = yes
	}

	option = { # Buy the book
		name = EVTOPTA_Plus_1775

		# Buy the book - loose money, learning_outcome +1
		scaled_wealth = {
			value = -0.2
			min = -20
		}

		custom_tooltip = {
			text = BETTER_EDUCATION

			change_variable = {
				which = learning_outcome
				value = 1
			}
		}
	}

	option = { # I already have a book
		name = EVTOPTB_Plus_1775

		# Keep money, (learning outcome -0.5)
		scaled_wealth = {
			value = 0.1
			min = 10
			max = 30
		}

		custom_tooltip = {
			text = WORSE_EDUCATION

			change_variable = {
				which = learning_outcome
				value = -0.5
			}
		}

	}

	after = {
		clear_event_target = target_court_educator
	}
}

# Education event Generic 4 - opportunity to excel
character_event = {
	id = Plus.1776
	desc = EVTDESC_Plus_1776
	picture = GFX_evt_library

	is_triggered_only = yes
	hide_from = yes

	only_rulers = yes

	trigger = {
		has_character_modifier = being_reeducated
		has_court_educator_trigger = yes
	}

	immediate = {
		random_courtier_or_vassal = {
			limit = { is_court_educator_trigger = yes }
			save_event_target_as = target_court_educator
		}

		set_character_flag = generic_education_event_four
		force_two_education_events_effect = yes
	}

	option = { # Spend the night studying
		name = EVTOPTA_Plus_1776

		random_list = {
			50 = {
				# May get ambitious(learning_outcome +1)
				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = ambitious }
				}

				add_trait_partially_ambitious_effect = yes

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 1
					}
				}
			}

			50 = {
				# Lose 0.5 health(learning_outcome -0.5)
				health = -0.5

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -0.5
					}
				}
			}
		}
	}

	option = { # Go to sleep
		name = EVTOPTB_Plus_1776
		random_list = {
			50 = {
				# May get slotful (learning_outcome -1)
				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = slothful }
				}

				add_trait_partially_slothful_effect = yes

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -1
					}
				}
			}

			50 = {
				# 0.5 health (learning_outcome +0.5)
				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				health = 0.5

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 0.5
					}
				}
			}
		}
	}

	after = {
		clear_event_target = target_court_educator
	}
}

# Education event Generic 5 - has a lover
character_event = {
	id = Plus.1777
	desc = EVTDESC_Plus_1777
	picture = GFX_evt_library

	is_triggered_only = yes
	hide_from = yes

	only_rulers = yes

	trigger = {
		has_character_modifier = being_reeducated
		has_court_educator_trigger = yes
	}

	immediate = {
		random_courtier_or_vassal = {
			limit = { is_court_educator_trigger = yes }
			save_event_target_as = target_court_educator
		}

		set_character_flag = generic_education_event_five
		force_two_education_events_effect = yes
	}

	option = { # Spend the night studying
		name = EVTOPTA_Plus_1777

		random_list = {
			50 = {
				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = { trait = diligent }
				}

				add_trait_partially_diligent_effect = yes

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 1
					}
				}
			}

			50 = {
				random_lover = {
					show_scope_change = no
					remove_lover = ROOT
				}

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -0.5
					}
				}
			}
		}
	}

	option = { # Spend the night with lover
		name = EVTOPTB_Plus_1777

		random_list = {
			50 = {
				mult_modifier = {
					factor = 1.2
					event_target:target_court_educator = {
						trait = arbitrary
					}
				}

				add_trait_partially_arbitrary_effect = yes

				custom_tooltip = {
					text = WORSE_EDUCATION

					change_variable = {
						which = learning_outcome
						value = -1
					}
				}
			}

			50 = {
				mult_modifier = {
					factor = 2
					has_character_flag = best_education
				}

				mult_modifier = {
					factor = 1.2
					has_character_flag = mediocre_education
				}

				mult_modifier = {
					factor = 0.8
					has_character_flag = poor_education
				}

				mult_modifier = {
					factor = 1.1
					event_target:target_court_educator = { has_character_flag = hired_educator }
				}

				random_lover = {
					show_scope_change = no

					opinion = {
						name = opinion_infatuated
						who = ROOT
						years = 5
					}
				}

				custom_tooltip = {
					text = BETTER_EDUCATION

					change_variable = {
						which = learning_outcome
						value = 0.5
					}
				}
			}
		}
	}

	after = {
		clear_event_target = target_court_educator
	}
}

# Education event template

# character_event = {
#	id = Plus.17XY
#	desc = EVTDESC_Plus_17XY
#	picture = GFX_evt_library
#
#	is_triggered_only = yes
#	hide_from = yes
#
#	only_rulers = yes
#
#	option = {
#		name = EVTOPTA_Plus_17XY
#
#		random_list = {
#			50 = {
#				mult_modifier = {
#					factor = 2
#					as_character_flag = best_education
#				}
#
#				mult_modifier = {
#					factor = 1.2
#					has_character_flag = mediocre_education
#				}
#
#				mult_modifier = {
#					factor = 0.8
#					has_character_flag = poor_education
#				}
#
#				custom_tooltip = {
#					text = BETTER_EDUCATION
#
#					change_variable = {
#						which = learning_outcome
#						value = 1
#					}
#				}
#			}
#
#			50 = {
#				custom_tooltip = {
#					text = WORSE_EDUCATION
#
#					change_variable = {
#						which = learning_outcome
#						value = -0.5
#					}
#				}
#			}
#		}
#	}
#
#	option = {
#		name = EVTOPTB_Plus_17XY
#
#		random_list = {
#			50 = {
#				custom_tooltip = {
#					text = WORSE_EDUCATION
#
#					change_variable = {
#						which = learning_outcome
#						value = -1
#					}
#				}
#			}
#
#			50 = {
#				mult_modifier = {
#					factor = 2
#					has_character_flag = best_education
#				}
#
#				mult_modifier = {
#					factor = 1.2
#					has_character_flag = mediocre_education
#				}
#
#				mult_modifier = {
#					factor = 0.8
#					has_character_flag = poor_education
#				}
#
#				custom_tooltip = {
#					text = BETTER_EDUCATION
#
#					change_variable = {
#						which = learning_outcome
#						value = 0.5
#					}
#				}
#			}
#		}
#	}
# }

# TODO:later
# triggered from education tombola event
# Education event Specific Diplomacy 1
#	lesser lords argue over a piece of land
#	optA "invite them both to court - get them to talk" - may gain diplomacy+1 and learning_outcome+1 OR may lose gregarious/become shy and have learning_outcome -0.5
#	optB "decide for yourself and order them to comply" may gain powerful_voice and learning_outcome+0.5 OR increase tyranny and learning_outcome -1
# Education event Specific Diplomacy 2
#	a rich merchant from a far away land arrives to your capital
#	optA "have a formal court reception" may gain gregarious/lose shy and learning outcome+1 OR embarrass yourself in front of court (bad_speech) and learning_outcome-0.5
#	optB "meet with the merchant informally" - may gain some money and learning_outcome+0.5 OR get merchants_unhappy modifier and learning_outcome-1
# Education event Specific Martial 1
# Education event Specific Martial 2
# Education event Specific Stewardship 1
# Education event Specific Stewardship 2
# Education event Specific Intrigue 1
# Education event Specific Intrigue 2
# Education event Specific Learning 1
# Education event Specific Learning 2

## TODO: Remove, replace with better modding command 'prompt_name'
# Explain how to rename character
narrative_event = {
	id = Plus.1800
	title = EVTNAME_Plus_1800
	desc = EVTDESC_Plus_1800
	picture = GFX_evt_council
	border = GFX_event_narrative_frame_diplomacy

	is_triggered_only = yes

	immediate = {
		capital_scope = {
			create_title = {
				tier = DUKE
				holder = ROOT
				base_title = THIS
			}

			new_title = {
				set_name = "[Root.GetFirstName]"
				set_title_flag = rename_character_duchy
			}
		}

		character_event = {
			id = Plus.1801
			days = 7
		}
	}

	option = {
		name = OK
	}
}

character_event = {
	id = Plus.1801

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		clr_character_flag = renaming_character

		any_demesne_title = {
			limit = { has_title_flag = rename_character_duchy}
			unsafe_destroy_landed_title = THIS
		}
	}
}

#######################################
# NIGERIAN PRINCE
# Written by vukica
#######################################

# Hidden trigger event
character_event = {
	id = Plus.1805

	is_triggered_only = yes # on_decade_pulse, random_events
	hide_window = yes

	only_playable = yes
	only_capable = yes
	prisoner = no
	war = no

	trigger = {
		OR = {
			higher_real_tier_than = DUKE
			num_of_duke_titles >= 21
		}

		scaled_wealth = { # Actually has some money
			value = 0.5
			min = 25
		}

		capital_scope = {
			NOT = { region = world_africa_central }
		}

		any_independent_ruler = {
			capital_scope = { region = world_africa_central }
			NOT =  { same_realm = event_target:wealthy_target }
			ai = yes
		}

		NOR = {
			has_character_flag = nigerian_prince_chain
			has_character_modifier = ai_austerity # No loans etc
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 1.11
			scaled_wealth = 0.6
		}

		mult_modifier = {
			factor = 1.11
			scaled_wealth = 0.8
		}

		mult_modifier = {
			factor = 1.11
			scaled_wealth = 1
		}
	}

	immediate = {
		set_character_flag = nigerian_prince_chain
		save_event_target_as = wealthy_target

		random_independent_ruler = {
			create_character = {
				random_traits = no
				culture = hausa
				religion = ROOT
				dynasty = random
				female = no
				age = 35
				trait = elusive_shadow
				trait = quick
				trait = arbitrary
			}

			new_character = {
				save_event_target_as = random_hausa_name
				death = { death_reason = death_missing }
			}
		}

		long_character_event = { id = Plus.1806 }
	}
}

# Nigerian Prince sends the letter
long_character_event = {
	id = Plus.1806
	desc = EVTDESC_Plus_1806
	picture = GFX_evt_throne_room
	border = GFX_event_long_frame_diplomacy

	is_triggered_only = yes
	hide_from = yes

	option = { # How terrible, I must help him immediately!
		name = EVTOPTA_Plus_1806

		custom_tooltip = {
			text = REPLY_TO_NIGERIAN_PRINCE

			long_character_event = {
				id = Plus.1807
				days = 30
				random = 10
			}

			hidden_effect = {
				if = {
					limit = { has_character_flag = framed_rival }

					event_target:nigerian_prince = {
						character_event = {
							id = Plus.1812
							days = 10
						}
					}
				}
			}
		}

		# Send money, 99% fake. Can cause a hunt for the "prince"
		ai_chance = { factor = 10 }
	}

	option = { # Great idea!
		name = EVTOPTC_Plus_1806
		tooltip_info = intrigue

		trigger = {
			num_of_rivals >= 1
			intrigue >= 12

			any_rival = {
				scaled_wealth = { # Actually has some money
					value = 0.5
					min = 25
				}

				NOR = {
					has_character_flag = nigerian_prince_chain
					has_character_modifier = ai_austerity # No loans etc
					has_character_flag = framed_rival
				}
			}

			NOR = {
				trait = honest
				trait = just
				has_character_flag = framed_rival
			}
		}

		custom_tooltip = {
			text = FRAME_THE_RIVAL

			hidden_effect = {
				clear_event_target = wealthy_target
				save_event_target_as = nigerian_prince

				random_rival = {
					limit = {
						scaled_wealth = {
							value = 0.5 # Actually has some money
							min = 25
						}

						NOR = {
							has_character_flag = nigerian_prince_chain
							has_character_modifier = ai_austerity # No loans etc
							has_character_flag = framed_rival
						}
					}

					set_character_flag = nigerian_prince_chain
					set_character_flag = framed_rival
					save_event_target_as = wealthy_target

					long_character_event = {
						id = Plus.1806
						days = 3
					}
				}
			}
		}

		ai_chance = {
			factor = 20

			mult_modifier = {
				factor = 2
				trait = deceitful
			}
		}
	}

	option = { # Throw the letter away
		name = EVTOPTD_Plus_1806

		trigger = {
			NOR = {
				trait = imbecile
				trait = slow
				trait = inbred
			}
		}

		custom_tooltip = {
			text = BURN_THE_LETTER

			hidden_effect = {
				if = {
					limit = { has_character_flag = framed_rival }

					event_target:nigerian_prince = {
						character_event = { id = Plus.1816 }
					}
				}

				clear_event_target = nigerian_prince
				clear_event_target = wealthy_target
				clear_event_target = random_hausa_name
			}
		}

		ai_chance = { factor = 20 }
	}
}

### Fell for it - Nigerian Prince sends the second letter asking for money
long_character_event = {
	id = Plus.1807
	desc = EVTDESC_Plus_1807
	picture = GFX_evt_throne_room
	border = GFX_event_long_frame_diplomacy

	is_triggered_only = yes
	hide_from = yes

	option = { # Send the money immediately!
		name = EVTOPTA_Plus_1807

		hidden_tooltip = {
			if = {
				limit = { event_target:nigerian_prince = { always = yes } }

				event_target:nigerian_prince = {
					transfer_scaled_wealth = {
						from = ROOT
						value = 0.5
						min = 25
					}

					character_event = { id = Plus.1813 }
				}
			}
			else = {
				scaled_wealth = {
					value = -0.5
					min = 25
				}
			}
		}

		tooltip = {
			scaled_wealth = {
				value = -0.5
				min = 25
			}
		}

		hidden_effect = {
			random_list = {
				99 = { #Scam
					character_event = {
						id = Plus.1808
						days = 60
						random = 15
					}
				}

				1 = { # ... it was for real. Huge payday!
					trigger = {
						NOT = { has_character_flag = framed_rival }
					}

					mult_modifier = {
						factor = 10
						NOT = {
							has_game_rule = {
								name = supernatural_events
								value = off
							}
						}
					}

					long_character_event = {
						id = Plus.1815
						days = 45
						random = 10
					}
				}
			}
		}

		ai_chance = {
			factor = 2

			mult_modifier = {
				factor = 2
				trait = greedy
			}

			mult_modifier = {
				factor = 2
				trait = kind
			}
		}
	}

	option = { # Throw the letter away
		name = EVTOPTB_Plus_1807

		trigger = {
			NOR = {
				trait = imbecile
				trait = slow
				trait = inbred
			}
		}

		custom_tooltip = {
			text = BURN_THE_LETTER

			hidden_effect = {
				if = {
					limit = { has_character_flag = framed_rival }

					event_target:nigerian_prince = {
						character_event = { id = Plus.1816 }
					}
				}

				clear_event_target = nigerian_prince
				clear_event_target = wealthy_target
				clear_event_target = random_hausa_name
			}
		}

		ai_chance = { factor = 10 }
	}
}

## Scam - Realised it was a scam
character_event = {
	id = Plus.1808
	desc = EVTDESC_Plus_1808
	picture = GFX_evt_spymaster

	is_triggered_only = yes
	hide_from = yes

	option = { # Easy come, easy go.
		name = EVTOPTA_Plus_1808

		random = {
			chance = 25
			add_trait_partially_arbitrary_effect = yes
		}

		random = {
			chance = 25
			add_trait_partially_content_effect = yes
		}

		clear_event_target = wealthy_target
		clear_event_target = nigerian_prince
		clear_event_target = random_hausa_name
	}

	option = { # Ask Spymaster to find out who is behind this.
		name = EVTOPTB_Plus_1808

		trigger = {
			job_spymaster = { always = yes }
		}

		job_spymaster = {
			character_event = {
				id = Plus.1809
				days = 3
			}
		}
	}
}

# Spymaster asked to help find the "nigerian prince"
character_event = {
	id = Plus.1809
	desc = EVTDESC_Plus_1809
	picture = GFX_evt_spymaster

	is_triggered_only = yes

	option = { # Blame it on a random rich landowner
		name = EVTOPTA_Plus_1809

		clear_event_target = wealthy_target
		clear_event_target = random_hausa_name

		liege = {
			character_event = {
				id = Plus.1810
				days = 30
				random = 10
			}
		}
	}

	option = { # The blackadder option
		name = EVTOPTB_Plus_1809
		tooltip_info = intrigue

		trigger = {
			intrigue >= 12

			OR = {
				trait = intricate_webweaver
				trait = elusive_shadow
			}
		}

		hidden_effect = {
			random_list = {
				90 = { # Culprit is an in-realm baron
					random_realm_lord = {
						limit = {
							real_tier = BARON
							NOT = { dynasty = event_target:wealthy_target }
						}

						save_event_target_as = nigerian_prince
					}

					liege = {
						character_event = {
							id = Plus.1811
							days = 30
							random = 10
						}
					}
				}

				5 = { # Rival did it!
					trigger = {
						event_target:wealthy_target = { has_character_flag = framed_rival }
					}

					if = {
						limit = { event_target:wealthy_target = { ai = yes } }
						liege = { character_event = { id = Plus.1811 days = 30 random = 10 } }
					}
					else = {
						liege = { character_event = { id = Plus.1814 days = 30 random = 10 } }
					}
				}

				5 = { # Find an actual nigerian prince
					create_character = {
						random_traits = no
						culture = hausa
						religion = ROOT
						dynasty = random
						female = no
						age = 35
						add_trait = elusive_shadow
						add_trait = quick
						add_trait = arbitrary
					}

					new_character = {
						set_character_flag = ai_flag_refuse_marriage
						save_event_target_as = nigerian_prince
					}

					liege = {
						character_event = {
							id = Plus.1811
							days = 30
							random = 10
						}
					}
				}
			}
		}

		prestige = 100

		tooltip = {
			reverse_opinion = {
				name = opinion_grateful
				who = liege
				years = 5
			}
		}
	}
}

# Notify liege of finding the "prince" at a nearby farm
character_event = {
	id = Plus.1810
	desc = EVTDESC_Plus_1810
	picture = GFX_evt_spymaster

	is_triggered_only = yes

	option = {
		name = CURSES

		scaled_wealth = {
			value = 0.1
			min = 5
			max = 20
		}
	}
}

# Spymaster finds the culprit
character_event = {
	id = Plus.1811
	desc = EVTDESC_Plus_1811
	picture = GFX_evt_spymaster

	is_triggered_only = yes

	immediate = {
		event_target:nigerian_prince = {
			move_character = ROOT
		}
	}

	option = { # Arrest him!
		name = EVTOPTA_Plus_174

		opinion = {
			name = opinion_grateful
			who = ROOT
			years = 5
		}

		opinion = {
			name = devious_plotter
			who = event_target:nigerian_prince
			years = 10
		}

		if = { # Maybe there's some money left
			limit = {
				event_target:nigerian_prince = {
					wealth >= 15
				}
			}

			wealth = event_target:nigerian_prince
		}
		else = {
			scaled_wealth = {
				value = 0.15
				min = 5
				max = 20
			}
		}

		event_target:nigerian_prince = {
			show_scope_change = no
			clear_wealth = yes
			imprison = yes
		}

		clear_event_target = nigerian_prince
		clear_event_target = wealthy_target
		clear_event_target = random_hausa_name
	}
}

# Notify "prince" that target fell for it.
character_event = {
	id = Plus.1812
	desc = EVTDESC_Plus_1812
	picture = GFX_evt_recieve_letter

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA_Plus_157
	}
}

# Notify "prince" that target paid
character_event = {
	id = Plus.1813
	desc = EVTDESC_Plus_1813
	picture = GFX_evt_recieve_letter

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA_FemRule_150

		tooltip = {
			event_target:wealthy_target = {
				show_scope_change = no

				transfer_scaled_wealth = {
					to = event_target:nigerian_prince
					value = 0.5
					min = 25
				}
			}
		}
	}
}

# Spymaster finds the culprit - player rival
character_event = {
	id = Plus.1814
	desc = EVTDESC_Plus_1814
	picture = GFX_evt_spymaster

	is_triggered_only = yes

	option = { # Gives arrest reason if possible
		name = CURSES

		opinion = {
			name = opinion_grateful
			who = ROOT
			years = 5
		}

		opinion = {
			name = devious_plotter
			who = event_target:nigerian_prince
			years = 10
		}

		clear_event_target = nigerian_prince
		clear_event_target = wealthy_target
	}
}

# Not a scam
long_character_event = {
	id = Plus.1815
	desc = EVTDESC_Plus_1815
	picture = GFX_evt_throne_room
	border = GFX_event_long_frame_diplomacy

	is_triggered_only = yes
	hide_from = yes

	option = {
		name = OK

		scaled_wealth = {
			value = 4
			min = 100
		}
	}
}

# Notify "prince" that there has been no response from the rival
character_event = {
	id = Plus.1816
	desc = EVTDESC_Plus_1816
	picture = GFX_evt_recieve_letter

	is_triggered_only = yes
	hide_from = yes

	ai = no

	option = {
		name = CURSES
	}
}